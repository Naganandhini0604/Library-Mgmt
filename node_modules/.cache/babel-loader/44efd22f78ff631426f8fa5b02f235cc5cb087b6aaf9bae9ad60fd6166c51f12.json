{"ast":null,"code":"'use strict';\n\n/**\n * Dependencies\n */\nvar slice = require('sliced');\nvar assert = require('assert');\nvar util = require('util');\nvar utils = require('./utils');\nvar debug = require('debug')('mquery');\n\n/* global Map */\n\n/**\n * Query constructor used for building queries.\n *\n * ####Example:\n *\n *     var query = new Query({ name: 'mquery' });\n *     query.setOptions({ collection: moduleCollection })\n *     query.where('age').gte(21).exec(callback);\n *\n * @param {Object} [criteria]\n * @param {Object} [options]\n * @api public\n */\n\nfunction Query(criteria, options) {\n  if (!(this instanceof Query)) return new Query(criteria, options);\n  var proto = this.constructor.prototype;\n  this.op = proto.op || undefined;\n  this.options = Object.assign({}, proto.options);\n  this._conditions = proto._conditions ? utils.clone(proto._conditions) : {};\n  this._fields = proto._fields ? utils.clone(proto._fields) : undefined;\n  this._update = proto._update ? utils.clone(proto._update) : undefined;\n  this._path = proto._path || undefined;\n  this._distinct = proto._distinct || undefined;\n  this._collection = proto._collection || undefined;\n  this._traceFunction = proto._traceFunction || undefined;\n  if (options) {\n    this.setOptions(options);\n  }\n  if (criteria) {\n    if (criteria.find && criteria.remove && criteria.update) {\n      // quack quack!\n      this.collection(criteria);\n    } else {\n      this.find(criteria);\n    }\n  }\n}\n\n/**\n * This is a parameter that the user can set which determines if mquery\n * uses $within or $geoWithin for queries. It defaults to true which\n * means $geoWithin will be used. If using MongoDB < 2.4 you should\n * set this to false.\n *\n * @api public\n * @property use$geoWithin\n */\n\nvar $withinCmd = '$geoWithin';\nObject.defineProperty(Query, 'use$geoWithin', {\n  get: function () {\n    return $withinCmd == '$geoWithin';\n  },\n  set: function (v) {\n    if (true === v) {\n      // mongodb >= 2.4\n      $withinCmd = '$geoWithin';\n    } else {\n      $withinCmd = '$within';\n    }\n  }\n});\n\n/**\n * Converts this query to a constructor function with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query that will read documents with a \"video\" category from\n *     // `aCollection` on the primary node in the replica-set unless it is down,\n *     // in which case we'll read from a secondary node.\n *     var query = mquery({ category: 'video' })\n *     query.setOptions({ collection: aCollection, read: 'primaryPreferred' });\n *\n *     // create a constructor based off these settings\n *     var Video = query.toConstructor();\n *\n *     // Video is now a subclass of mquery() and works the same way but with the\n *     // default query parameters and options set.\n *\n *     // run a query with the previous settings but filter for movies with names\n *     // that start with \"Life\".\n *     Video().where({ name: /^Life/ }).exec(cb);\n *\n * @return {Query} new Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  function CustomQuery(criteria, options) {\n    if (!(this instanceof CustomQuery)) return new CustomQuery(criteria, options);\n    Query.call(this, criteria, options);\n  }\n  utils.inherits(CustomQuery, Query);\n\n  // set inherited defaults\n  var p = CustomQuery.prototype;\n  p.options = {};\n  p.setOptions(this.options);\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update);\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._traceFunction = this._traceFunction;\n  return CustomQuery;\n};\n\n/**\n * Sets query options.\n *\n * ####Options:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\n * - [maxScan](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan) *\n * - [maxTime](http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS) *\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D) *\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\n * - [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\n * - collection the collection to query against\n *\n * _* denotes a query helper method is also available_\n *\n * @param {Object} options\n * @api public\n */\n\nQuery.prototype.setOptions = function (options) {\n  if (!(options && utils.isObject(options))) return this;\n\n  // set arbitrary options\n  var methods = utils.keys(options),\n    method;\n  for (var i = 0; i < methods.length; ++i) {\n    method = methods[i];\n\n    // use methods if exist (safer option manipulation)\n    if ('function' == typeof this[method]) {\n      var args = utils.isArray(options[method]) ? options[method] : [options[method]];\n      this[method].apply(this, args);\n    } else {\n      this.options[method] = options[method];\n    }\n  }\n  return this;\n};\n\n/**\n * Sets this Querys collection.\n *\n * @param {Collection} coll\n * @return {Query} this\n */\n\nQuery.prototype.collection = function collection(coll) {\n  this._collection = new Query.Collection(coll);\n  return this;\n};\n\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * ####Example\n *\n *     query.find().collation({ locale: \"en_US\", strength: 1 })\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\nQuery.prototype.collation = function (value) {\n  this.options.collation = value;\n  return this;\n};\n\n/**\n * Specifies a `$where` condition\n *\n * Use `$where` when you need to select documents using a JavaScript expression.\n *\n * ####Example\n *\n *     query.$where('this.comments.length > 10 || this.name.length > 5')\n *\n *     query.$where(function () {\n *       return this.comments.length > 10 || this.name.length > 5;\n *     })\n *\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */\n\nQuery.prototype.$where = function (js) {\n  this._conditions.$where = js;\n  return this;\n};\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @param {String} [path]\n * @param {Object} [val]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.where = function () {\n  if (!arguments.length) return this;\n  if (!this.op) this.op = 'find';\n  var type = typeof arguments[0];\n  if ('string' == type) {\n    this._path = arguments[0];\n    if (2 === arguments.length) {\n      this._conditions[this._path] = arguments[1];\n    }\n    return this;\n  }\n  if ('object' == type && !Array.isArray(arguments[0])) {\n    return this.merge(arguments[0]);\n  }\n  throw new TypeError('path must be a string or object');\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.equals = function equals(val) {\n  this._ensurePath('equals');\n  var path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n * This is alias of `equals`\n *\n * ####Example\n *\n *     User.where('age').eq(49);\n *\n *     // is the same as\n *\n *     User.shere('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.eq = function eq(val) {\n  this._ensurePath('eq');\n  var path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.or = function or(array) {\n  var or = this._conditions.$or || (this._conditions.$or = []);\n  if (!utils.isArray(array)) array = [array];\n  or.push.apply(or, array);\n  return this;\n};\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.nor = function nor(array) {\n  var nor = this._conditions.$nor || (this._conditions.$nor = []);\n  if (!utils.isArray(array)) array = [array];\n  nor.push.apply(nor, array);\n  return this;\n};\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.and = function and(array) {\n  var and = this._conditions.$and || (this._conditions.$and = []);\n  if (!Array.isArray(array)) array = [array];\n  and.push.apply(and, array);\n  return this;\n};\n\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/*!\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\n\n'gt gte lt lte ne in nin all regex size maxDistance minDistance'.split(' ').forEach(function ($conditional) {\n  Query.prototype[$conditional] = function () {\n    var path, val;\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n    var conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ? this._conditions[path] : this._conditions[path] = {};\n    conds['$' + $conditional] = val;\n    return this;\n  };\n});\n\n/**\n * Specifies a `$mod` condition\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.mod = function () {\n  var val, path;\n  if (1 === arguments.length) {\n    this._ensurePath('mod');\n    val = arguments[0];\n    path = this._path;\n  } else if (2 === arguments.length && !utils.isArray(arguments[1])) {\n    this._ensurePath('mod');\n    val = slice(arguments);\n    path = this._path;\n  } else if (3 === arguments.length) {\n    val = slice(arguments, 1);\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.exists = function () {\n  var path, val;\n  if (0 === arguments.length) {\n    this._ensurePath('exists');\n    path = this._path;\n    val = true;\n  } else if (1 === arguments.length) {\n    if ('boolean' === typeof arguments[0]) {\n      this._ensurePath('exists');\n      path = this._path;\n      val = arguments[0];\n    } else {\n      path = arguments[0];\n      val = true;\n    }\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  }\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$exists = val;\n  return this;\n};\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.elemMatch = function () {\n  if (null == arguments[0]) throw new TypeError('Invalid argument');\n  var fn, path, criteria;\n  if ('function' === typeof arguments[0]) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    fn = arguments[0];\n  } else if (utils.isObject(arguments[0])) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    criteria = arguments[0];\n  } else if ('function' === typeof arguments[1]) {\n    path = arguments[0];\n    fn = arguments[1];\n  } else if (arguments[1] && utils.isObject(arguments[1])) {\n    path = arguments[0];\n    criteria = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  if (fn) {\n    criteria = new Query();\n    fn(criteria);\n    criteria = criteria._conditions;\n  }\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$elemMatch = criteria;\n  return this;\n};\n\n// Spatial queries\n\n/**\n * Sugar for geo-spatial queries.\n *\n * ####Example\n *\n *     query.within().box()\n *     query.within().circle()\n *     query.within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * ####NOTE:\n *\n * Must be used after `where()`.\n *\n * @memberOf Query\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.within = function within() {\n  // opinionated, must be used after where\n  this._ensurePath('within');\n  this._geoComparison = $withinCmd;\n  if (0 === arguments.length) {\n    return this;\n  }\n  if (2 === arguments.length) {\n    return this.box.apply(this, arguments);\n  } else if (2 < arguments.length) {\n    return this.polygon.apply(this, arguments);\n  }\n  var area = arguments[0];\n  if (!area) throw new TypeError('Invalid argument');\n  if (area.center) return this.circle(area);\n  if (area.box) return this.box.apply(this, area.box);\n  if (area.polygon) return this.polygon.apply(this, area.polygon);\n  if (area.type && area.coordinates) return this.geometry(area);\n  throw new TypeError('Invalid argument');\n};\n\n/**\n * Specifies a $box condition\n *\n * ####Example\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box('loc', lowerLeft, upperRight )\n *\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see Query#within #query_Query-within\n * @param {String} path\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.box = function () {\n  var path, box;\n  if (3 === arguments.length) {\n    // box('loc', [], [])\n    path = arguments[0];\n    box = [arguments[1], arguments[2]];\n  } else if (2 === arguments.length) {\n    // box([], [])\n    this._ensurePath('box');\n    path = this._path;\n    box = [arguments[0], arguments[1]];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = {\n    '$box': box\n  };\n  return this;\n};\n\n/**\n * Specifies a $polygon condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @param {String|Array} [path]\n * @param {Array|Object} [val]\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.polygon = function () {\n  var val, path;\n  if ('string' == typeof arguments[0]) {\n    // polygon('loc', [],[],[])\n    path = arguments[0];\n    val = slice(arguments, 1);\n  } else {\n    // polygon([],[],[])\n    this._ensurePath('polygon');\n    path = this._path;\n    val = slice(arguments);\n  }\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = {\n    '$polygon': val\n  };\n  return this;\n};\n\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n *     // for spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.circle = function () {\n  var path, val;\n  if (1 === arguments.length) {\n    this._ensurePath('circle');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  if (!('radius' in val && val.center)) throw new Error('center and radius are required');\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  var type = val.spherical ? '$centerSphere' : '$center';\n  var wKey = this._geoComparison || $withinCmd;\n  conds[wKey] = {};\n  conds[wKey][type] = [val.center, val.radius];\n  if ('unique' in val) conds[wKey].$uniqueDocs = !!val.unique;\n  return this;\n};\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *     query.near({ center: { type: 'Point', coordinates: [..] }})\n *     query.near().geometry({ type: 'Point', coordinates: [..] })\n *\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.near = function near() {\n  var path, val;\n  this._geoComparison = '$near';\n  if (0 === arguments.length) {\n    return this;\n  } else if (1 === arguments.length) {\n    this._ensurePath('near');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  if (!val.center) {\n    throw new Error('center is required');\n  }\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  var type = val.spherical ? '$nearSphere' : '$near';\n\n  // center could be a GeoJSON object or an Array\n  if (Array.isArray(val.center)) {\n    conds[type] = val.center;\n    var radius = 'maxDistance' in val ? val.maxDistance : null;\n    if (null != radius) {\n      conds.$maxDistance = radius;\n    }\n    if (null != val.minDistance) {\n      conds.$minDistance = val.minDistance;\n    }\n  } else {\n    // GeoJSON?\n    if (val.center.type != 'Point' || !Array.isArray(val.center.coordinates)) {\n      throw new Error(util.format('Invalid GeoJSON specified for %s', type));\n    }\n    conds[type] = {\n      $geometry: val.center\n    };\n\n    // MongoDB 2.6 insists on maxDistance being in $near / $nearSphere\n    if ('maxDistance' in val) {\n      conds[type]['$maxDistance'] = val.maxDistance;\n    }\n    if ('minDistance' in val) {\n      conds[type]['$minDistance'] = val.minDistance;\n    }\n  }\n  return this;\n};\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * @param {Object} [arg]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.intersects = function intersects() {\n  // opinionated, must be used after where\n  this._ensurePath('intersects');\n  this._geoComparison = '$geoIntersects';\n  if (0 === arguments.length) {\n    return this;\n  }\n  var area = arguments[0];\n  if (null != area && area.type && area.coordinates) return this.geometry(area);\n  throw new TypeError('Invalid argument');\n};\n\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * The most recent path passed to `where()` is used.\n *\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @api public\n */\n\nQuery.prototype.geometry = function geometry() {\n  if (!('$within' == this._geoComparison || '$geoWithin' == this._geoComparison || '$near' == this._geoComparison || '$geoIntersects' == this._geoComparison)) {\n    throw new Error('geometry() must come after `within()`, `intersects()`, or `near()');\n  }\n  var val, path;\n  if (1 === arguments.length) {\n    this._ensurePath('geometry');\n    path = this._path;\n    val = arguments[0];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  if (!(val.type && Array.isArray(val.coordinates))) {\n    throw new TypeError('Invalid argument');\n  }\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison] = {\n    $geometry: val\n  };\n  return this;\n};\n\n// end spatial\n\n/**\n * Specifies which document fields to include or exclude\n *\n * ####String syntax\n *\n * When passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.\n *\n * ####Example\n *\n *     // include a and b, exclude c\n *     query.select('a b -c');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({a: 1, b: 1, c: 0});\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\nQuery.prototype.select = function select() {\n  var arg = arguments[0];\n  if (!arg) return this;\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n  this._validate('select');\n  var fields = this._fields || (this._fields = {});\n  var type = typeof arg;\n  var i, len;\n  if (('string' == type || utils.isArgumentsObject(arg)) && 'number' == typeof arg.length || Array.isArray(arg)) {\n    if ('string' == type) arg = arg.split(/\\s+/);\n    for (i = 0, len = arg.length; i < len; ++i) {\n      var field = arg[i];\n      if (!field) continue;\n      var include = '-' == field[0] ? 0 : 1;\n      if (include === 0) field = field.substring(1);\n      fields[field] = include;\n    }\n    return this;\n  }\n  if (utils.isObject(arg)) {\n    var keys = utils.keys(arg);\n    for (i = 0; i < keys.length; ++i) {\n      fields[keys[i]] = arg[keys[i]];\n    }\n    return this;\n  }\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n\n/**\n * Specifies a $slice condition for a `path`\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @api public\n */\n\nQuery.prototype.slice = function () {\n  if (0 === arguments.length) return this;\n  this._validate('slice');\n  var path, val;\n  if (1 === arguments.length) {\n    var arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      var keys = Object.keys(arg);\n      var numKeys = keys.length;\n      for (var i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = slice(arguments);\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (3 === arguments.length) {\n    path = arguments[0];\n    val = slice(arguments, 1);\n  }\n  var myFields = this._fields || (this._fields = {});\n  myFields[path] = {\n    '$slice': val\n  };\n  return this;\n};\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * ####Example\n *\n *     // these are equivalent\n *     query.sort({ field: 'asc', test: -1 });\n *     query.sort('field -test');\n *     query.sort([['field', 1], ['test', -1]]);\n *\n * ####Note\n *\n *  - The array syntax `.sort([['field', 1], ['test', -1]])` can only be used with [mongodb driver >= 2.0.46](https://github.com/mongodb/node-mongodb-native/blob/2.1/HISTORY.md#2046-2015-10-15).\n *  - Cannot be used with `distinct()`\n *\n * @param {Object|String|Array} arg\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.sort = function (arg) {\n  if (!arg) return this;\n  var i, len, field;\n  this._validate('sort');\n  var type = typeof arg;\n\n  // .sort([['field', 1], ['test', -1]])\n  if (Array.isArray(arg)) {\n    len = arg.length;\n    for (i = 0; i < arg.length; ++i) {\n      if (!Array.isArray(arg[i])) {\n        throw new Error('Invalid sort() argument, must be array of arrays');\n      }\n      _pushArr(this.options, arg[i][0], arg[i][1]);\n    }\n    return this;\n  }\n\n  // .sort('field -test')\n  if (1 === arguments.length && 'string' == type) {\n    arg = arg.split(/\\s+/);\n    len = arg.length;\n    for (i = 0; i < len; ++i) {\n      field = arg[i];\n      if (!field) continue;\n      var ascend = '-' == field[0] ? -1 : 1;\n      if (ascend === -1) field = field.substring(1);\n      push(this.options, field, ascend);\n    }\n    return this;\n  }\n\n  // .sort({ field: 1, test: -1 })\n  if (utils.isObject(arg)) {\n    var keys = utils.keys(arg);\n    for (i = 0; i < keys.length; ++i) {\n      field = keys[i];\n      push(this.options, field, arg[field]);\n    }\n    return this;\n  }\n  if (typeof Map !== 'undefined' && arg instanceof Map) {\n    _pushMap(this.options, arg);\n    return this;\n  }\n  throw new TypeError('Invalid sort() argument. Must be a string, object, or array.');\n};\n\n/*!\n * @ignore\n */\n\nvar _validSortValue = {\n  '1': 1,\n  '-1': -1,\n  'asc': 1,\n  'ascending': 1,\n  'desc': -1,\n  'descending': -1\n};\nfunction push(opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' + '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' + '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n  var s;\n  if (value && value.$meta) {\n    s = opts.sort || (opts.sort = {});\n    s[field] = {\n      $meta: value.$meta\n    };\n    return;\n  }\n  s = opts.sort || (opts.sort = {});\n  var val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: { ' + field + ': ' + value + ' }');\n  s[field] = val;\n}\nfunction _pushArr(opts, field, value) {\n  opts.sort = opts.sort || [];\n  if (!Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' + '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' + '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n  var val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: [ ' + field + ', ' + value + ' ]');\n  opts.sort.push([field, val]);\n}\nfunction _pushMap(opts, map) {\n  opts.sort = opts.sort || new Map();\n  if (!(opts.sort instanceof Map)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or ' + 'object or map consistently');\n  }\n  map.forEach(function (value, key) {\n    var val = String(value || 1).toLowerCase();\n    val = _validSortValue[val];\n    if (!val) throw new TypeError('Invalid sort value: < ' + key + ': ' + value + ' >');\n    opts.sort.set(key, val);\n  });\n}\n\n/**\n * Specifies the limit option.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the skip option.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan\n * @api public\n */\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment\n * @api public\n */\n\n/*!\n * limit, skip, maxScan, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\n\n['limit', 'skip', 'maxScan', 'batchSize', 'comment'].forEach(function (method) {\n  Query.prototype[method] = function (v) {\n    this._validate(method);\n    this.options[method] = v;\n    return this;\n  };\n});\n\n/**\n * Specifies the maxTimeMS option.\n *\n * ####Example\n *\n *     query.maxTime(100)\n *     query.maxTimeMS(100)\n *\n * @method maxTime\n * @memberOf Query\n * @param {Number} ms\n * @see mongodb http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS\n * @api public\n */\n\nQuery.prototype.maxTime = Query.prototype.maxTimeMS = function (ms) {\n  this._validate('maxTime');\n  this.options.maxTimeMS = ms;\n  return this;\n};\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     mquery().snapshot() // true\n *     mquery().snapshot(true)\n *     mquery().snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.snapshot = function () {\n  this._validate('snapshot');\n  this.options.snapshot = arguments.length ? !!arguments[0] : true;\n  return this;\n};\n\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1});\n *     query.hint('indexA_1_indexB_1');\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|string} val a hint object or the index name\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint\n * @api public\n */\n\nQuery.prototype.hint = function () {\n  if (0 === arguments.length) return this;\n  this._validate('hint');\n  var arg = arguments[0];\n  if (utils.isObject(arg)) {\n    var hint = this.options.hint || (this.options.hint = {});\n\n    // must keep object keys in order so don't use Object.keys()\n    for (var k in arg) {\n      hint[k] = arg[k];\n    }\n    return this;\n  }\n  if (typeof arg === 'string') {\n    this.options.hint = arg;\n    return this;\n  }\n  throw new TypeError('Invalid hint. ' + arg);\n};\n\n/**\n * Requests acknowledgement that this operation has been persisted to MongoDB's\n * on-disk journal.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `j` value if it is specified in writeConcern options\n *\n * ####Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000);\n *\n * @method j\n * @memberOf Query\n * @instance\n * @param {boolean} val\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.j = function j(val) {\n  this.options.j = val;\n  return this;\n};\n\n/**\n * Sets the slaveOk option. _Deprecated_ in MongoDB 2.2 in favor of read preferences.\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see read()\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.slaveOk = function (v) {\n  this.options.slaveOk = arguments.length ? !!v : true;\n  return this;\n};\n\n/**\n * Sets the readPreference option for the query.\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // you can also use mongodb.ReadPreference class to also specify tags\n *     new Query().read(mongodb.ReadPreference('secondary', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }]))\n *\n *     new Query().setReadPreference('primary') // alias of .read()\n *\n * ####Preferences:\n *\n *     primary - (default)  Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @param {String|ReadPreference} pref one of the listed preference options or their aliases\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = Query.prototype.setReadPreference = function (pref) {\n  if (arguments.length > 1 && !Query.prototype.read.deprecationWarningIssued) {\n    console.error('Deprecation warning: \\'tags\\' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead.');\n    Query.prototype.read.deprecationWarningIssued = true;\n  }\n  this.options.readPreference = utils.readPref(pref);\n  return this;\n};\n\n/**\n * Sets the readConcern option for the query.\n *\n * ####Example:\n *\n *     new Query().readConcern('local')\n *     new Query().readConcern('l')  // same as local\n *\n *     new Query().readConcern('available')\n *     new Query().readConcern('a')  // same as available\n *\n *     new Query().readConcern('majority')\n *     new Query().readConcern('m')  // same as majority\n *\n *     new Query().readConcern('linearizable')\n *     new Query().readConcern('lz') // same as linearizable\n *\n *     new Query().readConcern('snapshot')\n *     new Query().readConcern('s')  // same as snapshot\n *\n *     new Query().r('s') // r is alias of readConcern\n *\n *\n * ####Read Concern Level:\n *\n *     local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\n *     linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\n *     snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\n\n\n *\n *\n * Aliases\n *\n *     l   local\n *     a   available\n *     m   majority\n *     lz  linearizable\n *     s   snapshot\n *\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\n *\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.readConcern = Query.prototype.r = function (level) {\n  this.options.readConcern = utils.readConcern(level);\n  return this;\n};\n\n/**\n * Sets tailable option.\n *\n * ####Example\n *\n *     query.tailable() <== true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} v defaults to true\n * @see mongodb http://www.mongodb.org/display/DOCS/Tailable+Cursors\n * @api public\n */\n\nQuery.prototype.tailable = function () {\n  this._validate('tailable');\n  this.options.tailable = arguments.length ? !!arguments[0] : true;\n  return this;\n};\n\n/**\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\n * that must acknowledge this write before this write is considered successful.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `w` value if it is specified in writeConcern options\n *\n * ####Example:\n *\n * mquery().writeConcern(0)\n * mquery().writeConcern(1)\n * mquery().writeConcern({ w: 1, j: true, wtimeout: 2000 })\n * mquery().writeConcern('majority')\n * mquery().writeConcern('m') // same as majority\n * mquery().writeConcern('tagSetName') // if the tag set is 'm', use .writeConcern({ w: 'm' }) instead\n * mquery().w(1) // w is alias of writeConcern\n *\n * @method writeConcern\n * @memberOf Query\n * @instance\n * @param {String|number|object} concern 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.writeConcern = Query.prototype.w = function writeConcern(concern) {\n  if ('object' === typeof concern) {\n    if ('undefined' !== typeof concern.j) this.options.j = concern.j;\n    if ('undefined' !== typeof concern.w) this.options.w = concern.w;\n    if ('undefined' !== typeof concern.wtimeout) this.options.wtimeout = concern.wtimeout;\n  } else {\n    this.options.w = 'm' === concern ? 'majority' : concern;\n  }\n  return this;\n};\n\n/**\n * Specifies a time limit, in milliseconds, for the write concern.\n * If `ms > 1`, it is maximum amount of time to wait for this write\n * to propagate through the replica set before this operation fails.\n * The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to `wtimeout` value if it is specified in writeConcern\n *\n * ####Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000)\n *\n * @method wtimeout\n * @memberOf Query\n * @instance\n * @param {number} ms number of milliseconds to wait\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.wtimeout = Query.prototype.wTimeout = function wtimeout(ms) {\n  this.options.wtimeout = ms;\n  return this;\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function (source) {\n  if (!source) return this;\n  if (!Query.canMerge(source)) throw new TypeError('Invalid argument. Expected instanceof mquery or plain object');\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions);\n    }\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields);\n    }\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options);\n    }\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source);\n  return this;\n};\n\n/**\n * Finds documents.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.find()\n *     query.find(callback)\n *     query.find({ name: 'Burning Lights' }, callback)\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function (criteria, callback) {\n  this.op = 'find';\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  if (!callback) return this;\n  var conds = this._conditions;\n  var options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n  debug('find', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('find', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.find(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\n * Returns the query cursor\n *\n * ####Examples\n *\n *     query.find().cursor();\n *     query.cursor({ name: 'Burning Lights' });\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Object} cursor\n * @api public\n */\n\nQuery.prototype.cursor = function cursor(criteria) {\n  if (this.op) {\n    if (this.op !== 'find') {\n      throw new TypeError('.cursor only support .find method');\n    }\n  } else {\n    this.find(criteria);\n  }\n  var conds = this._conditions;\n  var options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n  debug('findCursor', this._collection.collectionName, conds, options);\n  return this._collection.findCursor(conds, options);\n};\n\n/**\n * Executes the query as a findOne() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.findOne().where('name', /^Burning/);\n *\n *     query.findOne({ name: /^Burning/ })\n *\n *     query.findOne({ name: /^Burning/ }, callback); // executes\n *\n *     query.findOne(function (err, doc) {\n *       if (err) return handleError(err);\n *       if (doc) {\n *         // doc may be null if no document matched\n *\n *       }\n *     });\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOne = function (criteria, callback) {\n  this.op = 'findOne';\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  if (!callback) return this;\n  var conds = this._conditions;\n  var options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n  debug('findOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('findOne', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.findOne(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\n * Exectues the query as a count() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.count().where('color', 'black').exec(callback);\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Count\n * @api public\n */\n\nQuery.prototype.count = function (criteria, callback) {\n  this.op = 'count';\n  this._validate();\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  if (!callback) return this;\n  var conds = this._conditions,\n    options = this._optionsForExec();\n  debug('count', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('count', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.count(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\n * Declares or executes a distinct() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     distinct(criteria, field, fn)\n *     distinct(criteria, field)\n *     distinct(field, fn)\n *     distinct(field)\n *     distinct(fn)\n *     distinct()\n *\n * @param {Object|Query} [criteria]\n * @param {String} [field]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Distinct\n * @api public\n */\n\nQuery.prototype.distinct = function (criteria, field, callback) {\n  this.op = 'distinct';\n  this._validate();\n  if (!callback) {\n    switch (typeof field) {\n      case 'function':\n        callback = field;\n        if ('string' == typeof criteria) {\n          field = criteria;\n          criteria = undefined;\n        }\n        break;\n      case 'undefined':\n      case 'string':\n        break;\n      default:\n        throw new TypeError('Invalid `field` argument. Must be string or function');\n    }\n    switch (typeof criteria) {\n      case 'function':\n        callback = criteria;\n        criteria = field = undefined;\n        break;\n      case 'string':\n        field = criteria;\n        criteria = undefined;\n        break;\n    }\n  }\n  if ('string' == typeof field) {\n    this._distinct = field;\n  }\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  if (!callback) {\n    return this;\n  }\n  if (!this._distinct) {\n    throw new Error('No value for `distinct` has been declared');\n  }\n  var conds = this._conditions,\n    options = this._optionsForExec();\n  debug('distinct', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('distinct', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.distinct(this._distinct, conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\n * Declare and/or execute this query as an update() operation. By default,\n * `update()` only modifies the _first_ document that matches `criteria`.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     mquery({ _id: id }).update({ title: 'words' }, ...)\n *\n * becomes\n *\n *     collection.update({ _id: id }, { $set: { title: 'words' }}, ...)\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call update() and then execute it by using the `exec()` method.\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed as unsafe\n *\n *     // keys that are not $atomic ops become $set.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).where({ _id: id }).exec();\n *\n *     var q = mquery(collection).update(); // not executed\n *\n *     // overwriting with empty docs\n *     var q.where({ _id: id }).setOptions({ overwrite: true })\n *     q.update({ }, callback); // executes\n *\n *     // multi update with overwrite to empty doc\n *     var q = mquery(collection).where({ _id: id });\n *     q.setOptions({ multi: true, overwrite: true })\n *     q.update({ });\n *     q.update(callback); // executed\n *\n *     // multi updates\n *     mquery()\n *       .collection(coll)\n *       .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *     // more multi updates\n *     mquery({ })\n *       .collection(coll)\n *       .setOptions({ multi: true })\n *       .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     mquery({ email: 'address@example.com' })\n *      .collection(coll)\n *      .update({ $inc: { counter: 1 }}, callback)\n *\n *     // summary\n *     update(criteria, doc, opts, cb) // executes\n *     update(criteria, doc, opts)\n *     update(criteria, doc, cb) // executes\n *     update(criteria, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes (unsafe write)\n *     update()\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.update = function update(criteria, doc, options, callback) {\n  var force;\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n  return _update(this, 'update', criteria, doc, options, force, callback);\n};\n\n/**\n * Declare and/or execute this query as an `updateMany()` operation. Identical\n * to `update()` except `updateMany()` will update _all_ documents that match\n * `criteria`, rather than just the first one.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     // Update every document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.updateMany = function updateMany(criteria, doc, options, callback) {\n  var force;\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n  return _update(this, 'updateMany', criteria, doc, options, force, callback);\n};\n\n/**\n * Declare and/or execute this query as an `updateOne()` operation. Identical\n * to `update()` except `updateOne()` will _always_ update just one document,\n * regardless of the `multi` option.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     // Update the first document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.updateOne = function updateOne(criteria, doc, options, callback) {\n  var force;\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n  return _update(this, 'updateOne', criteria, doc, options, force, callback);\n};\n\n/**\n * Declare and/or execute this query as an `replaceOne()` operation. Similar\n * to `updateOne()`, except `replaceOne()` is not allowed to use atomic\n * modifiers (`$set`, `$push`, etc.). Calling `replaceOne()` will always\n * replace the existing doc.\n *\n * ####Example\n *\n *     // Replace the document with `_id` 1 with `{ _id: 1, year: 2017 }`\n *     mquery().replaceOne({ _id: 1 }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.replaceOne = function replaceOne(criteria, doc, options, callback) {\n  var force;\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n  this.setOptions({\n    overwrite: true\n  });\n  return _update(this, 'replaceOne', criteria, doc, options, force, callback);\n};\n\n/*!\n * Internal helper for update, updateMany, updateOne\n */\n\nfunction _update(query, op, criteria, doc, options, force, callback) {\n  query.op = op;\n  if (Query.canMerge(criteria)) {\n    query.merge(criteria);\n  }\n  if (doc) {\n    query._mergeUpdate(doc);\n  }\n  if (utils.isObject(options)) {\n    // { overwrite: true }\n    query.setOptions(options);\n  }\n\n  // we are done if we don't have callback and they are\n  // not forcing an unsafe write.\n  if (!(force || callback)) {\n    return query;\n  }\n  if (!query._update || !query.options.overwrite && 0 === utils.keys(query._update).length) {\n    callback && utils.soon(callback.bind(null, null, 0));\n    return query;\n  }\n  options = query._optionsForExec();\n  if (!callback) options.safe = false;\n  criteria = query._conditions;\n  doc = query._updateForExec();\n  debug('update', query._collection.collectionName, criteria, doc, options);\n  callback = query._wrapCallback(op, callback, {\n    conditions: criteria,\n    doc: doc,\n    options: options\n  });\n  query._collection[op](criteria, doc, options, utils.tick(callback));\n  return query;\n}\n\n/**\n * Declare and/or execute this query as a remove() operation.\n *\n * ####Example\n *\n *     mquery(collection).remove({ artist: 'Anne Murray' }, callback)\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call remove() and then execute it by using the `exec()` method.\n *\n *     // not executed\n *     var query = mquery(collection).remove({ name: 'Anne Murray' })\n *\n *     // executed\n *     mquery(collection).remove({ name: 'Anne Murray' }, callback)\n *     mquery(collection).remove({ name: 'Anne Murray' }).remove(callback)\n *\n *     // executed without a callback (unsafe write)\n *     query.exec()\n *\n *     // summary\n *     query.remove(conds, fn); // executes\n *     query.remove(conds)\n *     query.remove(fn) // executes\n *     query.remove()\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.remove = function (criteria, callback) {\n  this.op = 'remove';\n  var force;\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n  if (!(force || callback)) return this;\n  var options = this._optionsForExec();\n  if (!callback) options.safe = false;\n  var conds = this._conditions;\n  debug('remove', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('remove', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.remove(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\n * Declare and/or execute this query as a `deleteOne()` operation. Behaves like\n * `remove()`, except for ignores the `justOne` option and always deletes at\n * most one document.\n *\n * ####Example\n *\n *     mquery(collection).deleteOne({ artist: 'Anne Murray' }, callback)\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.deleteOne = function (criteria, callback) {\n  this.op = 'deleteOne';\n  var force;\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n  if (!(force || callback)) return this;\n  var options = this._optionsForExec();\n  if (!callback) options.safe = false;\n  delete options.justOne;\n  var conds = this._conditions;\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('deleteOne', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.deleteOne(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Behaves like\n * `remove()`, except for ignores the `justOne` option and always deletes\n * _every_ document that matches `criteria`.\n *\n * ####Example\n *\n *     mquery(collection).deleteMany({ artist: 'Anne Murray' }, callback)\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.deleteMany = function (criteria, callback) {\n  this.op = 'deleteMany';\n  var force;\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n  if (!(force || callback)) return this;\n  var options = this._optionsForExec();\n  if (!callback) options.safe = false;\n  delete options.justOne;\n  var conds = this._conditions;\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('deleteOne', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.deleteMany(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `new`: bool - true to return the modified document rather than the original. defaults to true\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function (criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n  this._validate();\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      options = undefined;\n      break;\n    case 1:\n      if ('function' == typeof criteria) {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n  }\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n  options && this.setOptions(options);\n  if (!callback) return this;\n  return this._findAndModify('update', callback);\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *     A.where().findOneAndDelete()           // alias of .findOneAndRemove()\n *\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = Query.prototype.findOneAndDelete = function (conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n  this._validate();\n  if ('function' == typeof options) {\n    callback = options;\n    options = undefined;\n  } else if ('function' == typeof conditions) {\n    callback = conditions;\n    conditions = undefined;\n  }\n\n  // apply conditions\n  if (Query.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  // apply options\n  options && this.setOptions(options);\n  if (!callback) return this;\n  return this._findAndModify('remove', callback);\n};\n\n/**\n * _findAndModify\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype._findAndModify = function (type, callback) {\n  assert.equal('function', typeof callback);\n  var options = this._optionsForExec();\n  var fields;\n  var doc;\n  if ('remove' == type) {\n    options.remove = true;\n  } else {\n    if (!('new' in options)) options.new = true;\n    if (!('upsert' in options)) options.upsert = false;\n    doc = this._updateForExec();\n    if (!doc) {\n      if (options.upsert) {\n        // still need to do the upsert to empty doc\n        doc = {\n          $set: {}\n        };\n      } else {\n        return this.findOne(callback);\n      }\n    }\n  }\n  fields = this._fieldsForExec();\n  if (fields != null) {\n    if (this.$useProjection) {\n      options.projection = this._fieldsForExec();\n    } else {\n      options.fields = this._fieldsForExec();\n    }\n  }\n  var conds = this._conditions;\n  debug('findAndModify', this._collection.collectionName, conds, doc, options);\n  callback = this._wrapCallback('findAndModify', callback, {\n    conditions: conds,\n    doc: doc,\n    options: options\n  });\n  this._collection.findAndModify(conds, doc, options, utils.tick(callback));\n  return this;\n};\n\n/**\n * Wrap callback to add tracing\n *\n * @param {Function} callback\n * @param {Object} [queryInfo]\n * @api private\n */\nQuery.prototype._wrapCallback = function (method, callback, queryInfo) {\n  var traceFunction = this._traceFunction || Query.traceFunction;\n  if (traceFunction) {\n    queryInfo.collectionName = this._collection.collectionName;\n    var traceCallback = traceFunction && traceFunction.call(null, method, queryInfo, this);\n    var startTime = new Date().getTime();\n    return function wrapperCallback(err, result) {\n      if (traceCallback) {\n        var millis = new Date().getTime() - startTime;\n        traceCallback.call(null, err, result, millis);\n      }\n      if (callback) {\n        callback.apply(null, arguments);\n      }\n    };\n  }\n  return callback;\n};\n\n/**\n * Add trace function that gets called when the query is executed.\n * The function will be called with (method, queryInfo, query) and\n * should return a callback function which will be called\n * with (err, result, millis) when the query is complete.\n *\n * queryInfo is an object containing: {\n *   collectionName: <name of the collection>,\n *   conditions: <query criteria>,\n *   options: <comment, fields, readPreference, etc>,\n *   doc: [document to update, if applicable]\n * }\n *\n * NOTE: Does not trace stream queries.\n *\n * @param {Function} traceFunction\n * @return {Query} this\n * @api public\n */\nQuery.prototype.setTraceFunction = function (traceFunction) {\n  this._traceFunction = traceFunction;\n  return this;\n};\n\n/**\n * Executes the query\n *\n * ####Examples\n *\n *     query.exec();\n *     query.exec(callback);\n *     query.exec('update');\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback]\n * @api public\n */\n\nQuery.prototype.exec = function exec(op, callback) {\n  switch (typeof op) {\n    case 'function':\n      callback = op;\n      op = null;\n      break;\n    case 'string':\n      this.op = op;\n      break;\n  }\n  assert.ok(this.op, 'Missing query type: (find, update, etc)');\n  if ('update' == this.op || 'remove' == this.op) {\n    callback || (callback = true);\n  }\n  var _this = this;\n  if ('function' == typeof callback) {\n    this[this.op](callback);\n  } else {\n    return new Query.Promise(function (success, error) {\n      _this[_this.op](function (err, val) {\n        if (err) error(err);else success(val);\n        success = error = null;\n      });\n    });\n  }\n};\n\n/**\n * Returns a thunk which when called runs this.exec()\n *\n * The thunk receives a callback function which will be\n * passed to `this.exec()`\n *\n * @return {Function}\n * @api public\n */\n\nQuery.prototype.thunk = function () {\n  var _this = this;\n  return function (cb) {\n    _this.exec(cb);\n  };\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = function (resolve, reject) {\n  var _this = this;\n  var promise = new Query.Promise(function (success, error) {\n    _this.exec(function (err, val) {\n      if (err) error(err);else success(val);\n      success = error = null;\n    });\n  });\n  return promise.then(resolve, reject);\n};\n\n/**\n * Returns a stream for the given find query.\n *\n * @throws Error if operation is not a find\n * @returns {Stream} Node 0.8 style\n */\n\nQuery.prototype.stream = function (streamOptions) {\n  if ('find' != this.op) throw new Error('stream() is only available for find');\n  var conds = this._conditions;\n  var options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n  debug('stream', this._collection.collectionName, conds, options, streamOptions);\n  return this._collection.findStream(conds, options, streamOptions);\n};\n\n/**\n * Determines if field selection has been made.\n *\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selected = function selected() {\n  return !!(this._fields && Object.keys(this._fields).length > 0);\n};\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *     query.selectedExlusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  if (!this._fields) return false;\n  var keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    if (0 === this._fields[key]) return false;\n    if (this._fields[key] && typeof this._fields[key] === 'object' && this._fields[key].$meta) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExlusively() // false\n *     query.select('-name')\n *     query.selectedExlusively() // true\n *     query.selectedInclusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  if (!this._fields) return false;\n  var keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    if (0 === this._fields[key]) return true;\n  }\n  return false;\n};\n\n/**\n * Merges `doc` with the current update object.\n *\n * @param {Object} doc\n */\n\nQuery.prototype._mergeUpdate = function (doc) {\n  if (!this._update) this._update = {};\n  if (doc instanceof Query) {\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else {\n    utils.mergeClone(this._update, doc);\n  }\n};\n\n/**\n * Returns default options.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._optionsForExec = function () {\n  var options = utils.clone(this.options);\n  return options;\n};\n\n/**\n * Returns fields selection for this query.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._fieldsForExec = function () {\n  return utils.clone(this._fields);\n};\n\n/**\n * Return an update document with corrected $set operations.\n *\n * @api private\n */\n\nQuery.prototype._updateForExec = function () {\n  var update = utils.clone(this._update),\n    ops = utils.keys(update),\n    i = ops.length,\n    ret = {};\n  while (i--) {\n    var op = ops[i];\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n  this._compiledUpdate = ret;\n  return ret;\n};\n\n/**\n * Make sure _path is set.\n *\n * @parmam {String} method\n */\n\nQuery.prototype._ensurePath = function (method) {\n  if (!this._path) {\n    var msg = method + '() must be used after where() ' + 'when called with these arguments';\n    throw new Error(msg);\n  }\n};\n\n/*!\n * Permissions\n */\n\nQuery.permissions = require('./permissions');\nQuery._isPermitted = function (a, b) {\n  var denied = Query.permissions[b];\n  if (!denied) return true;\n  return true !== denied[a];\n};\nQuery.prototype._validate = function (action) {\n  var fail;\n  var validator;\n  if (undefined === action) {\n    validator = Query.permissions[this.op];\n    if ('function' != typeof validator) return true;\n    fail = validator(this);\n  } else if (!Query._isPermitted(action, this.op)) {\n    fail = action;\n  }\n  if (fail) {\n    throw new Error(fail + ' cannot be used with ' + this.op);\n  }\n};\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @param {Object} conds\n * @return {Boolean}\n */\n\nQuery.canMerge = function (conds) {\n  return conds instanceof Query || utils.isObject(conds);\n};\n\n/**\n * Set a trace function that will get called whenever a\n * query is executed.\n *\n * See `setTraceFunction()` for details.\n *\n * @param {Object} conds\n * @return {Boolean}\n */\nQuery.setGlobalTraceFunction = function (traceFunction) {\n  Query.traceFunction = traceFunction;\n};\n\n/*!\n * Exports.\n */\n\nQuery.utils = utils;\nQuery.env = require('./env');\nQuery.Collection = require('./collection');\nQuery.BaseCollection = require('./collection/collection');\nQuery.Promise = require('bluebird');\nmodule.exports = exports = Query;\n\n// TODO\n// test utils","map":{"version":3,"names":["slice","require","assert","util","utils","debug","Query","criteria","options","proto","constructor","prototype","op","undefined","Object","assign","_conditions","clone","_fields","_update","_path","_distinct","_collection","_traceFunction","setOptions","find","remove","update","collection","$withinCmd","defineProperty","get","set","v","toConstructor","CustomQuery","call","inherits","p","isObject","methods","keys","method","i","length","args","isArray","apply","coll","Collection","collation","value","$where","js","where","arguments","type","Array","merge","TypeError","equals","val","_ensurePath","path","eq","or","array","$or","push","nor","$nor","and","$and","split","forEach","$conditional","conds","mod","$mod","exists","$exists","elemMatch","fn","$elemMatch","within","_geoComparison","box","polygon","area","center","circle","coordinates","geometry","Error","spherical","wKey","radius","$uniqueDocs","unique","near","maxDistance","$maxDistance","minDistance","$minDistance","format","$geometry","intersects","select","arg","_validate","fields","len","isArgumentsObject","field","include","substring","numKeys","myFields","sort","_pushArr","ascend","Map","_pushMap","_validSortValue","opts","s","$meta","String","toLowerCase","map","key","maxTime","maxTimeMS","ms","snapshot","hint","k","j","slaveOk","read","setReadPreference","pref","deprecationWarningIssued","console","error","readPreference","readPref","readConcern","r","level","tailable","writeConcern","w","concern","wtimeout","wTimeout","source","canMerge","mergeClone","callback","_optionsForExec","$useProjection","projection","_fieldsForExec","collectionName","_wrapCallback","conditions","tick","cursor","findCursor","findOne","count","distinct","doc","force","updateMany","updateOne","replaceOne","overwrite","query","_mergeUpdate","soon","bind","safe","_updateForExec","deleteOne","justOne","deleteMany","findOneAndUpdate","_findAndModify","findOneAndRemove","findOneAndDelete","equal","new","upsert","$set","findAndModify","queryInfo","traceFunction","traceCallback","startTime","Date","getTime","wrapperCallback","err","result","millis","setTraceFunction","exec","ok","_this","Promise","success","thunk","cb","then","resolve","reject","promise","stream","streamOptions","findStream","selected","selectedInclusively","selectedExclusively","ops","ret","splice","indexOf","_compiledUpdate","msg","permissions","_isPermitted","a","b","denied","action","fail","validator","setGlobalTraceFunction","env","BaseCollection","module","exports"],"sources":["/home/ctl/Documents/nodejs/node_modules/mquery/lib/mquery.js"],"sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\n\nvar slice = require('sliced');\nvar assert = require('assert');\nvar util = require('util');\nvar utils = require('./utils');\nvar debug = require('debug')('mquery');\n\n/* global Map */\n\n/**\n * Query constructor used for building queries.\n *\n * ####Example:\n *\n *     var query = new Query({ name: 'mquery' });\n *     query.setOptions({ collection: moduleCollection })\n *     query.where('age').gte(21).exec(callback);\n *\n * @param {Object} [criteria]\n * @param {Object} [options]\n * @api public\n */\n\nfunction Query(criteria, options) {\n  if (!(this instanceof Query))\n    return new Query(criteria, options);\n\n  var proto = this.constructor.prototype;\n\n  this.op = proto.op || undefined;\n\n  this.options = Object.assign({}, proto.options);\n\n  this._conditions = proto._conditions\n    ? utils.clone(proto._conditions)\n    : {};\n\n  this._fields = proto._fields\n    ? utils.clone(proto._fields)\n    : undefined;\n\n  this._update = proto._update\n    ? utils.clone(proto._update)\n    : undefined;\n\n  this._path = proto._path || undefined;\n  this._distinct = proto._distinct || undefined;\n  this._collection = proto._collection || undefined;\n  this._traceFunction = proto._traceFunction || undefined;\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (criteria) {\n    if (criteria.find && criteria.remove && criteria.update) {\n      // quack quack!\n      this.collection(criteria);\n    } else {\n      this.find(criteria);\n    }\n  }\n}\n\n/**\n * This is a parameter that the user can set which determines if mquery\n * uses $within or $geoWithin for queries. It defaults to true which\n * means $geoWithin will be used. If using MongoDB < 2.4 you should\n * set this to false.\n *\n * @api public\n * @property use$geoWithin\n */\n\nvar $withinCmd = '$geoWithin';\nObject.defineProperty(Query, 'use$geoWithin', {\n  get: function( ) { return $withinCmd == '$geoWithin'; },\n  set: function(v) {\n    if (true === v) {\n      // mongodb >= 2.4\n      $withinCmd = '$geoWithin';\n    } else {\n      $withinCmd = '$within';\n    }\n  }\n});\n\n/**\n * Converts this query to a constructor function with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query that will read documents with a \"video\" category from\n *     // `aCollection` on the primary node in the replica-set unless it is down,\n *     // in which case we'll read from a secondary node.\n *     var query = mquery({ category: 'video' })\n *     query.setOptions({ collection: aCollection, read: 'primaryPreferred' });\n *\n *     // create a constructor based off these settings\n *     var Video = query.toConstructor();\n *\n *     // Video is now a subclass of mquery() and works the same way but with the\n *     // default query parameters and options set.\n *\n *     // run a query with the previous settings but filter for movies with names\n *     // that start with \"Life\".\n *     Video().where({ name: /^Life/ }).exec(cb);\n *\n * @return {Query} new Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  function CustomQuery(criteria, options) {\n    if (!(this instanceof CustomQuery))\n      return new CustomQuery(criteria, options);\n    Query.call(this, criteria, options);\n  }\n\n  utils.inherits(CustomQuery, Query);\n\n  // set inherited defaults\n  var p = CustomQuery.prototype;\n\n  p.options = {};\n  p.setOptions(this.options);\n\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update);\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._traceFunction = this._traceFunction;\n\n  return CustomQuery;\n};\n\n/**\n * Sets query options.\n *\n * ####Options:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\n * - [maxScan](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan) *\n * - [maxTime](http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS) *\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D) *\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\n * - [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\n * - collection the collection to query against\n *\n * _* denotes a query helper method is also available_\n *\n * @param {Object} options\n * @api public\n */\n\nQuery.prototype.setOptions = function(options) {\n  if (!(options && utils.isObject(options)))\n    return this;\n\n  // set arbitrary options\n  var methods = utils.keys(options),\n      method;\n\n  for (var i = 0; i < methods.length; ++i) {\n    method = methods[i];\n\n    // use methods if exist (safer option manipulation)\n    if ('function' == typeof this[method]) {\n      var args = utils.isArray(options[method])\n        ? options[method]\n        : [options[method]];\n      this[method].apply(this, args);\n    } else {\n      this.options[method] = options[method];\n    }\n  }\n\n  return this;\n};\n\n/**\n * Sets this Querys collection.\n *\n * @param {Collection} coll\n * @return {Query} this\n */\n\nQuery.prototype.collection = function collection(coll) {\n  this._collection = new Query.Collection(coll);\n\n  return this;\n};\n\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * ####Example\n *\n *     query.find().collation({ locale: \"en_US\", strength: 1 })\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\nQuery.prototype.collation = function(value) {\n  this.options.collation = value;\n  return this;\n};\n\n/**\n * Specifies a `$where` condition\n *\n * Use `$where` when you need to select documents using a JavaScript expression.\n *\n * ####Example\n *\n *     query.$where('this.comments.length > 10 || this.name.length > 5')\n *\n *     query.$where(function () {\n *       return this.comments.length > 10 || this.name.length > 5;\n *     })\n *\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */\n\nQuery.prototype.$where = function(js) {\n  this._conditions.$where = js;\n  return this;\n};\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @param {String} [path]\n * @param {Object} [val]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.where = function() {\n  if (!arguments.length) return this;\n  if (!this.op) this.op = 'find';\n\n  var type = typeof arguments[0];\n\n  if ('string' == type) {\n    this._path = arguments[0];\n\n    if (2 === arguments.length) {\n      this._conditions[this._path] = arguments[1];\n    }\n\n    return this;\n  }\n\n  if ('object' == type && !Array.isArray(arguments[0])) {\n    return this.merge(arguments[0]);\n  }\n\n  throw new TypeError('path must be a string or object');\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.equals = function equals(val) {\n  this._ensurePath('equals');\n  var path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n * This is alias of `equals`\n *\n * ####Example\n *\n *     User.where('age').eq(49);\n *\n *     // is the same as\n *\n *     User.shere('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.eq = function eq(val) {\n  this._ensurePath('eq');\n  var path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.or = function or(array) {\n  var or = this._conditions.$or || (this._conditions.$or = []);\n  if (!utils.isArray(array)) array = [array];\n  or.push.apply(or, array);\n  return this;\n};\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.nor = function nor(array) {\n  var nor = this._conditions.$nor || (this._conditions.$nor = []);\n  if (!utils.isArray(array)) array = [array];\n  nor.push.apply(nor, array);\n  return this;\n};\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.and = function and(array) {\n  var and = this._conditions.$and || (this._conditions.$and = []);\n  if (!Array.isArray(array)) array = [array];\n  and.push.apply(and, array);\n  return this;\n};\n\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/*!\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\n\n'gt gte lt lte ne in nin all regex size maxDistance minDistance'.split(' ').forEach(function($conditional) {\n  Query.prototype[$conditional] = function() {\n    var path, val;\n\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    var conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ?\n      this._conditions[path] :\n      (this._conditions[path] = {});\n    conds['$' + $conditional] = val;\n    return this;\n  };\n});\n\n/**\n * Specifies a `$mod` condition\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.mod = function() {\n  var val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('mod');\n    val = arguments[0];\n    path = this._path;\n  } else if (2 === arguments.length && !utils.isArray(arguments[1])) {\n    this._ensurePath('mod');\n    val = slice(arguments);\n    path = this._path;\n  } else if (3 === arguments.length) {\n    val = slice(arguments, 1);\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.exists = function() {\n  var path, val;\n\n  if (0 === arguments.length) {\n    this._ensurePath('exists');\n    path = this._path;\n    val = true;\n  } else if (1 === arguments.length) {\n    if ('boolean' === typeof arguments[0]) {\n      this._ensurePath('exists');\n      path = this._path;\n      val = arguments[0];\n    } else {\n      path = arguments[0];\n      val = true;\n    }\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$exists = val;\n  return this;\n};\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.elemMatch = function() {\n  if (null == arguments[0])\n    throw new TypeError('Invalid argument');\n\n  var fn, path, criteria;\n\n  if ('function' === typeof arguments[0]) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    fn = arguments[0];\n  } else if (utils.isObject(arguments[0])) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    criteria = arguments[0];\n  } else if ('function' === typeof arguments[1]) {\n    path = arguments[0];\n    fn = arguments[1];\n  } else if (arguments[1] && utils.isObject(arguments[1])) {\n    path = arguments[0];\n    criteria = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (fn) {\n    criteria = new Query;\n    fn(criteria);\n    criteria = criteria._conditions;\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$elemMatch = criteria;\n  return this;\n};\n\n// Spatial queries\n\n/**\n * Sugar for geo-spatial queries.\n *\n * ####Example\n *\n *     query.within().box()\n *     query.within().circle()\n *     query.within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * ####NOTE:\n *\n * Must be used after `where()`.\n *\n * @memberOf Query\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.within = function within() {\n  // opinionated, must be used after where\n  this._ensurePath('within');\n  this._geoComparison = $withinCmd;\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  if (2 === arguments.length) {\n    return this.box.apply(this, arguments);\n  } else if (2 < arguments.length) {\n    return this.polygon.apply(this, arguments);\n  }\n\n  var area = arguments[0];\n\n  if (!area)\n    throw new TypeError('Invalid argument');\n\n  if (area.center)\n    return this.circle(area);\n\n  if (area.box)\n    return this.box.apply(this, area.box);\n\n  if (area.polygon)\n    return this.polygon.apply(this, area.polygon);\n\n  if (area.type && area.coordinates)\n    return this.geometry(area);\n\n  throw new TypeError('Invalid argument');\n};\n\n/**\n * Specifies a $box condition\n *\n * ####Example\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box('loc', lowerLeft, upperRight )\n *\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see Query#within #query_Query-within\n * @param {String} path\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.box = function() {\n  var path, box;\n\n  if (3 === arguments.length) {\n    // box('loc', [], [])\n    path = arguments[0];\n    box = [arguments[1], arguments[2]];\n  } else if (2 === arguments.length) {\n    // box([], [])\n    this._ensurePath('box');\n    path = this._path;\n    box = [arguments[0], arguments[1]];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = { '$box': box };\n  return this;\n};\n\n/**\n * Specifies a $polygon condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @param {String|Array} [path]\n * @param {Array|Object} [val]\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.polygon = function() {\n  var val, path;\n\n  if ('string' == typeof arguments[0]) {\n    // polygon('loc', [],[],[])\n    path = arguments[0];\n    val = slice(arguments, 1);\n  } else {\n    // polygon([],[],[])\n    this._ensurePath('polygon');\n    path = this._path;\n    val = slice(arguments);\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = { '$polygon': val };\n  return this;\n};\n\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n *     // for spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.circle = function() {\n  var path, val;\n\n  if (1 === arguments.length) {\n    this._ensurePath('circle');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (!('radius' in val && val.center))\n    throw new Error('center and radius are required');\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n\n  var type = val.spherical\n    ? '$centerSphere'\n    : '$center';\n\n  var wKey = this._geoComparison || $withinCmd;\n  conds[wKey] = {};\n  conds[wKey][type] = [val.center, val.radius];\n\n  if ('unique' in val)\n    conds[wKey].$uniqueDocs = !!val.unique;\n\n  return this;\n};\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *     query.near({ center: { type: 'Point', coordinates: [..] }})\n *     query.near().geometry({ type: 'Point', coordinates: [..] })\n *\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.near = function near() {\n  var path, val;\n\n  this._geoComparison = '$near';\n\n  if (0 === arguments.length) {\n    return this;\n  } else if (1 === arguments.length) {\n    this._ensurePath('near');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (!val.center) {\n    throw new Error('center is required');\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n\n  var type = val.spherical\n    ? '$nearSphere'\n    : '$near';\n\n  // center could be a GeoJSON object or an Array\n  if (Array.isArray(val.center)) {\n    conds[type] = val.center;\n\n    var radius = 'maxDistance' in val\n      ? val.maxDistance\n      : null;\n\n    if (null != radius) {\n      conds.$maxDistance = radius;\n    }\n    if (null != val.minDistance) {\n      conds.$minDistance = val.minDistance;\n    }\n  } else {\n    // GeoJSON?\n    if (val.center.type != 'Point' || !Array.isArray(val.center.coordinates)) {\n      throw new Error(util.format('Invalid GeoJSON specified for %s', type));\n    }\n    conds[type] = { $geometry : val.center };\n\n    // MongoDB 2.6 insists on maxDistance being in $near / $nearSphere\n    if ('maxDistance' in val) {\n      conds[type]['$maxDistance'] = val.maxDistance;\n    }\n    if ('minDistance' in val) {\n      conds[type]['$minDistance'] = val.minDistance;\n    }\n  }\n\n  return this;\n};\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * @param {Object} [arg]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.intersects = function intersects() {\n  // opinionated, must be used after where\n  this._ensurePath('intersects');\n\n  this._geoComparison = '$geoIntersects';\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  var area = arguments[0];\n\n  if (null != area && area.type && area.coordinates)\n    return this.geometry(area);\n\n  throw new TypeError('Invalid argument');\n};\n\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * The most recent path passed to `where()` is used.\n *\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @api public\n */\n\nQuery.prototype.geometry = function geometry() {\n  if (!('$within' == this._geoComparison ||\n        '$geoWithin' == this._geoComparison ||\n        '$near' == this._geoComparison ||\n        '$geoIntersects' == this._geoComparison)) {\n    throw new Error('geometry() must come after `within()`, `intersects()`, or `near()');\n  }\n\n  var val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('geometry');\n    path = this._path;\n    val = arguments[0];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (!(val.type && Array.isArray(val.coordinates))) {\n    throw new TypeError('Invalid argument');\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison] = { $geometry: val };\n\n  return this;\n};\n\n// end spatial\n\n/**\n * Specifies which document fields to include or exclude\n *\n * ####String syntax\n *\n * When passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.\n *\n * ####Example\n *\n *     // include a and b, exclude c\n *     query.select('a b -c');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({a: 1, b: 1, c: 0});\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\nQuery.prototype.select = function select() {\n  var arg = arguments[0];\n  if (!arg) return this;\n\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n\n  this._validate('select');\n\n  var fields = this._fields || (this._fields = {});\n  var type = typeof arg;\n  var i, len;\n\n  if (('string' == type || utils.isArgumentsObject(arg)) &&\n    'number' == typeof arg.length || Array.isArray(arg)) {\n    if ('string' == type)\n      arg = arg.split(/\\s+/);\n\n    for (i = 0, len = arg.length; i < len; ++i) {\n      var field = arg[i];\n      if (!field) continue;\n      var include = '-' == field[0] ? 0 : 1;\n      if (include === 0) field = field.substring(1);\n      fields[field] = include;\n    }\n\n    return this;\n  }\n\n  if (utils.isObject(arg)) {\n    var keys = utils.keys(arg);\n    for (i = 0; i < keys.length; ++i) {\n      fields[keys[i]] = arg[keys[i]];\n    }\n    return this;\n  }\n\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n\n/**\n * Specifies a $slice condition for a `path`\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @api public\n */\n\nQuery.prototype.slice = function() {\n  if (0 === arguments.length)\n    return this;\n\n  this._validate('slice');\n\n  var path, val;\n\n  if (1 === arguments.length) {\n    var arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      var keys = Object.keys(arg);\n      var numKeys = keys.length;\n      for (var i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = slice(arguments);\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (3 === arguments.length) {\n    path = arguments[0];\n    val = slice(arguments, 1);\n  }\n\n  var myFields = this._fields || (this._fields = {});\n  myFields[path] = { '$slice': val };\n  return this;\n};\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * ####Example\n *\n *     // these are equivalent\n *     query.sort({ field: 'asc', test: -1 });\n *     query.sort('field -test');\n *     query.sort([['field', 1], ['test', -1]]);\n *\n * ####Note\n *\n *  - The array syntax `.sort([['field', 1], ['test', -1]])` can only be used with [mongodb driver >= 2.0.46](https://github.com/mongodb/node-mongodb-native/blob/2.1/HISTORY.md#2046-2015-10-15).\n *  - Cannot be used with `distinct()`\n *\n * @param {Object|String|Array} arg\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.sort = function(arg) {\n  if (!arg) return this;\n  var i, len, field;\n\n  this._validate('sort');\n\n  var type = typeof arg;\n\n  // .sort([['field', 1], ['test', -1]])\n  if (Array.isArray(arg)) {\n    len = arg.length;\n    for (i = 0; i < arg.length; ++i) {\n      if (!Array.isArray(arg[i])) {\n        throw new Error('Invalid sort() argument, must be array of arrays');\n      }\n      _pushArr(this.options, arg[i][0], arg[i][1]);\n    }\n    return this;\n  }\n\n  // .sort('field -test')\n  if (1 === arguments.length && 'string' == type) {\n    arg = arg.split(/\\s+/);\n    len = arg.length;\n    for (i = 0; i < len; ++i) {\n      field = arg[i];\n      if (!field) continue;\n      var ascend = '-' == field[0] ? -1 : 1;\n      if (ascend === -1) field = field.substring(1);\n      push(this.options, field, ascend);\n    }\n\n    return this;\n  }\n\n  // .sort({ field: 1, test: -1 })\n  if (utils.isObject(arg)) {\n    var keys = utils.keys(arg);\n    for (i = 0; i < keys.length; ++i) {\n      field = keys[i];\n      push(this.options, field, arg[field]);\n    }\n\n    return this;\n  }\n\n  if (typeof Map !== 'undefined' && arg instanceof Map) {\n    _pushMap(this.options, arg);\n    return this;\n  }\n  throw new TypeError('Invalid sort() argument. Must be a string, object, or array.');\n};\n\n/*!\n * @ignore\n */\n\nvar _validSortValue = {\n  '1': 1,\n  '-1': -1,\n  'asc': 1,\n  'ascending': 1,\n  'desc': -1,\n  'descending': -1\n};\n\nfunction push(opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' +\n      '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' +\n      '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n\n  var s;\n  if (value && value.$meta) {\n    s = opts.sort || (opts.sort = {});\n    s[field] = { $meta : value.$meta };\n    return;\n  }\n\n  s = opts.sort || (opts.sort = {});\n  var val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: { ' + field + ': ' + value + ' }');\n\n  s[field] = val;\n}\n\nfunction _pushArr(opts, field, value) {\n  opts.sort = opts.sort || [];\n  if (!Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' +\n      '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' +\n      '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n\n  var val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: [ ' + field + ', ' + value + ' ]');\n\n  opts.sort.push([field, val]);\n}\n\nfunction _pushMap(opts, map) {\n  opts.sort = opts.sort || new Map();\n  if (!(opts.sort instanceof Map)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or ' +\n      'object or map consistently');\n  }\n  map.forEach(function(value, key) {\n    var val = String(value || 1).toLowerCase();\n    val = _validSortValue[val];\n    if (!val) throw new TypeError('Invalid sort value: < ' + key + ': ' + value + ' >');\n\n    opts.sort.set(key, val);\n  });\n}\n\n\n\n/**\n * Specifies the limit option.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the skip option.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan\n * @api public\n */\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment\n * @api public\n */\n\n/*!\n * limit, skip, maxScan, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\n\n['limit', 'skip', 'maxScan', 'batchSize', 'comment'].forEach(function(method) {\n  Query.prototype[method] = function(v) {\n    this._validate(method);\n    this.options[method] = v;\n    return this;\n  };\n});\n\n/**\n * Specifies the maxTimeMS option.\n *\n * ####Example\n *\n *     query.maxTime(100)\n *     query.maxTimeMS(100)\n *\n * @method maxTime\n * @memberOf Query\n * @param {Number} ms\n * @see mongodb http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS\n * @api public\n */\n\nQuery.prototype.maxTime = Query.prototype.maxTimeMS = function(ms) {\n  this._validate('maxTime');\n  this.options.maxTimeMS = ms;\n  return this;\n};\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     mquery().snapshot() // true\n *     mquery().snapshot(true)\n *     mquery().snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.snapshot = function() {\n  this._validate('snapshot');\n\n  this.options.snapshot = arguments.length\n    ? !!arguments[0]\n    : true;\n\n  return this;\n};\n\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1});\n *     query.hint('indexA_1_indexB_1');\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|string} val a hint object or the index name\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint\n * @api public\n */\n\nQuery.prototype.hint = function() {\n  if (0 === arguments.length) return this;\n\n  this._validate('hint');\n\n  var arg = arguments[0];\n  if (utils.isObject(arg)) {\n    var hint = this.options.hint || (this.options.hint = {});\n\n    // must keep object keys in order so don't use Object.keys()\n    for (var k in arg) {\n      hint[k] = arg[k];\n    }\n\n    return this;\n  }\n  if (typeof arg === 'string') {\n    this.options.hint = arg;\n    return this;\n  }\n\n  throw new TypeError('Invalid hint. ' + arg);\n};\n\n/**\n * Requests acknowledgement that this operation has been persisted to MongoDB's\n * on-disk journal.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `j` value if it is specified in writeConcern options\n *\n * ####Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000);\n *\n * @method j\n * @memberOf Query\n * @instance\n * @param {boolean} val\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.j = function j(val) {\n  this.options.j = val;\n  return this;\n};\n\n/**\n * Sets the slaveOk option. _Deprecated_ in MongoDB 2.2 in favor of read preferences.\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see read()\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.slaveOk = function(v) {\n  this.options.slaveOk = arguments.length ? !!v : true;\n  return this;\n};\n\n/**\n * Sets the readPreference option for the query.\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // you can also use mongodb.ReadPreference class to also specify tags\n *     new Query().read(mongodb.ReadPreference('secondary', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }]))\n *\n *     new Query().setReadPreference('primary') // alias of .read()\n *\n * ####Preferences:\n *\n *     primary - (default)  Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @param {String|ReadPreference} pref one of the listed preference options or their aliases\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = Query.prototype.setReadPreference = function(pref) {\n  if (arguments.length > 1 && !Query.prototype.read.deprecationWarningIssued) {\n    console.error('Deprecation warning: \\'tags\\' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead.');\n    Query.prototype.read.deprecationWarningIssued = true;\n  }\n  this.options.readPreference = utils.readPref(pref);\n  return this;\n};\n\n/**\n * Sets the readConcern option for the query.\n *\n * ####Example:\n *\n *     new Query().readConcern('local')\n *     new Query().readConcern('l')  // same as local\n *\n *     new Query().readConcern('available')\n *     new Query().readConcern('a')  // same as available\n *\n *     new Query().readConcern('majority')\n *     new Query().readConcern('m')  // same as majority\n *\n *     new Query().readConcern('linearizable')\n *     new Query().readConcern('lz') // same as linearizable\n *\n *     new Query().readConcern('snapshot')\n *     new Query().readConcern('s')  // same as snapshot\n *\n *     new Query().r('s') // r is alias of readConcern\n *\n *\n * ####Read Concern Level:\n *\n *     local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\n *     linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\n *     snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\n\n\n *\n *\n * Aliases\n *\n *     l   local\n *     a   available\n *     m   majority\n *     lz  linearizable\n *     s   snapshot\n *\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\n *\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.readConcern = Query.prototype.r = function(level) {\n  this.options.readConcern = utils.readConcern(level);\n  return this;\n};\n\n/**\n * Sets tailable option.\n *\n * ####Example\n *\n *     query.tailable() <== true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} v defaults to true\n * @see mongodb http://www.mongodb.org/display/DOCS/Tailable+Cursors\n * @api public\n */\n\nQuery.prototype.tailable = function() {\n  this._validate('tailable');\n\n  this.options.tailable = arguments.length\n    ? !!arguments[0]\n    : true;\n\n  return this;\n};\n\n/**\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\n * that must acknowledge this write before this write is considered successful.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `w` value if it is specified in writeConcern options\n *\n * ####Example:\n *\n * mquery().writeConcern(0)\n * mquery().writeConcern(1)\n * mquery().writeConcern({ w: 1, j: true, wtimeout: 2000 })\n * mquery().writeConcern('majority')\n * mquery().writeConcern('m') // same as majority\n * mquery().writeConcern('tagSetName') // if the tag set is 'm', use .writeConcern({ w: 'm' }) instead\n * mquery().w(1) // w is alias of writeConcern\n *\n * @method writeConcern\n * @memberOf Query\n * @instance\n * @param {String|number|object} concern 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.writeConcern = Query.prototype.w = function writeConcern(concern) {\n  if ('object' === typeof concern) {\n    if ('undefined' !== typeof concern.j) this.options.j = concern.j;\n    if ('undefined' !== typeof concern.w) this.options.w = concern.w;\n    if ('undefined' !== typeof concern.wtimeout) this.options.wtimeout = concern.wtimeout;\n  } else {\n    this.options.w = 'm' === concern ? 'majority' : concern;\n  }\n  return this;\n};\n\n/**\n * Specifies a time limit, in milliseconds, for the write concern.\n * If `ms > 1`, it is maximum amount of time to wait for this write\n * to propagate through the replica set before this operation fails.\n * The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to `wtimeout` value if it is specified in writeConcern\n *\n * ####Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000)\n *\n * @method wtimeout\n * @memberOf Query\n * @instance\n * @param {number} ms number of milliseconds to wait\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.wtimeout = Query.prototype.wTimeout = function wtimeout(ms) {\n  this.options.wtimeout = ms;\n  return this;\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function(source) {\n  if (!source)\n    return this;\n\n  if (!Query.canMerge(source))\n    throw new TypeError('Invalid argument. Expected instanceof mquery or plain object');\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options);\n    }\n\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source);\n\n  return this;\n};\n\n/**\n * Finds documents.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.find()\n *     query.find(callback)\n *     query.find({ name: 'Burning Lights' }, callback)\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function(criteria, callback) {\n  this.op = 'find';\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  var conds = this._conditions;\n  var options = this._optionsForExec();\n\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('find', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('find', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.find(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\n * Returns the query cursor\n *\n * ####Examples\n *\n *     query.find().cursor();\n *     query.cursor({ name: 'Burning Lights' });\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Object} cursor\n * @api public\n */\n\nQuery.prototype.cursor = function cursor(criteria) {\n  if (this.op) {\n    if (this.op !== 'find') {\n      throw new TypeError('.cursor only support .find method');\n    }\n  } else {\n    this.find(criteria);\n  }\n\n  var conds = this._conditions;\n  var options = this._optionsForExec();\n\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('findCursor', this._collection.collectionName, conds, options);\n  return this._collection.findCursor(conds, options);\n};\n\n/**\n * Executes the query as a findOne() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.findOne().where('name', /^Burning/);\n *\n *     query.findOne({ name: /^Burning/ })\n *\n *     query.findOne({ name: /^Burning/ }, callback); // executes\n *\n *     query.findOne(function (err, doc) {\n *       if (err) return handleError(err);\n *       if (doc) {\n *         // doc may be null if no document matched\n *\n *       }\n *     });\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOne = function(criteria, callback) {\n  this.op = 'findOne';\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  var conds = this._conditions;\n  var options = this._optionsForExec();\n\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('findOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('findOne', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.findOne(conds, options, utils.tick(callback));\n\n  return this;\n};\n\n/**\n * Exectues the query as a count() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.count().where('color', 'black').exec(callback);\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Count\n * @api public\n */\n\nQuery.prototype.count = function(criteria, callback) {\n  this.op = 'count';\n  this._validate();\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  var conds = this._conditions,\n      options = this._optionsForExec();\n\n  debug('count', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('count', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.count(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\n * Declares or executes a distinct() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     distinct(criteria, field, fn)\n *     distinct(criteria, field)\n *     distinct(field, fn)\n *     distinct(field)\n *     distinct(fn)\n *     distinct()\n *\n * @param {Object|Query} [criteria]\n * @param {String} [field]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Distinct\n * @api public\n */\n\nQuery.prototype.distinct = function(criteria, field, callback) {\n  this.op = 'distinct';\n  this._validate();\n\n  if (!callback) {\n    switch (typeof field) {\n      case 'function':\n        callback = field;\n        if ('string' == typeof criteria) {\n          field = criteria;\n          criteria = undefined;\n        }\n        break;\n      case 'undefined':\n      case 'string':\n        break;\n      default:\n        throw new TypeError('Invalid `field` argument. Must be string or function');\n    }\n\n    switch (typeof criteria) {\n      case 'function':\n        callback = criteria;\n        criteria = field = undefined;\n        break;\n      case 'string':\n        field = criteria;\n        criteria = undefined;\n        break;\n    }\n  }\n\n  if ('string' == typeof field) {\n    this._distinct = field;\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  if (!this._distinct) {\n    throw new Error('No value for `distinct` has been declared');\n  }\n\n  var conds = this._conditions,\n      options = this._optionsForExec();\n\n  debug('distinct', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('distinct', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.distinct(this._distinct, conds, options, utils.tick(callback));\n\n  return this;\n};\n\n/**\n * Declare and/or execute this query as an update() operation. By default,\n * `update()` only modifies the _first_ document that matches `criteria`.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     mquery({ _id: id }).update({ title: 'words' }, ...)\n *\n * becomes\n *\n *     collection.update({ _id: id }, { $set: { title: 'words' }}, ...)\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call update() and then execute it by using the `exec()` method.\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed as unsafe\n *\n *     // keys that are not $atomic ops become $set.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).where({ _id: id }).exec();\n *\n *     var q = mquery(collection).update(); // not executed\n *\n *     // overwriting with empty docs\n *     var q.where({ _id: id }).setOptions({ overwrite: true })\n *     q.update({ }, callback); // executes\n *\n *     // multi update with overwrite to empty doc\n *     var q = mquery(collection).where({ _id: id });\n *     q.setOptions({ multi: true, overwrite: true })\n *     q.update({ });\n *     q.update(callback); // executed\n *\n *     // multi updates\n *     mquery()\n *       .collection(coll)\n *       .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *     // more multi updates\n *     mquery({ })\n *       .collection(coll)\n *       .setOptions({ multi: true })\n *       .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     mquery({ email: 'address@example.com' })\n *      .collection(coll)\n *      .update({ $inc: { counter: 1 }}, callback)\n *\n *     // summary\n *     update(criteria, doc, opts, cb) // executes\n *     update(criteria, doc, opts)\n *     update(criteria, doc, cb) // executes\n *     update(criteria, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes (unsafe write)\n *     update()\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.update = function update(criteria, doc, options, callback) {\n  var force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n\n  return _update(this, 'update', criteria, doc, options, force, callback);\n};\n\n/**\n * Declare and/or execute this query as an `updateMany()` operation. Identical\n * to `update()` except `updateMany()` will update _all_ documents that match\n * `criteria`, rather than just the first one.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     // Update every document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.updateMany = function updateMany(criteria, doc, options, callback) {\n  var force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n\n  return _update(this, 'updateMany', criteria, doc, options, force, callback);\n};\n\n/**\n * Declare and/or execute this query as an `updateOne()` operation. Identical\n * to `update()` except `updateOne()` will _always_ update just one document,\n * regardless of the `multi` option.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     // Update the first document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.updateOne = function updateOne(criteria, doc, options, callback) {\n  var force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n\n  return _update(this, 'updateOne', criteria, doc, options, force, callback);\n};\n\n/**\n * Declare and/or execute this query as an `replaceOne()` operation. Similar\n * to `updateOne()`, except `replaceOne()` is not allowed to use atomic\n * modifiers (`$set`, `$push`, etc.). Calling `replaceOne()` will always\n * replace the existing doc.\n *\n * ####Example\n *\n *     // Replace the document with `_id` 1 with `{ _id: 1, year: 2017 }`\n *     mquery().replaceOne({ _id: 1 }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.replaceOne = function replaceOne(criteria, doc, options, callback) {\n  var force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n\n  this.setOptions({ overwrite: true });\n  return _update(this, 'replaceOne', criteria, doc, options, force, callback);\n};\n\n\n/*!\n * Internal helper for update, updateMany, updateOne\n */\n\nfunction _update(query, op, criteria, doc, options, force, callback) {\n  query.op = op;\n\n  if (Query.canMerge(criteria)) {\n    query.merge(criteria);\n  }\n\n  if (doc) {\n    query._mergeUpdate(doc);\n  }\n\n  if (utils.isObject(options)) {\n    // { overwrite: true }\n    query.setOptions(options);\n  }\n\n  // we are done if we don't have callback and they are\n  // not forcing an unsafe write.\n  if (!(force || callback)) {\n    return query;\n  }\n\n  if (!query._update ||\n      !query.options.overwrite && 0 === utils.keys(query._update).length) {\n    callback && utils.soon(callback.bind(null, null, 0));\n    return query;\n  }\n\n  options = query._optionsForExec();\n  if (!callback) options.safe = false;\n\n  criteria = query._conditions;\n  doc = query._updateForExec();\n\n  debug('update', query._collection.collectionName, criteria, doc, options);\n  callback = query._wrapCallback(op, callback, {\n    conditions: criteria,\n    doc: doc,\n    options: options\n  });\n\n  query._collection[op](criteria, doc, options, utils.tick(callback));\n\n  return query;\n}\n\n/**\n * Declare and/or execute this query as a remove() operation.\n *\n * ####Example\n *\n *     mquery(collection).remove({ artist: 'Anne Murray' }, callback)\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call remove() and then execute it by using the `exec()` method.\n *\n *     // not executed\n *     var query = mquery(collection).remove({ name: 'Anne Murray' })\n *\n *     // executed\n *     mquery(collection).remove({ name: 'Anne Murray' }, callback)\n *     mquery(collection).remove({ name: 'Anne Murray' }).remove(callback)\n *\n *     // executed without a callback (unsafe write)\n *     query.exec()\n *\n *     // summary\n *     query.remove(conds, fn); // executes\n *     query.remove(conds)\n *     query.remove(fn) // executes\n *     query.remove()\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.remove = function(criteria, callback) {\n  this.op = 'remove';\n  var force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback))\n    return this;\n\n  var options = this._optionsForExec();\n  if (!callback) options.safe = false;\n\n  var conds = this._conditions;\n\n  debug('remove', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('remove', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.remove(conds, options, utils.tick(callback));\n\n  return this;\n};\n\n/**\n * Declare and/or execute this query as a `deleteOne()` operation. Behaves like\n * `remove()`, except for ignores the `justOne` option and always deletes at\n * most one document.\n *\n * ####Example\n *\n *     mquery(collection).deleteOne({ artist: 'Anne Murray' }, callback)\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.deleteOne = function(criteria, callback) {\n  this.op = 'deleteOne';\n  var force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback))\n    return this;\n\n  var options = this._optionsForExec();\n  if (!callback) options.safe = false;\n  delete options.justOne;\n\n  var conds = this._conditions;\n\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('deleteOne', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.deleteOne(conds, options, utils.tick(callback));\n\n  return this;\n};\n\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Behaves like\n * `remove()`, except for ignores the `justOne` option and always deletes\n * _every_ document that matches `criteria`.\n *\n * ####Example\n *\n *     mquery(collection).deleteMany({ artist: 'Anne Murray' }, callback)\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.deleteMany = function(criteria, callback) {\n  this.op = 'deleteMany';\n  var force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback))\n    return this;\n\n  var options = this._optionsForExec();\n  if (!callback) options.safe = false;\n  delete options.justOne;\n\n  var conds = this._conditions;\n\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('deleteOne', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.deleteMany(conds, options, utils.tick(callback));\n\n  return this;\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `new`: bool - true to return the modified document rather than the original. defaults to true\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function(criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      options = undefined;\n      break;\n    case 1:\n      if ('function' == typeof criteria) {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) return this;\n  return this._findAndModify('update', callback);\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *     A.where().findOneAndDelete()           // alias of .findOneAndRemove()\n *\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = Query.prototype.findOneAndDelete = function(conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n  this._validate();\n\n  if ('function' == typeof options) {\n    callback = options;\n    options = undefined;\n  } else if ('function' == typeof conditions) {\n    callback = conditions;\n    conditions = undefined;\n  }\n\n  // apply conditions\n  if (Query.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  // apply options\n  options && this.setOptions(options);\n\n  if (!callback) return this;\n\n  return this._findAndModify('remove', callback);\n};\n\n/**\n * _findAndModify\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype._findAndModify = function(type, callback) {\n  assert.equal('function', typeof callback);\n\n  var options = this._optionsForExec();\n  var fields;\n  var doc;\n\n  if ('remove' == type) {\n    options.remove = true;\n  } else {\n    if (!('new' in options)) options.new = true;\n    if (!('upsert' in options)) options.upsert = false;\n\n    doc = this._updateForExec();\n    if (!doc) {\n      if (options.upsert) {\n        // still need to do the upsert to empty doc\n        doc = { $set: {} };\n      } else {\n        return this.findOne(callback);\n      }\n    }\n  }\n\n  fields = this._fieldsForExec();\n  if (fields != null) {\n    if (this.$useProjection) {\n      options.projection = this._fieldsForExec();\n    } else {\n      options.fields = this._fieldsForExec();\n    }\n  }\n\n  var conds = this._conditions;\n\n  debug('findAndModify', this._collection.collectionName, conds, doc, options);\n  callback = this._wrapCallback('findAndModify', callback, {\n    conditions: conds,\n    doc: doc,\n    options: options\n  });\n\n  this._collection.findAndModify(conds, doc, options, utils.tick(callback));\n\n  return this;\n};\n\n/**\n * Wrap callback to add tracing\n *\n * @param {Function} callback\n * @param {Object} [queryInfo]\n * @api private\n */\nQuery.prototype._wrapCallback = function(method, callback, queryInfo) {\n  var traceFunction = this._traceFunction || Query.traceFunction;\n\n  if (traceFunction) {\n    queryInfo.collectionName = this._collection.collectionName;\n\n    var traceCallback = traceFunction &&\n      traceFunction.call(null, method, queryInfo, this);\n\n    var startTime = new Date().getTime();\n\n    return function wrapperCallback(err, result) {\n      if (traceCallback) {\n        var millis = new Date().getTime() - startTime;\n        traceCallback.call(null, err, result, millis);\n      }\n\n      if (callback) {\n        callback.apply(null, arguments);\n      }\n    };\n  }\n\n  return callback;\n};\n\n/**\n * Add trace function that gets called when the query is executed.\n * The function will be called with (method, queryInfo, query) and\n * should return a callback function which will be called\n * with (err, result, millis) when the query is complete.\n *\n * queryInfo is an object containing: {\n *   collectionName: <name of the collection>,\n *   conditions: <query criteria>,\n *   options: <comment, fields, readPreference, etc>,\n *   doc: [document to update, if applicable]\n * }\n *\n * NOTE: Does not trace stream queries.\n *\n * @param {Function} traceFunction\n * @return {Query} this\n * @api public\n */\nQuery.prototype.setTraceFunction = function(traceFunction) {\n  this._traceFunction = traceFunction;\n  return this;\n};\n\n/**\n * Executes the query\n *\n * ####Examples\n *\n *     query.exec();\n *     query.exec(callback);\n *     query.exec('update');\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback]\n * @api public\n */\n\nQuery.prototype.exec = function exec(op, callback) {\n  switch (typeof op) {\n    case 'function':\n      callback = op;\n      op = null;\n      break;\n    case 'string':\n      this.op = op;\n      break;\n  }\n\n  assert.ok(this.op, 'Missing query type: (find, update, etc)');\n\n  if ('update' == this.op || 'remove' == this.op) {\n    callback || (callback = true);\n  }\n\n  var _this = this;\n\n  if ('function' == typeof callback) {\n    this[this.op](callback);\n  } else {\n    return new Query.Promise(function(success, error) {\n      _this[_this.op](function(err, val) {\n        if (err) error(err);\n        else success(val);\n        success = error = null;\n      });\n    });\n  }\n};\n\n/**\n * Returns a thunk which when called runs this.exec()\n *\n * The thunk receives a callback function which will be\n * passed to `this.exec()`\n *\n * @return {Function}\n * @api public\n */\n\nQuery.prototype.thunk = function() {\n  var _this = this;\n  return function(cb) {\n    _this.exec(cb);\n  };\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = function(resolve, reject) {\n  var _this = this;\n  var promise = new Query.Promise(function(success, error) {\n    _this.exec(function(err, val) {\n      if (err) error(err);\n      else success(val);\n      success = error = null;\n    });\n  });\n  return promise.then(resolve, reject);\n};\n\n/**\n * Returns a stream for the given find query.\n *\n * @throws Error if operation is not a find\n * @returns {Stream} Node 0.8 style\n */\n\nQuery.prototype.stream = function(streamOptions) {\n  if ('find' != this.op)\n    throw new Error('stream() is only available for find');\n\n  var conds = this._conditions;\n\n  var options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('stream', this._collection.collectionName, conds, options, streamOptions);\n\n  return this._collection.findStream(conds, options, streamOptions);\n};\n\n/**\n * Determines if field selection has been made.\n *\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selected = function selected() {\n  return !!(this._fields && Object.keys(this._fields).length > 0);\n};\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *     query.selectedExlusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  if (!this._fields) return false;\n\n  var keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    if (0 === this._fields[key]) return false;\n    if (this._fields[key] &&\n        typeof this._fields[key] === 'object' &&\n        this._fields[key].$meta) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExlusively() // false\n *     query.select('-name')\n *     query.selectedExlusively() // true\n *     query.selectedInclusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  if (!this._fields) return false;\n\n  var keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    if (0 === this._fields[key]) return true;\n  }\n\n  return false;\n};\n\n/**\n * Merges `doc` with the current update object.\n *\n * @param {Object} doc\n */\n\nQuery.prototype._mergeUpdate = function(doc) {\n  if (!this._update) this._update = {};\n  if (doc instanceof Query) {\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else {\n    utils.mergeClone(this._update, doc);\n  }\n};\n\n/**\n * Returns default options.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._optionsForExec = function() {\n  var options = utils.clone(this.options);\n  return options;\n};\n\n/**\n * Returns fields selection for this query.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._fieldsForExec = function() {\n  return utils.clone(this._fields);\n};\n\n/**\n * Return an update document with corrected $set operations.\n *\n * @api private\n */\n\nQuery.prototype._updateForExec = function() {\n  var update = utils.clone(this._update),\n      ops = utils.keys(update),\n      i = ops.length,\n      ret = {};\n\n  while (i--) {\n    var op = ops[i];\n\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  this._compiledUpdate = ret;\n  return ret;\n};\n\n/**\n * Make sure _path is set.\n *\n * @parmam {String} method\n */\n\nQuery.prototype._ensurePath = function(method) {\n  if (!this._path) {\n    var msg = method + '() must be used after where() '\n                     + 'when called with these arguments';\n    throw new Error(msg);\n  }\n};\n\n/*!\n * Permissions\n */\n\nQuery.permissions = require('./permissions');\n\nQuery._isPermitted = function(a, b) {\n  var denied = Query.permissions[b];\n  if (!denied) return true;\n  return true !== denied[a];\n};\n\nQuery.prototype._validate = function(action) {\n  var fail;\n  var validator;\n\n  if (undefined === action) {\n\n    validator = Query.permissions[this.op];\n    if ('function' != typeof validator) return true;\n\n    fail = validator(this);\n\n  } else if (!Query._isPermitted(action, this.op)) {\n    fail = action;\n  }\n\n  if (fail) {\n    throw new Error(fail + ' cannot be used with ' + this.op);\n  }\n};\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @param {Object} conds\n * @return {Boolean}\n */\n\nQuery.canMerge = function(conds) {\n  return conds instanceof Query || utils.isObject(conds);\n};\n\n/**\n * Set a trace function that will get called whenever a\n * query is executed.\n *\n * See `setTraceFunction()` for details.\n *\n * @param {Object} conds\n * @return {Boolean}\n */\nQuery.setGlobalTraceFunction = function(traceFunction) {\n  Query.traceFunction = traceFunction;\n};\n\n/*!\n * Exports.\n */\n\nQuery.utils = utils;\nQuery.env = require('./env');\nQuery.Collection = require('./collection');\nQuery.BaseCollection = require('./collection/collection');\nQuery.Promise = require('bluebird');\nmodule.exports = exports = Query;\n\n// TODO\n// test utils\n"],"mappings":"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AC1CD,EAAE,CAACG,IAAI,CAACrB,KAAK,CAACkB,EAAE,EAAEC,KAAK,CAAC;EACxB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA5D,KAAK,CAACK,SAAS,CAAC0D,GAAG,GAAG,SAASA,GAAG,CAACH,KAAK,EAAE;EACxC,IAAIG,GAAG,GAAG,IAAI,CAACrD,WAAW,CAACsD,IAAI,KAAK,IAAI,CAACtD,WAAW,CAACsD,IAAI,GAAG,EAAE,CAAC;EAC/D,IAAI,CAAClE,KAAK,CAAC0C,OAAO,CAACoB,KAAK,CAAC,EAAEA,KAAK,GAAG,CAACA,KAAK,CAAC;EAC1CG,GAAG,CAACD,IAAI,CAACrB,KAAK,CAACsB,GAAG,EAAEH,KAAK,CAAC;EAC1B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA5D,KAAK,CAACK,SAAS,CAAC4D,GAAG,GAAG,SAASA,GAAG,CAACL,KAAK,EAAE;EACxC,IAAIK,GAAG,GAAG,IAAI,CAACvD,WAAW,CAACwD,IAAI,KAAK,IAAI,CAACxD,WAAW,CAACwD,IAAI,GAAG,EAAE,CAAC;EAC/D,IAAI,CAACf,KAAK,CAACX,OAAO,CAACoB,KAAK,CAAC,EAAEA,KAAK,GAAG,CAACA,KAAK,CAAC;EAC1CK,GAAG,CAACH,IAAI,CAACrB,KAAK,CAACwB,GAAG,EAAEL,KAAK,CAAC;EAC1B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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B,GAAGuE,GAAG,GAAG,IAAI,GAAG/E,KAAK,GAAG,IAAI,CAAC;IAEnFyE,IAAI,CAACN,IAAI,CAACtF,GAAG,CAACkG,GAAG,EAAErE,GAAG,CAAC;EACzB,CAAC,CAAC;AACJ;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC,CAACa,OAAO,CAAC,UAAShC,MAAM,EAAE;EAC5EpC,KAAK,CAACK,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAST,CAAC,EAAE;IACpC,IAAI,CAAC4E,SAAS,CAACnE,MAAM,CAAC;IACtB,IAAI,CAAClC,OAAO,CAACkC,MAAM,CAAC,GAAGT,CAAC;IACxB,OAAO,IAAI;EACb,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA3B,KAAK,CAACK,SAAS,CAACwH,OAAO,GAAG7H,KAAK,CAACK,SAAS,CAACyH,SAAS,GAAG,UAASC,EAAE,EAAE;EACjE,IAAI,CAACxB,SAAS,CAAC,SAAS,CAAC;EACzB,IAAI,CAACrG,OAAO,CAAC4H,SAAS,GAAGC,EAAE;EAC3B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA/H,KAAK,CAACK,SAAS,CAAC2H,QAAQ,GAAG,YAAW;EACpC,IAAI,CAACzB,SAAS,CAAC,UAAU,CAAC;EAE1B,IAAI,CAACrG,OAAO,CAAC8H,QAAQ,GAAG/E,SAAS,CAACX,MAAM,GACpC,CAAC,CAACW,SAAS,CAAC,CAAC,CAAC,GACd,IAAI;EAER,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAjD,KAAK,CAACK,SAAS,CAAC4H,IAAI,GAAG,YAAW;EAChC,IAAI,CAAC,KAAKhF,SAAS,CAACX,MAAM,EAAE,OAAO,IAAI;EAEvC,IAAI,CAACiE,SAAS,CAAC,MAAM,CAAC;EAEtB,IAAID,GAAG,GAAGrD,SAAS,CAAC,CAAC,CAAC;EACtB,IAAInD,KAAK,CAACmC,QAAQ,CAACqE,GAAG,CAAC,EAAE;IACvB,IAAI2B,IAAI,GAAG,IAAI,CAAC/H,OAAO,CAAC+H,IAAI,KAAK,IAAI,CAAC/H,OAAO,CAAC+H,IAAI,GAAG,CAAC,CAAC,CAAC;;IAExD;IACA,KAAK,IAAIC,CAAC,IAAI5B,GAAG,EAAE;MACjB2B,IAAI,CAACC,CAAC,CAAC,GAAG5B,GAAG,CAAC4B,CAAC,CAAC;IAClB;IAEA,OAAO,IAAI;EACb;EACA,IAAI,OAAO5B,GAAG,KAAK,QAAQ,EAAE;IAC3B,IAAI,CAACpG,OAAO,CAAC+H,IAAI,GAAG3B,GAAG;IACvB,OAAO,IAAI;EACb;EAEA,MAAM,IAAIjD,SAAS,CAAC,gBAAgB,GAAGiD,GAAG,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAtG,KAAK,CAACK,SAAS,CAAC8H,CAAC,GAAG,SAASA,CAAC,CAAC5E,GAAG,EAAE;EAClC,IAAI,CAACrD,OAAO,CAACiI,CAAC,GAAG5E,GAAG;EACpB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvD,KAAK,CAACK,SAAS,CAAC+H,OAAO,GAAG,UAASzG,CAAC,EAAE;EACpC,IAAI,CAACzB,OAAO,CAACkI,OAAO,GAAGnF,SAAS,CAACX,MAAM,GAAG,CAAC,CAACX,CAAC,GAAG,IAAI;EACpD,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA3B,KAAK,CAACK,SAAS,CAACgI,IAAI,GAAGrI,KAAK,CAACK,SAAS,CAACiI,iBAAiB,GAAG,UAASC,IAAI,EAAE;EACxE,IAAItF,SAAS,CAACX,MAAM,GAAG,CAAC,IAAI,CAACtC,KAAK,CAACK,SAAS,CAACgI,IAAI,CAACG,wBAAwB,EAAE;IAC1EC,OAAO,CAACC,KAAK,CAAC,2IAA2I,CAAC;IAC1J1I,KAAK,CAACK,SAAS,CAACgI,IAAI,CAACG,wBAAwB,GAAG,IAAI;EACtD;EACA,IAAI,CAACtI,OAAO,CAACyI,cAAc,GAAG7I,KAAK,CAAC8I,QAAQ,CAACL,IAAI,CAAC;EAClD,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"script","externalDependencies":[]}