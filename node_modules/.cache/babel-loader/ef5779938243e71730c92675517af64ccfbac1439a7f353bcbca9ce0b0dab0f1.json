{"ast":null,"code":"/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst CoreMongooseArray = require('./core_array');\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\nconst _basePush = Array.prototype.push;\n\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseArray(values, path, doc, schematype) {\n  let arr;\n  if (Array.isArray(values)) {\n    const len = values.length;\n\n    // Perf optimizations for small arrays: much faster to use `...` than `for` + `push`,\n    // but large arrays may cause stack overflows. And for arrays of length 0/1, just\n    // modifying the array is faster. Seems small, but adds up when you have a document\n    // with thousands of nested arrays.\n    if (len === 0) {\n      arr = new CoreMongooseArray();\n    } else if (len === 1) {\n      arr = new CoreMongooseArray(1);\n      arr[0] = values[0];\n    } else if (len < 10000) {\n      arr = new CoreMongooseArray();\n      _basePush.apply(arr, values);\n    } else {\n      arr = new CoreMongooseArray();\n      for (let i = 0; i < len; ++i) {\n        _basePush.call(arr, values[i]);\n      }\n    }\n    if (values[arrayAtomicsSymbol] != null) {\n      arr[arrayAtomicsSymbol] = values[arrayAtomicsSymbol];\n    }\n  } else {\n    arr = new CoreMongooseArray();\n  }\n  arr[arrayPathSymbol] = path;\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc != null && doc.$__ != null) {\n    arr[arrayParentSymbol] = doc;\n    arr[arraySchemaSymbol] = schematype || doc.schema.path(path);\n  }\n  return arr;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseArray;","map":{"version":3,"names":["CoreMongooseArray","require","arrayAtomicsSymbol","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","_basePush","Array","prototype","push","MongooseArray","values","path","doc","schematype","arr","isArray","len","length","apply","i","call","$__","schema","module","exports"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/types/array.js"],"sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst CoreMongooseArray = require('./core_array');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\n\nconst _basePush = Array.prototype.push;\n\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseArray(values, path, doc, schematype) {\n  let arr;\n\n  if (Array.isArray(values)) {\n    const len = values.length;\n\n    // Perf optimizations for small arrays: much faster to use `...` than `for` + `push`,\n    // but large arrays may cause stack overflows. And for arrays of length 0/1, just\n    // modifying the array is faster. Seems small, but adds up when you have a document\n    // with thousands of nested arrays.\n    if (len === 0) {\n      arr = new CoreMongooseArray();\n    } else if (len === 1) {\n      arr = new CoreMongooseArray(1);\n      arr[0] = values[0];\n    } else if (len < 10000) {\n      arr = new CoreMongooseArray();\n      _basePush.apply(arr, values);\n    } else {\n      arr = new CoreMongooseArray();\n      for (let i = 0; i < len; ++i) {\n        _basePush.call(arr, values[i]);\n      }\n    }\n\n    if (values[arrayAtomicsSymbol] != null) {\n      arr[arrayAtomicsSymbol] = values[arrayAtomicsSymbol];\n    }\n  } else {\n    arr = new CoreMongooseArray();\n  }\n\n  arr[arrayPathSymbol] = path;\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc != null && doc.$__ != null) {\n    arr[arrayParentSymbol] = doc;\n    arr[arraySchemaSymbol] = schematype || doc.schema.path(path);\n  }\n\n  return arr;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseArray;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,cAAc,CAAC;AAEjD,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,oBAAoB,CAAC,CAACC,kBAAkB;AAC3E,MAAMC,iBAAiB,GAAGF,OAAO,CAAC,oBAAoB,CAAC,CAACE,iBAAiB;AACzE,MAAMC,eAAe,GAAGH,OAAO,CAAC,oBAAoB,CAAC,CAACG,eAAe;AACrE,MAAMC,iBAAiB,GAAGJ,OAAO,CAAC,oBAAoB,CAAC,CAACI,iBAAiB;AAEzE,MAAMC,SAAS,GAAGC,KAAK,CAACC,SAAS,CAACC,IAAI;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,aAAa,CAACC,MAAM,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAE;EACpD,IAAIC,GAAG;EAEP,IAAIR,KAAK,CAACS,OAAO,CAACL,MAAM,CAAC,EAAE;IACzB,MAAMM,GAAG,GAAGN,MAAM,CAACO,MAAM;;IAEzB;IACA;IACA;IACA;IACA,IAAID,GAAG,KAAK,CAAC,EAAE;MACbF,GAAG,GAAG,IAAIf,iBAAiB,EAAE;IAC/B,CAAC,MAAM,IAAIiB,GAAG,KAAK,CAAC,EAAE;MACpBF,GAAG,GAAG,IAAIf,iBAAiB,CAAC,CAAC,CAAC;MAC9Be,GAAG,CAAC,CAAC,CAAC,GAAGJ,MAAM,CAAC,CAAC,CAAC;IACpB,CAAC,MAAM,IAAIM,GAAG,GAAG,KAAK,EAAE;MACtBF,GAAG,GAAG,IAAIf,iBAAiB,EAAE;MAC7BM,SAAS,CAACa,KAAK,CAACJ,GAAG,EAAEJ,MAAM,CAAC;IAC9B,CAAC,MAAM;MACLI,GAAG,GAAG,IAAIf,iBAAiB,EAAE;MAC7B,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,EAAE,EAAEG,CAAC,EAAE;QAC5Bd,SAAS,CAACe,IAAI,CAACN,GAAG,EAAEJ,MAAM,CAACS,CAAC,CAAC,CAAC;MAChC;IACF;IAEA,IAAIT,MAAM,CAACT,kBAAkB,CAAC,IAAI,IAAI,EAAE;MACtCa,GAAG,CAACb,kBAAkB,CAAC,GAAGS,MAAM,CAACT,kBAAkB,CAAC;IACtD;EACF,CAAC,MAAM;IACLa,GAAG,GAAG,IAAIf,iBAAiB,EAAE;EAC/B;EAEAe,GAAG,CAACX,eAAe,CAAC,GAAGQ,IAAI;;EAE3B;EACA;EACA;EACA;EACA,IAAIC,GAAG,IAAI,IAAI,IAAIA,GAAG,CAACS,GAAG,IAAI,IAAI,EAAE;IAClCP,GAAG,CAACZ,iBAAiB,CAAC,GAAGU,GAAG;IAC5BE,GAAG,CAACV,iBAAiB,CAAC,GAAGS,UAAU,IAAID,GAAG,CAACU,MAAM,CAACX,IAAI,CAACA,IAAI,CAAC;EAC9D;EAEA,OAAOG,GAAG;AACZ;;AAEA;AACA;AACA;;AAEAS,MAAM,CAACC,OAAO,GAAGA,OAAO,GAAGf,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}