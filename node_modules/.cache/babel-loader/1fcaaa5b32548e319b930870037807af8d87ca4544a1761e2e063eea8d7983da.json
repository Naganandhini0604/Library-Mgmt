{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst CastError = require('./error/cast');\nconst DocumentNotFoundError = require('./error/notFound');\nconst Kareem = require('kareem');\nconst MongooseError = require('./error/mongooseError');\nconst ObjectParameterError = require('./error/objectParameter');\nconst QueryCursor = require('./cursor/QueryCursor');\nconst ReadPreference = require('./driver').get().ReadPreference;\nconst applyGlobalMaxTimeMS = require('./helpers/query/applyGlobalMaxTimeMS');\nconst applyWriteConcern = require('./helpers/schema/applyWriteConcern');\nconst cast = require('./cast');\nconst castArrayFilters = require('./helpers/update/castArrayFilters');\nconst castUpdate = require('./helpers/query/castUpdate');\nconst completeMany = require('./helpers/query/completeMany');\nconst get = require('./helpers/get');\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\nconst getDiscriminatorByValue = require('./helpers/discriminator/getDiscriminatorByValue');\nconst hasDollarKeys = require('./helpers/query/hasDollarKeys');\nconst helpers = require('./queryhelpers');\nconst immediate = require('./helpers/immediate');\nconst isExclusive = require('./helpers/projection/isExclusive');\nconst isInclusive = require('./helpers/projection/isInclusive');\nconst mquery = require('mquery');\nconst parseProjection = require('./helpers/projection/parseProjection');\nconst removeUnusedArrayFilters = require('./helpers/update/removeUnusedArrayFilters');\nconst sanitizeProjection = require('./helpers/query/sanitizeProjection');\nconst selectPopulatedFields = require('./helpers/query/selectPopulatedFields');\nconst setDefaultsOnInsert = require('./helpers/setDefaultsOnInsert');\nconst slice = require('sliced');\nconst updateValidators = require('./helpers/updateValidators');\nconst util = require('util');\nconst utils = require('./utils');\nconst wrapThunk = require('./helpers/query/wrapThunk');\n\n/**\n * Query constructor used for building queries. You do not need\n * to instantiate a `Query` directly. Instead use Model functions like\n * [`Model.find()`](/docs/api.html#find_find).\n *\n * ####Example:\n *\n *     const query = MyModel.find(); // `query` is an instance of `Query`\n *     query.setOptions({ lean : true });\n *     query.collection(MyModel.collection);\n *     query.where('age').gte(21).exec(callback);\n *\n *     // You can instantiate a query directly. There is no need to do\n *     // this unless you're an advanced user with a very good reason to.\n *     const query = new mongoose.Query();\n *\n * @param {Object} [options]\n * @param {Object} [model]\n * @param {Object} [conditions]\n * @param {Object} [collection] Mongoose collection\n * @api public\n */\n\nfunction Query(conditions, options, model, collection) {\n  // this stuff is for dealing with custom queries created by #toConstructor\n  if (!this._mongooseOptions) {\n    this._mongooseOptions = {};\n  }\n  options = options || {};\n  this._transforms = [];\n  this._hooks = new Kareem();\n  this._executionCount = 0;\n\n  // this is the case where we have a CustomQuery, we need to check if we got\n  // options passed in, and if we did, merge them in\n  const keys = Object.keys(options);\n  for (const key of keys) {\n    this._mongooseOptions[key] = options[key];\n  }\n  if (collection) {\n    this.mongooseCollection = collection;\n  }\n  if (model) {\n    this.model = model;\n    this.schema = model.schema;\n  }\n\n  // this is needed because map reduce returns a model that can be queried, but\n  // all of the queries on said model should be lean\n  if (this.model && this.model._mapreduce) {\n    this.lean();\n  }\n\n  // inherit mquery\n  mquery.call(this, this.mongooseCollection, options);\n  if (conditions) {\n    this.find(conditions);\n  }\n  this.options = this.options || {};\n\n  // For gh-6880. mquery still needs to support `fields` by default for old\n  // versions of MongoDB\n  this.$useProjection = true;\n  const collation = get(this, 'schema.options.collation', null);\n  if (collation != null) {\n    this.options.collation = collation;\n  }\n}\n\n/*!\n * inherit mquery\n */\n\nQuery.prototype = new mquery();\nQuery.prototype.constructor = Query;\nQuery.base = mquery.prototype;\n\n/**\n * Flag to opt out of using `$geoWithin`.\n *\n *     mongoose.Query.use$geoWithin = false;\n *\n * MongoDB 2.4 deprecated the use of `$within`, replacing it with `$geoWithin`. Mongoose uses `$geoWithin` by default (which is 100% backward compatible with `$within`). If you are running an older version of MongoDB, set this flag to `false` so your `within()` queries continue to work.\n *\n * @see http://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @default true\n * @property use$geoWithin\n * @memberOf Query\n * @receiver Query\n * @api public\n */\n\nQuery.use$geoWithin = mquery.use$geoWithin;\n\n/**\n * Converts this query to a customized, reusable query constructor with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query for adventure movies and read from the primary\n *     // node in the replica-set unless it is down, in which case we'll\n *     // read from a secondary node.\n *     const query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');\n *\n *     // create a custom Query constructor based off these settings\n *     const Adventure = query.toConstructor();\n *\n *     // Adventure is now a subclass of mongoose.Query and works the same way but with the\n *     // default query parameters and options set.\n *     Adventure().exec(callback)\n *\n *     // further narrow down our query results while still using the previous settings\n *     Adventure().where({ name: /^Life/ }).exec(callback);\n *\n *     // since Adventure is a stand-alone constructor we can also add our own\n *     // helper methods and getters without impacting global queries\n *     Adventure.prototype.startsWith = function (prefix) {\n *       this.where({ name: new RegExp('^' + prefix) })\n *       return this;\n *     }\n *     Object.defineProperty(Adventure.prototype, 'highlyRated', {\n *       get: function () {\n *         this.where({ rating: { $gt: 4.5 }});\n *         return this;\n *       }\n *     })\n *     Adventure().highlyRated.startsWith('Life').exec(callback)\n *\n * @return {Query} subclass-of-Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  const model = this.model;\n  const coll = this.mongooseCollection;\n  const CustomQuery = function (criteria, options) {\n    if (!(this instanceof CustomQuery)) {\n      return new CustomQuery(criteria, options);\n    }\n    this._mongooseOptions = utils.clone(p._mongooseOptions);\n    Query.call(this, criteria, options || null, model, coll);\n  };\n  util.inherits(CustomQuery, model.Query);\n\n  // set inherited defaults\n  const p = CustomQuery.prototype;\n  p.options = {};\n\n  // Need to handle `sort()` separately because entries-style `sort()` syntax\n  // `sort([['prop1', 1]])` confuses mquery into losing the outer nested array.\n  // See gh-8159\n  const options = Object.assign({}, this.options);\n  if (options.sort != null) {\n    p.sort(options.sort);\n    delete options.sort;\n  }\n  p.setOptions(options);\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update, {\n    flattenDecimals: false\n  });\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._mongooseOptions = this._mongooseOptions;\n  return CustomQuery;\n};\n\n/**\n * Specifies a javascript function or expression to pass to MongoDBs query system.\n *\n * ####Example\n *\n *     query.$where('this.comments.length === 10 || this.name.length === 5')\n *\n *     // or\n *\n *     query.$where(function () {\n *       return this.comments.length === 10 || this.name.length === 5;\n *     })\n *\n * ####NOTE:\n *\n * Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`.\n * **Be sure to read about all of [its caveats](http://docs.mongodb.org/manual/reference/operator/where/) before using.**\n *\n * @see $where http://docs.mongodb.org/manual/reference/operator/where/\n * @method $where\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @instance\n * @method $where\n * @api public\n */\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @method where\n * @memberOf Query\n * @instance\n * @param {String|Object} [path]\n * @param {any} [val]\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a `$slice` projection for an array.\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @method slice\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @see $slice http://docs.mongodb.org/manual/reference/projection/slice/#prj._S_slice\n * @api public\n */\n\nQuery.prototype.slice = function () {\n  if (arguments.length === 0) {\n    return this;\n  }\n  this._validate('slice');\n  let path;\n  let val;\n  if (arguments.length === 1) {\n    const arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const keys = Object.keys(arg);\n      const numKeys = keys.length;\n      for (let i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (arguments.length === 2) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = slice(arguments);\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (arguments.length === 3) {\n    path = arguments[0];\n    val = slice(arguments, 1);\n  }\n  const p = {};\n  p[path] = {\n    $slice: val\n  };\n  this.select(p);\n  return this;\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @method equals\n * @memberOf Query\n * @instance\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @see $or http://docs.mongodb.org/manual/reference/operator/or/\n * @method or\n * @memberOf Query\n * @instance\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $nor http://docs.mongodb.org/manual/reference/operator/nor/\n * @method nor\n * @memberOf Query\n * @instance\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @method and\n * @memberOf Query\n * @instance\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a `$gt` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $gt http://docs.mongodb.org/manual/reference/operator/gt/\n * @api public\n */\n\n/**\n * Specifies a `$gte` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $gte http://docs.mongodb.org/manual/reference/operator/gte/\n * @api public\n */\n\n/**\n * Specifies a `$lt` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $lt http://docs.mongodb.org/manual/reference/operator/lt/\n * @api public\n */\n\n/**\n * Specifies a `$lte` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @see $lte http://docs.mongodb.org/manual/reference/operator/lte/\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$ne` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $ne http://docs.mongodb.org/manual/reference/operator/ne/\n * @method ne\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {any} val\n * @api public\n */\n\n/**\n * Specifies an `$in` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $in http://docs.mongodb.org/manual/reference/operator/in/\n * @method in\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies an `$nin` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $nin http://docs.mongodb.org/manual/reference/operator/nin/\n * @method nin\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies an `$all` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example:\n *\n *     MyModel.find().where('pets').all(['dog', 'cat', 'ferret']);\n *     // Equivalent:\n *     MyModel.find().all('pets', ['dog', 'cat', 'ferret']);\n *\n * @see $all http://docs.mongodb.org/manual/reference/operator/all/\n * @method all\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies a `$size` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     MyModel.where('tags').size(0).exec(function (err, docs) {\n *       if (err) return handleError(err);\n *\n *       assert(Array.isArray(docs));\n *       console.log('documents with 0 tags', docs);\n *     })\n *\n * @see $size http://docs.mongodb.org/manual/reference/operator/size/\n * @method size\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$regex` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $regex http://docs.mongodb.org/manual/reference/operator/regex/\n * @method regex\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a `maxDistance` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @method maxDistance\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$mod` condition, filters documents for documents whose\n * `path` property is a number that is equal to `remainder` modulo `divisor`.\n *\n * ####Example\n *\n *     // All find products whose inventory is odd\n *     Product.find().mod('inventory', [2, 1]);\n *     Product.find().where('inventory').mod([2, 1]);\n *     // This syntax is a little strange, but supported.\n *     Product.find().where('inventory').mod(2, 1);\n *\n * @method mod\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val must be of length 2, first element is `divisor`, 2nd element is `remainder`.\n * @return {Query} this\n * @see $mod http://docs.mongodb.org/manual/reference/operator/mod/\n * @api public\n */\n\nQuery.prototype.mod = function () {\n  let val;\n  let path;\n  if (arguments.length === 1) {\n    this._ensurePath('mod');\n    val = arguments[0];\n    path = this._path;\n  } else if (arguments.length === 2 && !Array.isArray(arguments[1])) {\n    this._ensurePath('mod');\n    val = slice(arguments);\n    path = this._path;\n  } else if (arguments.length === 3) {\n    val = slice(arguments, 1);\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @method exists\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Boolean} val\n * @return {Query} this\n * @see $exists http://docs.mongodb.org/manual/reference/operator/exists/\n * @api public\n */\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @method elemMatch\n * @memberOf Query\n * @instance\n * @param {String|Object|Function} path\n * @param {Object|Function} filter\n * @return {Query} this\n * @see $elemMatch http://docs.mongodb.org/manual/reference/operator/elemMatch/\n * @api public\n */\n\n/**\n * Defines a `$within` or `$geoWithin` argument for geo-spatial queries.\n *\n * ####Example\n *\n *     query.where(path).within().box()\n *     query.where(path).within().circle()\n *     query.where(path).within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * As of Mongoose 3.7, `$geoWithin` is always used for queries. To change this behavior, see [Query.use$geoWithin](#query_Query-use%2524geoWithin).\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `within` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method within\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @memberOf Query\n * @instance\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies the maximum number of documents the query will return.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies the number of documents to skip.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see cursor.skip http://docs.mongodb.org/manual/reference/method/cursor.skip/\n * @api public\n */\n\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see maxScan http://docs.mongodb.org/manual/reference/operator/maxScan/\n * @api public\n */\n\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see batchSize http://docs.mongodb.org/manual/reference/method/cursor.batchSize/\n * @api public\n */\n\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @instance\n * @param {String} val\n * @see comment http://docs.mongodb.org/manual/reference/operator/comment/\n * @api public\n */\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     query.snapshot() // true\n *     query.snapshot(true)\n *     query.snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method snapshot\n * @memberOf Query\n * @instance\n * @see snapshot http://docs.mongodb.org/manual/reference/operator/snapshot/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1})\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method hint\n * @memberOf Query\n * @instance\n * @param {Object} val a hint object\n * @return {Query} this\n * @see $hint http://docs.mongodb.org/manual/reference/operator/hint/\n * @api public\n */\n\n/**\n * Get/set the current projection (AKA fields). Pass `null` to remove the\n * current projection.\n *\n * Unlike `projection()`, the `select()` function modifies the current\n * projection in place. This function overwrites the existing projection.\n *\n * ####Example:\n *\n *     const q = Model.find();\n *     q.projection(); // null\n *\n *     q.select('a b');\n *     q.projection(); // { a: 1, b: 1 }\n *\n *     q.projection({ c: 1 });\n *     q.projection(); // { c: 1 }\n *\n *     q.projection(null);\n *     q.projection(); // null\n *\n *\n * @method projection\n * @memberOf Query\n * @instance\n * @param {Object|null} arg\n * @return {Object} the current projection\n * @api public\n */\n\nQuery.prototype.projection = function (arg) {\n  if (arguments.length === 0) {\n    return this._fields;\n  }\n  this._fields = {};\n  this._userProvidedFields = {};\n  this.select(arg);\n  return this._fields;\n};\n\n/**\n * Specifies which document fields to include or exclude (also known as the query \"projection\")\n *\n * When using string syntax, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included. Lastly, if a path is prefixed with `+`, it forces inclusion of the path, which is useful for paths excluded at the [schema level](/docs/api.html#schematype_SchemaType-select).\n *\n * A projection _must_ be either inclusive or exclusive. In other words, you must\n * either list the fields to include (which excludes all others), or list the fields\n * to exclude (which implies all other fields are included). The [`_id` field is the only exception because MongoDB includes it by default](https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/#suppress-id-field).\n *\n * ####Example\n *\n *     // include a and b, exclude other fields\n *     query.select('a b');\n *     // Equivalent syntaxes:\n *     query.select(['a', 'b']);\n *     query.select({ a: 1, b: 1 });\n *\n *     // exclude c and d, include other fields\n *     query.select('-c -d');\n *\n *     // Use `+` to override schema-level `select: false` without making the\n *     // projection inclusive.\n *     const schema = new Schema({\n *       foo: { type: String, select: false },\n *       bar: String\n *     });\n *     // ...\n *     query.select('+foo'); // Override foo's `select: false` without excluding `bar`\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({ a: 1, b: 1 });\n *     query.select({ c: 0, d: 0 });\n *\n *\n * @method select\n * @memberOf Query\n * @instance\n * @param {Object|String|Array<String>} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\nQuery.prototype.select = function select() {\n  let arg = arguments[0];\n  if (!arg) return this;\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n  this._validate('select');\n  const fields = this._fields || (this._fields = {});\n  const userProvidedFields = this._userProvidedFields || (this._userProvidedFields = {});\n  let sanitizeProjection = undefined;\n  if (this.model != null && utils.hasUserDefinedProperty(this.model.db.options, 'sanitizeProjection')) {\n    sanitizeProjection = this.model.db.options.sanitizeProjection;\n  } else if (this.model != null && utils.hasUserDefinedProperty(this.model.base.options, 'sanitizeProjection')) {\n    sanitizeProjection = this.model.base.options.sanitizeProjection;\n  } else {\n    sanitizeProjection = this._mongooseOptions.sanitizeProjection;\n  }\n  arg = parseProjection(arg);\n  if (utils.isObject(arg)) {\n    const keys = Object.keys(arg);\n    for (let i = 0; i < keys.length; ++i) {\n      let value = arg[keys[i]];\n      if (typeof value === 'string' && sanitizeProjection) {\n        value = 1;\n      }\n      fields[keys[i]] = value;\n      userProvidedFields[keys[i]] = value;\n    }\n    return this;\n  }\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n\n/**\n * _DEPRECATED_ Sets the slaveOk option.\n *\n * **Deprecated** in MongoDB 2.2 in favor of [read preferences](#query_Query-read).\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @method slaveOk\n * @memberOf Query\n * @instance\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see slaveOk http://docs.mongodb.org/manual/reference/method/rs.slaveOk/\n * @see read() #query_Query-read\n * @return {Query} this\n * @api public\n */\n\n/**\n * Determines the MongoDB nodes from which to read.\n *\n * ####Preferences:\n *\n *     primary - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // read from secondaries with matching tags\n *     new Query().read('s', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }])\n *\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @method read\n * @memberOf Query\n * @instance\n * @param {String} pref one of the listed preference options or aliases\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = function read(pref, tags) {\n  // first cast into a ReadPreference object to support tags\n  const read = new ReadPreference(pref, tags);\n  this.options.readPreference = read;\n  return this;\n};\n\n/**\n * Sets the [MongoDB session](https://docs.mongodb.com/manual/reference/server-sessions/)\n * associated with this query. Sessions are how you mark a query as part of a\n * [transaction](/docs/transactions.html).\n *\n * Calling `session(null)` removes the session from this query.\n *\n * ####Example:\n *\n *     const s = await mongoose.startSession();\n *     await mongoose.model('Person').findOne({ name: 'Axl Rose' }).session(s);\n *\n * @method session\n * @memberOf Query\n * @instance\n * @param {ClientSession} [session] from `await conn.startSession()`\n * @see Connection.prototype.startSession() /docs/api.html#connection_Connection-startSession\n * @see mongoose.startSession() /docs/api.html#mongoose_Mongoose-startSession\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.session = function session(v) {\n  if (v == null) {\n    delete this.options.session;\n  }\n  this.options.session = v;\n  return this;\n};\n\n/**\n * Sets the 3 write concern parameters for this query:\n *\n * - `w`: Sets the specified number of `mongod` servers, or tag set of `mongod` servers, that must acknowledge this write before this write is considered successful.\n * - `j`: Boolean, set to `true` to request acknowledgement that this operation has been persisted to MongoDB's on-disk journal.\n * - `wtimeout`: If [`w > 1`](/docs/api.html#query_Query-w), the maximum amount of time to wait for this write to propagate through the replica set before this operation fails. The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern` option](/docs/guide.html#writeConcern)\n *\n * ####Example:\n *\n *     // The 'majority' option means the `deleteOne()` promise won't resolve\n *     // until the `deleteOne()` has propagated to the majority of the replica set\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       writeConcern({ w: 'majority' });\n *\n * @method writeConcern\n * @memberOf Query\n * @instance\n * @param {Object} writeConcern the write concern value to set\n * @see mongodb https://mongodb.github.io/node-mongodb-native/3.1/api/global.html#WriteConcern\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.writeConcern = function writeConcern(val) {\n  if (val == null) {\n    delete this.options.writeConcern;\n    return this;\n  }\n  this.options.writeConcern = val;\n  return this;\n};\n\n/**\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\n * that must acknowledge this write before this write is considered successful.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.w` option](/docs/guide.html#writeConcern)\n *\n * ####Example:\n *\n *     // The 'majority' option means the `deleteOne()` promise won't resolve\n *     // until the `deleteOne()` has propagated to the majority of the replica set\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       w('majority');\n *\n * @method w\n * @memberOf Query\n * @instance\n * @param {String|number} val 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.w = function w(val) {\n  if (val == null) {\n    delete this.options.w;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.w = val;\n  } else {\n    this.options.w = val;\n  }\n  return this;\n};\n\n/**\n * Requests acknowledgement that this operation has been persisted to MongoDB's\n * on-disk journal.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.j` option](/docs/guide.html#writeConcern)\n *\n * ####Example:\n *\n *     await mongoose.model('Person').deleteOne({ name: 'Ned Stark' }).j(true);\n *\n * @method j\n * @memberOf Query\n * @instance\n * @param {boolean} val\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.j = function j(val) {\n  if (val == null) {\n    delete this.options.j;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.j = val;\n  } else {\n    this.options.j = val;\n  }\n  return this;\n};\n\n/**\n * If [`w > 1`](/docs/api.html#query_Query-w), the maximum amount of time to\n * wait for this write to propagate through the replica set before this\n * operation fails. The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.wtimeout` option](/docs/guide.html#writeConcern)\n *\n * ####Example:\n *\n *     // The `deleteOne()` promise won't resolve until this `deleteOne()` has\n *     // propagated to at least `w = 2` members of the replica set. If it takes\n *     // longer than 1 second, this `deleteOne()` will fail.\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       w(2).\n *       wtimeout(1000);\n *\n * @method wtimeout\n * @memberOf Query\n * @instance\n * @param {number} ms number of milliseconds to wait\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.wtimeout = function wtimeout(ms) {\n  if (ms == null) {\n    delete this.options.wtimeout;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.wtimeout = ms;\n  } else {\n    this.options.wtimeout = ms;\n  }\n  return this;\n};\n\n/**\n * Sets the readConcern option for the query.\n *\n * ####Example:\n *\n *     new Query().readConcern('local')\n *     new Query().readConcern('l')  // same as local\n *\n *     new Query().readConcern('available')\n *     new Query().readConcern('a')  // same as available\n *\n *     new Query().readConcern('majority')\n *     new Query().readConcern('m')  // same as majority\n *\n *     new Query().readConcern('linearizable')\n *     new Query().readConcern('lz') // same as linearizable\n *\n *     new Query().readConcern('snapshot')\n *     new Query().readConcern('s')  // same as snapshot\n *\n *\n * ####Read Concern Level:\n *\n *     local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\n *     linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\n *     snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\n *\n * Aliases\n *\n *     l   local\n *     a   available\n *     m   majority\n *     lz  linearizable\n *     s   snapshot\n *\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\n *\n * @memberOf Query\n * @method readConcern\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Gets query options.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.limit(10);\n *     query.setOptions({ maxTimeMS: 1000 })\n *     query.getOptions(); // { limit: 10, maxTimeMS: 1000 }\n *\n * @return {Object} the options\n * @api public\n */\n\nQuery.prototype.getOptions = function () {\n  return this.options;\n};\n\n/**\n * Sets query options. Some options only make sense for certain operations.\n *\n * ####Options:\n *\n * The following options are only for `find()`:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors)\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D)\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D)\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D)\n * - [allowDiskUse](https://docs.mongodb.com/manual/reference/method/cursor.allowDiskUse/)\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D)\n * - [readPreference](http://docs.mongodb.org/manual/applications/replication/#read-preference)\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint)\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment)\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D)\n * - [maxscan](https://docs.mongodb.org/v3.2/reference/operator/meta/maxScan/#metaOp._S_maxScan)\n *\n * The following options are only for write operations: `update()`, `updateOne()`, `updateMany()`, `replaceOne()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\n *\n * - [upsert](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\n * - [writeConcern](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\n * - [timestamps](https://mongoosejs.com/docs/guide.html#timestamps): If `timestamps` is set in the schema, set this option to `false` to skip timestamps for that particular update. Has no effect if `timestamps` is not enabled in the schema options.\n * - omitUndefined: delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * - overwriteDiscriminatorKey: allow setting the discriminator key in the update. Will use the correct discriminator schema if the update changes the discriminator key.\n * - overwrite: replace the entire document\n *\n * The following options are only for `find()`, `findOne()`, `findById()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\n *\n * - [lean](./api.html#query_Query-lean)\n * - [populate](/docs/populate.html)\n * - [projection](/docs/api/query.html#query_Query-projection)\n * - sanitizeProjection\n *\n * The following options are only for all operations **except** `update()`, `updateOne()`, `updateMany()`, `remove()`, `deleteOne()`, and `deleteMany()`:\n *\n * - [maxTimeMS](https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/)\n *\n * The following options are for `findOneAndUpdate()` and `findOneAndRemove()`\n *\n * - [useFindAndModify](/docs/deprecations.html#findandmodify)\n * - rawResult\n *\n * The following options are for all operations:\n *\n * - [collation](https://docs.mongodb.com/manual/reference/collation/)\n * - [session](https://docs.mongodb.com/manual/reference/server-sessions/)\n * - [explain](https://docs.mongodb.com/manual/reference/method/cursor.explain/)\n *\n * @param {Object} options\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.setOptions = function (options, overwrite) {\n  // overwrite is only for internal use\n  if (overwrite) {\n    // ensure that _mongooseOptions & options are two different objects\n    this._mongooseOptions = options && utils.clone(options) || {};\n    this.options = options || {};\n    if ('populate' in options) {\n      this.populate(this._mongooseOptions);\n    }\n    return this;\n  }\n  if (options == null) {\n    return this;\n  }\n  if (typeof options !== 'object') {\n    throw new Error('Options must be an object, got \"' + options + '\"');\n  }\n  if (Array.isArray(options.populate)) {\n    const populate = options.populate;\n    delete options.populate;\n    const _numPopulate = populate.length;\n    for (let i = 0; i < _numPopulate; ++i) {\n      this.populate(populate[i]);\n    }\n  }\n  if ('useFindAndModify' in options) {\n    this._mongooseOptions.useFindAndModify = options.useFindAndModify;\n    delete options.useFindAndModify;\n  }\n  if ('omitUndefined' in options) {\n    this._mongooseOptions.omitUndefined = options.omitUndefined;\n    delete options.omitUndefined;\n  }\n  if ('setDefaultsOnInsert' in options) {\n    this._mongooseOptions.setDefaultsOnInsert = options.setDefaultsOnInsert;\n    delete options.setDefaultsOnInsert;\n  }\n  if ('overwriteDiscriminatorKey' in options) {\n    this._mongooseOptions.overwriteDiscriminatorKey = options.overwriteDiscriminatorKey;\n    delete options.overwriteDiscriminatorKey;\n  }\n  if ('sanitizeProjection' in options) {\n    if (options.sanitizeProjection && !this._mongooseOptions.sanitizeProjection) {\n      sanitizeProjection(this._fields);\n    }\n    this._mongooseOptions.sanitizeProjection = options.sanitizeProjection;\n    delete options.sanitizeProjection;\n  }\n  if ('defaults' in options) {\n    this._mongooseOptions.defaults = options.defaults;\n    // deleting options.defaults will cause 7287 to fail\n  }\n\n  return Query.base.setOptions.call(this, options);\n};\n\n/**\n * Sets the [`explain` option](https://docs.mongodb.com/manual/reference/method/cursor.explain/),\n * which makes this query return detailed execution stats instead of the actual\n * query result. This method is useful for determining what index your queries\n * use.\n *\n * Calling `query.explain(v)` is equivalent to `query.setOptions({ explain: v })`\n *\n * ####Example:\n *\n *     const query = new Query();\n *     const res = await query.find({ a: 1 }).explain('queryPlanner');\n *     console.log(res);\n *\n * @param {String} [verbose] The verbosity mode. Either 'queryPlanner', 'executionStats', or 'allPlansExecution'. The default is 'queryPlanner'\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.explain = function (verbose) {\n  if (arguments.length === 0) {\n    this.options.explain = true;\n  } else if (verbose === false) {\n    delete this.options.explain;\n  } else {\n    this.options.explain = verbose;\n  }\n  return this;\n};\n\n/**\n * Sets the [`allowDiskUse` option](https://docs.mongodb.com/manual/reference/method/cursor.allowDiskUse/),\n * which allows the MongoDB server to use more than 100 MB for this query's `sort()`. This option can\n * let you work around `QueryExceededMemoryLimitNoDiskUseAllowed` errors from the MongoDB server.\n *\n * Note that this option requires MongoDB server >= 4.4. Setting this option is a no-op for MongoDB 4.2\n * and earlier.\n *\n * Calling `query.allowDiskUse(v)` is equivalent to `query.setOptions({ allowDiskUse: v })`\n *\n * ####Example:\n *\n *     await query.find().sort({ name: 1 }).allowDiskUse(true);\n *     // Equivalent:\n *     await query.find().sort({ name: 1 }).allowDiskUse();\n *\n * @param {Boolean} [v] Enable/disable `allowDiskUse`. If called with 0 arguments, sets `allowDiskUse: true`\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.allowDiskUse = function (v) {\n  if (arguments.length === 0) {\n    this.options.allowDiskUse = true;\n  } else if (v === false) {\n    delete this.options.allowDiskUse;\n  } else {\n    this.options.allowDiskUse = v;\n  }\n  return this;\n};\n\n/**\n * Sets the [maxTimeMS](https://docs.mongodb.com/manual/reference/method/cursor.maxTimeMS/)\n * option. This will tell the MongoDB server to abort if the query or write op\n * has been running for more than `ms` milliseconds.\n *\n * Calling `query.maxTimeMS(v)` is equivalent to `query.setOptions({ maxTimeMS: v })`\n *\n * ####Example:\n *\n *     const query = new Query();\n *     // Throws an error 'operation exceeded time limit' as long as there's\n *     // >= 1 doc in the queried collection\n *     const res = await query.find({ $where: 'sleep(1000) || true' }).maxTimeMS(100);\n *\n * @param {Number} [ms] The number of milliseconds\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.maxTimeMS = function (ms) {\n  this.options.maxTimeMS = ms;\n  return this;\n};\n\n/**\n * Returns the current query filter (also known as conditions) as a [POJO](https://masteringjs.io/tutorials/fundamentals/pojo).\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getFilter(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query filter\n * @api public\n */\n\nQuery.prototype.getFilter = function () {\n  return this._conditions;\n};\n\n/**\n * Returns the current query filter. Equivalent to `getFilter()`.\n *\n * You should use `getFilter()` instead of `getQuery()` where possible. `getQuery()`\n * will likely be deprecated in a future release.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getQuery(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query filter\n * @api public\n */\n\nQuery.prototype.getQuery = function () {\n  return this._conditions;\n};\n\n/**\n * Sets the query conditions to the provided JSON object.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 })\n *     query.setQuery({ a: 2 });\n *     query.getQuery(); // { a: 2 }\n *\n * @param {Object} new query conditions\n * @return {undefined}\n * @api public\n */\n\nQuery.prototype.setQuery = function (val) {\n  this._conditions = val;\n};\n\n/**\n * Returns the current update operations as a JSON object.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.update({}, { $set: { a: 5 } });\n *     query.getUpdate(); // { $set: { a: 5 } }\n *\n * @return {Object} current update operations\n * @api public\n */\n\nQuery.prototype.getUpdate = function () {\n  return this._update;\n};\n\n/**\n * Sets the current update operation to new value.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.update({}, { $set: { a: 5 } });\n *     query.setUpdate({ $set: { b: 6 } });\n *     query.getUpdate(); // { $set: { b: 6 } }\n *\n * @param {Object} new update operation\n * @return {undefined}\n * @api public\n */\n\nQuery.prototype.setUpdate = function (val) {\n  this._update = val;\n};\n\n/**\n * Returns fields selection for this query.\n *\n * @method _fieldsForExec\n * @return {Object}\n * @api private\n * @receiver Query\n */\n\nQuery.prototype._fieldsForExec = function () {\n  return utils.clone(this._fields);\n};\n\n/**\n * Return an update document with corrected `$set` operations.\n *\n * @method _updateForExec\n * @api private\n * @receiver Query\n */\n\nQuery.prototype._updateForExec = function () {\n  const update = utils.clone(this._update, {\n    transform: false,\n    depopulate: true\n  });\n  const ops = Object.keys(update);\n  let i = ops.length;\n  const ret = {};\n  while (i--) {\n    const op = ops[i];\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n  return ret;\n};\n\n/**\n * Makes sure _path is set.\n *\n * @method _ensurePath\n * @param {String} method\n * @api private\n * @receiver Query\n */\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @method canMerge\n * @memberOf Query\n * @instance\n * @param {Object} conds\n * @return {Boolean}\n * @api private\n */\n\n/**\n * Returns default options for this query.\n *\n * @param {Model} model\n * @api private\n */\n\nQuery.prototype._optionsForExec = function (model) {\n  const options = utils.clone(this.options);\n  delete options.populate;\n  model = model || this.model;\n  if (!model) {\n    return options;\n  }\n  const safe = get(model, 'schema.options.safe', null);\n  if (!('safe' in options) && safe != null) {\n    setSafe(options, safe);\n  }\n\n  // Apply schema-level `writeConcern` option\n  applyWriteConcern(model.schema, options);\n  const readPreference = get(model, 'schema.options.read');\n  if (!('readPreference' in options) && readPreference) {\n    options.readPreference = readPreference;\n  }\n  if (options.upsert !== void 0) {\n    options.upsert = !!options.upsert;\n  }\n  if (options.writeConcern) {\n    if (options.j) {\n      options.writeConcern.j = options.j;\n      delete options.j;\n    }\n    if (options.w) {\n      options.writeConcern.w = options.w;\n      delete options.w;\n    }\n    if (options.wtimeout) {\n      options.writeConcern.wtimeout = options.wtimeout;\n      delete options.wtimeout;\n    }\n  }\n  return options;\n};\n\n/*!\n * ignore\n */\n\nconst safeDeprecationWarning = 'Mongoose: the `safe` option is deprecated. ' + 'Use write concerns instead: http://bit.ly/mongoose-w';\nconst setSafe = util.deprecate(function setSafe(options, safe) {\n  options.safe = safe;\n}, safeDeprecationWarning);\n\n/**\n * Sets the lean option.\n *\n * Documents returned from queries with the `lean` option enabled are plain\n * javascript objects, not [Mongoose Documents](/api/document.html). They have no\n * `save` method, getters/setters, virtuals, or other Mongoose features.\n *\n * ####Example:\n *\n *     new Query().lean() // true\n *     new Query().lean(true)\n *     new Query().lean(false)\n *\n *     const docs = await Model.find().lean();\n *     docs[0] instanceof mongoose.Document; // false\n *\n * [Lean is great for high-performance, read-only cases](/docs/tutorials/lean.html),\n * especially when combined\n * with [cursors](/docs/queries.html#streaming).\n *\n * If you need virtuals, getters/setters, or defaults with `lean()`, you need\n * to use a plugin. See:\n *\n * - [mongoose-lean-virtuals](https://plugins.mongoosejs.io/plugins/lean-virtuals)\n * - [mongoose-lean-getters](https://plugins.mongoosejs.io/plugins/lean-getters)\n * - [mongoose-lean-defaults](https://www.npmjs.com/package/mongoose-lean-defaults)\n *\n * @param {Boolean|Object} bool defaults to true\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.lean = function (v) {\n  this._mongooseOptions.lean = arguments.length ? v : true;\n  return this;\n};\n\n/**\n * Adds a `$set` to this query's update without changing the operation.\n * This is useful for query middleware so you can add an update regardless\n * of whether you use `updateOne()`, `updateMany()`, `findOneAndUpdate()`, etc.\n *\n * ####Example:\n *\n *     // Updates `{ $set: { updatedAt: new Date() } }`\n *     new Query().updateOne({}, {}).set('updatedAt', new Date());\n *     new Query().updateMany({}, {}).set({ updatedAt: new Date() });\n *\n * @param {String|Object} path path or object of key/value pairs to set\n * @param {Any} [val] the value to set\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.set = function (path, val) {\n  if (typeof path === 'object') {\n    const keys = Object.keys(path);\n    for (const key of keys) {\n      this.set(key, path[key]);\n    }\n    return this;\n  }\n  this._update = this._update || {};\n  this._update.$set = this._update.$set || {};\n  this._update.$set[path] = val;\n  return this;\n};\n\n/**\n * For update operations, returns the value of a path in the update's `$set`.\n * Useful for writing getters/setters that can work with both update operations\n * and `save()`.\n *\n * ####Example:\n *\n *     const query = Model.updateOne({}, { $set: { name: 'Jean-Luc Picard' } });\n *     query.get('name'); // 'Jean-Luc Picard'\n *\n * @param {String|Object} path path or object of key/value pairs to get\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.get = function get(path) {\n  const update = this._update;\n  if (update == null) {\n    return void 0;\n  }\n  const $set = update.$set;\n  if ($set == null) {\n    return update[path];\n  }\n  if (utils.hasUserDefinedProperty(update, path)) {\n    return update[path];\n  }\n  if (utils.hasUserDefinedProperty($set, path)) {\n    return $set[path];\n  }\n  return void 0;\n};\n\n/**\n * Gets/sets the error flag on this query. If this flag is not null or\n * undefined, the `exec()` promise will reject without executing.\n *\n * ####Example:\n *\n *     Query().error(); // Get current error value\n *     Query().error(null); // Unset the current error\n *     Query().error(new Error('test')); // `exec()` will resolve with test\n *     Schema.pre('find', function() {\n *       if (!this.getQuery().userId) {\n *         this.error(new Error('Not allowed to query without setting userId'));\n *       }\n *     });\n *\n * Note that query casting runs **after** hooks, so cast errors will override\n * custom errors.\n *\n * ####Example:\n *     const TestSchema = new Schema({ num: Number });\n *     const TestModel = db.model('Test', TestSchema);\n *     TestModel.find({ num: 'not a number' }).error(new Error('woops')).exec(function(error) {\n *       // `error` will be a cast error because `num` failed to cast\n *     });\n *\n * @param {Error|null} err if set, `exec()` will fail fast before sending the query to MongoDB\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.error = function error(err) {\n  if (arguments.length === 0) {\n    return this._error;\n  }\n  this._error = err;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._unsetCastError = function _unsetCastError() {\n  if (this._error != null && !(this._error instanceof CastError)) {\n    return;\n  }\n  return this.error(null);\n};\n\n/**\n * Getter/setter around the current mongoose-specific options for this query\n * Below are the current Mongoose-specific options.\n *\n * - `populate`: an array representing what paths will be populated. Should have one entry for each call to [`Query.prototype.populate()`](/docs/api.html#query_Query-populate)\n * - `lean`: if truthy, Mongoose will not [hydrate](/docs/api.html#model_Model.hydrate) any documents that are returned from this query. See [`Query.prototype.lean()`](/docs/api.html#query_Query-lean) for more information.\n * - `strict`: controls how Mongoose handles keys that aren't in the schema for updates. This option is `true` by default, which means Mongoose will silently strip any paths in the update that aren't in the schema. See the [`strict` mode docs](/docs/guide.html#strict) for more information.\n * - `strictQuery`: controls how Mongoose handles keys that aren't in the schema for the query `filter`. This option is `false` by default for backwards compatibility, which means Mongoose will allow `Model.find({ foo: 'bar' })` even if `foo` is not in the schema. See the [`strictQuery` docs](/docs/guide.html#strictQuery) for more information.\n * - `useFindAndModify`: used to work around the [`findAndModify()` deprecation warning](/docs/deprecations.html#findandmodify)\n * - `omitUndefined`: delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * - `nearSphere`: use `$nearSphere` instead of `near()`. See the [`Query.prototype.nearSphere()` docs](/docs/api.html#query_Query-nearSphere)\n *\n * Mongoose maintains a separate object for internal options because\n * Mongoose sends `Query.prototype.options` to the MongoDB server, and the\n * above options are not relevant for the MongoDB server.\n *\n * @param {Object} options if specified, overwrites the current options\n * @return {Object} the options\n * @api public\n */\n\nQuery.prototype.mongooseOptions = function (v) {\n  if (arguments.length > 0) {\n    this._mongooseOptions = v;\n  }\n  return this._mongooseOptions;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._castConditions = function () {\n  try {\n    this.cast(this.model);\n    this._unsetCastError();\n  } catch (err) {\n    this.error(err);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _castArrayFilters(query) {\n  try {\n    castArrayFilters(query);\n  } catch (err) {\n    query.error(err);\n  }\n}\n\n/**\n * Thunk around find()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._find = wrapThunk(function (callback) {\n  this._castConditions();\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n  callback = _wrapThunkCallback(this, callback);\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  const fields = this._fieldsForExec();\n  const mongooseOptions = this._mongooseOptions;\n  const _this = this;\n  const userProvidedFields = _this._userProvidedFields || {};\n  applyGlobalMaxTimeMS(this.options, this.model);\n\n  // Separate options to pass down to `completeMany()` in case we need to\n  // set a session on the document\n  const completeManyOptions = Object.assign({}, {\n    session: get(this, 'options.session', null)\n  });\n  const cb = (err, docs) => {\n    if (err) {\n      return callback(err);\n    }\n    if (docs.length === 0) {\n      return callback(null, docs);\n    }\n    if (this.options.explain) {\n      return callback(null, docs);\n    }\n    if (!mongooseOptions.populate) {\n      return mongooseOptions.lean ? callback(null, docs) : completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions, callback);\n    }\n    const pop = helpers.preparePopulationOptionsMQ(_this, mongooseOptions);\n    completeManyOptions.populated = pop;\n    _this.model.populate(docs, pop, function (err, docs) {\n      if (err) return callback(err);\n      return mongooseOptions.lean ? callback(null, docs) : completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions, callback);\n    });\n  };\n  const options = this._optionsForExec();\n  options.projection = this._fieldsForExec();\n  const filter = this._conditions;\n  this._collection.find(filter, options, cb);\n  return null;\n});\n\n/**\n * Find all documents that match `selector`. The result will be an array of documents.\n *\n * If there are too many documents in the result to fit in memory, use\n * [`Query.prototype.cursor()`](api.html#query_Query-cursor)\n *\n * ####Example\n *\n *     // Using async/await\n *     const arr = await Movie.find({ year: { $gte: 1980, $lte: 1989 } });\n *\n *     // Using callbacks\n *     Movie.find({ year: { $gte: 1980, $lte: 1989 } }, function(err, arr) {});\n *\n * @param {Object|ObjectId} [filter] mongodb selector. If not specified, returns all documents.\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function (conditions, callback) {\n  this.op = 'find';\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n  conditions = utils.toObject(conditions);\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'find'));\n  }\n\n  // if we don't have a callback, then just return the query object\n  if (!callback) {\n    return Query.base.find.call(this);\n  }\n  this.exec(callback);\n  return this;\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function (source) {\n  if (!source) {\n    return this;\n  }\n  const opts = {\n    overwrite: true\n  };\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions, opts);\n    }\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields, opts);\n    }\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options, opts);\n    }\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n    utils.merge(this._mongooseOptions, source._mongooseOptions);\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source, opts);\n  return this;\n};\n\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\nQuery.prototype.collation = function (value) {\n  if (this.options == null) {\n    this.options = {};\n  }\n  this.options.collation = value;\n  return this;\n};\n\n/**\n * Hydrate a single doc from `findOne()`, `findOneAndUpdate()`, etc.\n *\n * @api private\n */\n\nQuery.prototype._completeOne = function (doc, res, callback) {\n  if (!doc && !this.options.rawResult) {\n    return callback(null, null);\n  }\n  const model = this.model;\n  const projection = utils.clone(this._fields);\n  const userProvidedFields = this._userProvidedFields || {};\n  // `populate`, `lean`\n  const mongooseOptions = this._mongooseOptions;\n  // `rawResult`\n  const options = this.options;\n  if (options.explain) {\n    return callback(null, doc);\n  }\n  if (!mongooseOptions.populate) {\n    return mongooseOptions.lean ? _completeOneLean(doc, res, options, callback) : completeOne(model, doc, res, options, projection, userProvidedFields, null, callback);\n  }\n  const pop = helpers.preparePopulationOptionsMQ(this, this._mongooseOptions);\n  model.populate(doc, pop, (err, doc) => {\n    if (err) {\n      return callback(err);\n    }\n    return mongooseOptions.lean ? _completeOneLean(doc, res, options, callback) : completeOne(model, doc, res, options, projection, userProvidedFields, pop, callback);\n  });\n};\n\n/**\n * Thunk around findOne()\n *\n * @param {Function} [callback]\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @api private\n */\n\nQuery.prototype._findOne = wrapThunk(function (callback) {\n  this._castConditions();\n  if (this.error()) {\n    callback(this.error());\n    return null;\n  }\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  applyGlobalMaxTimeMS(this.options, this.model);\n\n  // don't pass in the conditions because we already merged them in\n  Query.base.findOne.call(this, {}, (err, doc) => {\n    if (err) {\n      callback(err);\n      return null;\n    }\n    this._completeOne(doc, null, _wrapThunkCallback(this, callback));\n  });\n});\n\n/**\n * Declares the query a findOne operation. When executed, the first found document is passed to the callback.\n *\n * Passing a `callback` executes the query. The result of the query is a single document.\n *\n * * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `Model.findById()`\n * instead.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * ####Example\n *\n *     const query  = Kitten.where({ color: 'white' });\n *     query.findOne(function (err, kitten) {\n *       if (err) return handleError(err);\n *       if (kitten) {\n *         // doc may be null if no document matched\n *       }\n *     });\n *\n * @param {Object} [filter] mongodb selector\n * @param {Object} [projection] optional fields to return\n * @param {Object} [options] see [`setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @see Query.select #query_Query-select\n * @api public\n */\n\nQuery.prototype.findOne = function (conditions, projection, options, callback) {\n  this.op = 'findOne';\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = null;\n    projection = null;\n    options = null;\n  } else if (typeof projection === 'function') {\n    callback = projection;\n    options = null;\n    projection = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  // make sure we don't send in the whole Document to merge()\n  conditions = utils.toObject(conditions);\n  if (options) {\n    this.setOptions(options);\n  }\n  if (projection) {\n    this.select(projection);\n  }\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'findOne'));\n  }\n  if (!callback) {\n    // already merged in the conditions, don't need to send them in.\n    return Query.base.findOne.call(this);\n  }\n  this.exec(callback);\n  return this;\n};\n\n/**\n * Thunk around count()\n *\n * @param {Function} [callback]\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api private\n */\n\nQuery.prototype._count = wrapThunk(function (callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    this.error(err);\n  }\n  if (this.error()) {\n    return callback(this.error());\n  }\n  applyGlobalMaxTimeMS(this.options, this.model);\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n  this._collection.count(conds, options, utils.tick(callback));\n});\n\n/**\n * Thunk around countDocuments()\n *\n * @param {Function} [callback]\n * @see countDocuments http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n * @api private\n */\n\nQuery.prototype._countDocuments = wrapThunk(function (callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    this.error(err);\n  }\n  if (this.error()) {\n    return callback(this.error());\n  }\n  applyGlobalMaxTimeMS(this.options, this.model);\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n  this._collection.collection.countDocuments(conds, options, utils.tick(callback));\n});\n\n/**\n * Thunk around estimatedDocumentCount()\n *\n * @param {Function} [callback]\n * @see estimatedDocumentCount http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount\n * @api private\n */\n\nQuery.prototype._estimatedDocumentCount = wrapThunk(function (callback) {\n  if (this.error()) {\n    return callback(this.error());\n  }\n  const options = this._optionsForExec();\n  this._collection.collection.estimatedDocumentCount(options, utils.tick(callback));\n});\n\n/**\n * Specifies this query as a `count` query.\n *\n * This method is deprecated. If you want to count the number of documents in\n * a collection, e.g. `count({})`, use the [`estimatedDocumentCount()` function](/docs/api.html#query_Query-estimatedDocumentCount)\n * instead. Otherwise, use the [`countDocuments()`](/docs/api.html#query_Query-countDocuments) function instead.\n *\n * Passing a `callback` executes the query.\n *\n * This function triggers the following middleware.\n *\n * - `count()`\n *\n * ####Example:\n *\n *     const countQuery = model.where({ 'color': 'black' }).count();\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @deprecated\n * @param {Object} [filter] count documents that match this object\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api public\n */\n\nQuery.prototype.count = function (filter, callback) {\n  this.op = 'count';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = undefined;\n  }\n  filter = utils.toObject(filter);\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n  }\n  if (!callback) {\n    return this;\n  }\n  this.exec(callback);\n  return this;\n};\n\n/**\n * Specifies this query as a `estimatedDocumentCount()` query. Faster than\n * using `countDocuments()` for large collections because\n * `estimatedDocumentCount()` uses collection metadata rather than scanning\n * the entire collection.\n *\n * `estimatedDocumentCount()` does **not** accept a filter. `Model.find({ foo: bar }).estimatedDocumentCount()`\n * is equivalent to `Model.find().estimatedDocumentCount()`\n *\n * This function triggers the following middleware.\n *\n * - `estimatedDocumentCount()`\n *\n * ####Example:\n *\n *     await Model.find().estimatedDocumentCount();\n *\n * @param {Object} [options] passed transparently to the [MongoDB driver](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount)\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see estimatedDocumentCount http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount\n * @api public\n */\n\nQuery.prototype.estimatedDocumentCount = function (options, callback) {\n  this.op = 'estimatedDocumentCount';\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  if (typeof options === 'object' && options != null) {\n    this.setOptions(options);\n  }\n  if (!callback) {\n    return this;\n  }\n  this.exec(callback);\n  return this;\n};\n\n/**\n * Specifies this query as a `countDocuments()` query. Behaves like `count()`,\n * except it always does a full collection scan when passed an empty filter `{}`.\n *\n * There are also minor differences in how `countDocuments()` handles\n * [`$where` and a couple geospatial operators](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments).\n * versus `count()`.\n *\n * Passing a `callback` executes the query.\n *\n * This function triggers the following middleware.\n *\n * - `countDocuments()`\n *\n * ####Example:\n *\n *     const countQuery = model.where({ 'color': 'black' }).countDocuments();\n *\n *     query.countDocuments({ color: 'black' }).count(callback);\n *\n *     query.countDocuments({ color: 'black' }, callback);\n *\n *     query.where('color', 'black').countDocuments(function(err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     });\n *\n * The `countDocuments()` function is similar to `count()`, but there are a\n * [few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments).\n * Below are the operators that `count()` supports but `countDocuments()` does not,\n * and the suggested replacement:\n *\n * - `$where`: [`$expr`](https://docs.mongodb.com/manual/reference/operator/query/expr/)\n * - `$near`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$center`](https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center)\n * - `$nearSphere`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere)\n *\n * @param {Object} [filter] mongodb selector\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see countDocuments http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n * @api public\n */\n\nQuery.prototype.countDocuments = function (conditions, callback) {\n  this.op = 'countDocuments';\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = undefined;\n  }\n  conditions = utils.toObject(conditions);\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n  if (!callback) {\n    return this;\n  }\n  this.exec(callback);\n  return this;\n};\n\n/**\n * Thunk around distinct()\n *\n * @param {Function} [callback]\n * @see distinct http://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api private\n */\n\nQuery.prototype.__distinct = wrapThunk(function __distinct(callback) {\n  this._castConditions();\n  if (this.error()) {\n    callback(this.error());\n    return null;\n  }\n  applyGlobalMaxTimeMS(this.options, this.model);\n  const options = this._optionsForExec();\n\n  // don't pass in the conditions because we already merged them in\n  this._collection.collection.distinct(this._distinct, this._conditions, options, callback);\n});\n\n/**\n * Declares or executes a distinct() operation.\n *\n * Passing a `callback` executes the query.\n *\n * This function does not trigger any middleware.\n *\n * ####Example\n *\n *     distinct(field, conditions, callback)\n *     distinct(field, conditions)\n *     distinct(field, callback)\n *     distinct(field)\n *     distinct(callback)\n *     distinct()\n *\n * @param {String} [field]\n * @param {Object|Query} [filter]\n * @param {Function} [callback] optional params are (error, arr)\n * @return {Query} this\n * @see distinct http://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api public\n */\n\nQuery.prototype.distinct = function (field, conditions, callback) {\n  this.op = 'distinct';\n  if (!callback) {\n    if (typeof conditions === 'function') {\n      callback = conditions;\n      conditions = undefined;\n    } else if (typeof field === 'function') {\n      callback = field;\n      field = undefined;\n      conditions = undefined;\n    }\n  }\n  conditions = utils.toObject(conditions);\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'distinct'));\n  }\n  if (field != null) {\n    this._distinct = field;\n  }\n  if (callback != null) {\n    this.exec(callback);\n  }\n  return this;\n};\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The\n * sort order of each path is ascending unless the path name is prefixed with `-`\n * which will be treated as descending.\n *\n * ####Example\n *\n *     // sort by \"field\" ascending and \"test\" descending\n *     query.sort({ field: 'asc', test: -1 });\n *\n *     // equivalent\n *     query.sort('field -test');\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see cursor.sort http://docs.mongodb.org/manual/reference/method/cursor.sort/\n * @api public\n */\n\nQuery.prototype.sort = function (arg) {\n  if (arguments.length > 1) {\n    throw new Error('sort() only takes 1 Argument');\n  }\n  return Query.base.sort.call(this, arg);\n};\n\n/**\n * Declare and/or execute this query as a remove() operation. `remove()` is\n * deprecated, you should use [`deleteOne()`](#query_Query-deleteOne)\n * or [`deleteMany()`](#query_Query-deleteMany) instead.\n *\n * This function does not trigger any middleware\n *\n * ####Example\n *\n *     Character.remove({ name: /Stark/ }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#remove()` function](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * ####Example\n *\n *     const res = await Character.remove({ name: /Stark/ });\n *     // Number of docs deleted\n *     res.deletedCount;\n *\n * ####Note\n *\n * Calling `remove()` creates a [Mongoose query](./queries.html), and a query\n * does not execute until you either pass a callback, call [`Query#then()`](#query_Query-then),\n * or call [`Query#exec()`](#query_Query-exec).\n *\n *     // not executed\n *     const query = Character.remove({ name: /Stark/ });\n *\n *     // executed\n *     Character.remove({ name: /Stark/ }, callback);\n *     Character.remove({ name: /Stark/ }).remove(callback);\n *\n *     // executed without a callback\n *     Character.exec();\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @deprecated\n * @see deleteWriteOpResult http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB driver remove http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove\n * @api public\n */\n\nQuery.prototype.remove = function (filter, callback) {\n  this.op = 'remove';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n  }\n  filter = utils.toObject(filter);\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'remove'));\n  }\n  if (!callback) {\n    return Query.base.remove.call(this);\n  }\n  this.exec(callback);\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._remove = wrapThunk(function (callback) {\n  this._castConditions();\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n  callback = _wrapThunkCallback(this, callback);\n  return Query.base.remove.call(this, helpers.handleDeleteWriteOpResult(callback));\n});\n\n/**\n * Declare and/or execute this query as a `deleteOne()` operation. Works like\n * remove, except it deletes at most one document regardless of the `single`\n * option.\n *\n * This function triggers `deleteOne` middleware.\n *\n * ####Example\n *\n *     await Character.deleteOne({ name: 'Eddard Stark' });\n *\n *     // Using callbacks:\n *     Character.deleteOne({ name: 'Eddard Stark' }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#deleteOne()` function](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteOne).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * ####Example\n *\n *     const res = await Character.deleteOne({ name: 'Eddard Stark' });\n *     // `1` if MongoDB deleted a doc, `0` if no docs matched the filter `{ name: ... }`\n *     res.deletedCount;\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @see deleteWriteOpResult http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB Driver deleteOne http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteOne\n * @api public\n */\n\nQuery.prototype.deleteOne = function (filter, options, callback) {\n  this.op = 'deleteOne';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else {\n    this.setOptions(options);\n  }\n  filter = utils.toObject(filter);\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteOne'));\n  }\n  if (!callback) {\n    return Query.base.deleteOne.call(this);\n  }\n  this.exec.call(this, callback);\n  return this;\n};\n\n/*!\n * Internal thunk for `deleteOne()`\n */\n\nQuery.prototype._deleteOne = wrapThunk(function (callback) {\n  this._castConditions();\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n  callback = _wrapThunkCallback(this, callback);\n  return Query.base.deleteOne.call(this, helpers.handleDeleteWriteOpResult(callback));\n});\n\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Works like\n * remove, except it deletes _every_ document that matches `filter` in the\n * collection, regardless of the value of `single`.\n *\n * This function triggers `deleteMany` middleware.\n *\n * ####Example\n *\n *     await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });\n *\n *     // Using callbacks:\n *     Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#deleteMany()` function](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteMany).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * ####Example\n *\n *     const res = await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });\n *     // `0` if no docs matched the filter, number of docs deleted otherwise\n *     res.deletedCount;\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @see deleteWriteOpResult http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB Driver deleteMany http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteMany\n * @api public\n */\n\nQuery.prototype.deleteMany = function (filter, options, callback) {\n  this.op = 'deleteMany';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else {\n    this.setOptions(options);\n  }\n  filter = utils.toObject(filter);\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteMany'));\n  }\n  if (!callback) {\n    return Query.base.deleteMany.call(this);\n  }\n  this.exec.call(this, callback);\n  return this;\n};\n\n/*!\n * Internal thunk around `deleteMany()`\n */\n\nQuery.prototype._deleteMany = wrapThunk(function (callback) {\n  this._castConditions();\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n  callback = _wrapThunkCallback(this, callback);\n  return Query.base.deleteMany.call(this, helpers.handleDeleteWriteOpResult(callback));\n});\n\n/*!\n * hydrates a document\n *\n * @param {Model} model\n * @param {Document} doc\n * @param {Object} res 3rd parameter to callback\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n */\n\nfunction completeOne(model, doc, res, options, fields, userProvidedFields, pop, callback) {\n  const opts = pop ? {\n    populated: pop\n  } : undefined;\n  if (options.rawResult && doc == null) {\n    _init(null);\n    return null;\n  }\n  const casted = helpers.createModel(model, doc, fields, userProvidedFields, options);\n  try {\n    casted.init(doc, opts, _init);\n  } catch (error) {\n    _init(error);\n  }\n  function _init(err) {\n    if (err) {\n      return immediate(() => callback(err));\n    }\n    if (options.rawResult) {\n      if (doc && casted) {\n        if (options.session != null) {\n          casted.$session(options.session);\n        }\n        res.value = casted;\n      } else {\n        res.value = null;\n      }\n      return immediate(() => callback(null, res));\n    }\n    if (options.session != null) {\n      casted.$session(options.session);\n    }\n    immediate(() => callback(null, casted));\n  }\n}\n\n/*!\n * If the model is a discriminator type and not root, then add the key & value to the criteria.\n */\n\nfunction prepareDiscriminatorCriteria(query) {\n  if (!query || !query.model || !query.model.schema) {\n    return;\n  }\n  const schema = query.model.schema;\n  if (schema && schema.discriminatorMapping && !schema.discriminatorMapping.isRoot) {\n    query._conditions[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;\n  }\n}\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found\n * document (if any) to the callback. The query executes if\n * `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * ####Available options\n *\n * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `fields`: {Object|String} - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `context` (string) if set to 'query' and `runValidators` is on, `this` will refer to the query in custom validator functions that update validation runs. Does nothing if `runValidators` is false.\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @method findOneAndUpdate\n * @memberOf Query\n * @instance\n * @param {Object|Query} [filter]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\n * @param {Function} [callback] optional params are (error, doc), _unless_ `rawResult` is used, in which case params are (error, writeOpResult)\n * @see Tutorial /docs/tutorials/findoneandupdate.html\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function (criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n  this._validate();\n  switch (arguments.length) {\n    case 3:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      if (typeof doc === 'function') {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      options = undefined;\n      break;\n    case 1:\n      if (typeof criteria === 'function') {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n  }\n  if (mquery.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n  options = options ? utils.clone(options) : {};\n  if (options.projection) {\n    this.select(options.projection);\n    delete options.projection;\n  }\n  if (options.fields) {\n    this.select(options.fields);\n    delete options.fields;\n  }\n  const returnOriginal = get(this, 'model.base.options.returnOriginal');\n  if (options.new == null && options.returnDocument == null && options.returnOriginal == null && returnOriginal != null) {\n    options.returnOriginal = returnOriginal;\n  }\n  this.setOptions(options);\n  if (!callback) {\n    return this;\n  }\n  this.exec(callback);\n  return this;\n};\n\n/*!\n * Thunk around findOneAndUpdate()\n *\n * @param {Function} [callback]\n * @api private\n */\n\nQuery.prototype._findOneAndUpdate = wrapThunk(function (callback) {\n  if (this.error() != null) {\n    return callback(this.error());\n  }\n  this._findAndModify('update', callback);\n});\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to\n * the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndRemove()`\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *\n * @method findOneAndRemove\n * @memberOf Query\n * @instance\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = function (conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n  this._validate();\n  switch (arguments.length) {\n    case 2:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 1:\n      if (typeof conditions === 'function') {\n        callback = conditions;\n        conditions = undefined;\n        options = undefined;\n      }\n      break;\n  }\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n  options && this.setOptions(options);\n  if (!callback) {\n    return this;\n  }\n  this.exec(callback);\n  return this;\n};\n\n/**\n * Issues a MongoDB [findOneAndDelete](https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndDelete/) command.\n *\n * Finds a matching document, removes it, and passes the found document (if any)\n * to the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * This function differs slightly from `Model.findOneAndRemove()` in that\n * `findOneAndRemove()` becomes a [MongoDB `findAndModify()` command](https://docs.mongodb.com/manual/reference/method/db.collection.findAndModify/),\n * as opposed to a `findOneAndDelete()` command. For most mongoose use cases,\n * this distinction is purely pedantic. You should use `findOneAndDelete()`\n * unless you have a good reason not to.\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     A.where().findOneAndDelete(conditions, options, callback) // executes\n *     A.where().findOneAndDelete(conditions, options)  // return Query\n *     A.where().findOneAndDelete(conditions, callback) // executes\n *     A.where().findOneAndDelete(conditions) // returns Query\n *     A.where().findOneAndDelete(callback)   // executes\n *     A.where().findOneAndDelete()           // returns Query\n *\n * @method findOneAndDelete\n * @memberOf Query\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndDelete = function (conditions, options, callback) {\n  this.op = 'findOneAndDelete';\n  this._validate();\n  switch (arguments.length) {\n    case 2:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 1:\n      if (typeof conditions === 'function') {\n        callback = conditions;\n        conditions = undefined;\n        options = undefined;\n      }\n      break;\n  }\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n  options && this.setOptions(options);\n  if (!callback) {\n    return this;\n  }\n  this.exec(callback);\n  return this;\n};\n\n/*!\n * Thunk around findOneAndDelete()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndDelete = wrapThunk(function (callback) {\n  this._castConditions();\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n  const filter = this._conditions;\n  const options = this._optionsForExec();\n  let fields = null;\n  if (this._fields != null) {\n    options.projection = this._castFields(utils.clone(this._fields));\n    fields = options.projection;\n    if (fields instanceof Error) {\n      callback(fields);\n      return null;\n    }\n  }\n  this._collection.collection.findOneAndDelete(filter, options, _wrapThunkCallback(this, (err, res) => {\n    if (err) {\n      return callback(err);\n    }\n    const doc = res.value;\n    return this._completeOne(doc, res, callback);\n  }));\n});\n\n/**\n * Issues a MongoDB [findOneAndReplace](https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndReplace/) command.\n *\n * Finds a matching document, removes it, and passes the found document (if any)\n * to the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndReplace()`\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     A.where().findOneAndReplace(filter, replacement, options, callback); // executes\n *     A.where().findOneAndReplace(filter, replacement, options); // return Query\n *     A.where().findOneAndReplace(filter, replacement, callback); // executes\n *     A.where().findOneAndReplace(filter); // returns Query\n *     A.where().findOneAndReplace(callback); // executes\n *     A.where().findOneAndReplace(); // returns Query\n *\n * @method findOneAndReplace\n * @memberOf Query\n * @param {Object} [filter]\n * @param {Object} [replacement]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndReplace = function (filter, replacement, options, callback) {\n  this.op = 'findOneAndReplace';\n  this._validate();\n  switch (arguments.length) {\n    case 3:\n      if (typeof options === 'function') {\n        callback = options;\n        options = void 0;\n      }\n      break;\n    case 2:\n      if (typeof replacement === 'function') {\n        callback = replacement;\n        replacement = void 0;\n      }\n      break;\n    case 1:\n      if (typeof filter === 'function') {\n        callback = filter;\n        filter = void 0;\n        replacement = void 0;\n        options = void 0;\n      }\n      break;\n  }\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n  }\n  if (replacement != null) {\n    if (hasDollarKeys(replacement)) {\n      throw new Error('The replacement document must not contain atomic operators.');\n    }\n    this._mergeUpdate(replacement);\n  }\n  options = options || {};\n  const returnOriginal = get(this, 'model.base.options.returnOriginal');\n  if (options.new == null && options.returnDocument == null && options.returnOriginal == null && returnOriginal != null) {\n    options.returnOriginal = returnOriginal;\n  }\n  this.setOptions(options);\n  this.setOptions({\n    overwrite: true\n  });\n  if (!callback) {\n    return this;\n  }\n  this.exec(callback);\n  return this;\n};\n\n/*!\n * Thunk around findOneAndReplace()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndReplace = wrapThunk(function (callback) {\n  this._castConditions();\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n  const filter = this._conditions;\n  const options = this._optionsForExec();\n  convertNewToReturnDocument(options);\n  let fields = null;\n  let castedDoc = new this.model(this._update, null, true);\n  this._update = castedDoc;\n  this._applyPaths();\n  if (this._fields != null) {\n    options.projection = this._castFields(utils.clone(this._fields));\n    fields = options.projection;\n    if (fields instanceof Error) {\n      callback(fields);\n      return null;\n    }\n  }\n  castedDoc.validate(err => {\n    if (err != null) {\n      return callback(err);\n    }\n    if (castedDoc.toBSON) {\n      castedDoc = castedDoc.toBSON();\n    }\n    this._collection.collection.findOneAndReplace(filter, castedDoc, options, _wrapThunkCallback(this, (err, res) => {\n      if (err) {\n        return callback(err);\n      }\n      const doc = res.value;\n      return this._completeOne(doc, res, callback);\n    }));\n  });\n});\n\n/*!\n * Support the `new` option as an alternative to `returnOriginal` for backwards\n * compat.\n */\n\nfunction convertNewToReturnDocument(options) {\n  if ('new' in options) {\n    options.returnDocument = options['new'] ? 'after' : 'before';\n    delete options['new'];\n  }\n  if ('returnOriginal' in options) {\n    options.returnDocument = options['returnOriginal'] ? 'before' : 'after';\n    delete options['returnOriginal'];\n  }\n}\n\n/*!\n * Thunk around findOneAndRemove()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndRemove = wrapThunk(function (callback) {\n  if (this.error() != null) {\n    callback(this.error());\n    return;\n  }\n  this._findAndModify('remove', callback);\n});\n\n/*!\n * Get options from query opts, falling back to the base mongoose object.\n */\n\nfunction _getOption(query, option, def) {\n  const opts = query._optionsForExec(query.model);\n  if (option in opts) {\n    return opts[option];\n  }\n  if (option in query.model.base.options) {\n    return query.model.base.options[option];\n  }\n  return def;\n}\n\n/*!\n * Override mquery.prototype._findAndModify to provide casting etc.\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype._findAndModify = function (type, callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('Expected callback in _findAndModify');\n  }\n  const model = this.model;\n  const schema = model.schema;\n  const _this = this;\n  let fields;\n  const castedQuery = castQuery(this);\n  if (castedQuery instanceof Error) {\n    return callback(castedQuery);\n  }\n  _castArrayFilters(this);\n  const opts = this._optionsForExec(model);\n  if ('strict' in opts) {\n    this._mongooseOptions.strict = opts.strict;\n  }\n  const isOverwriting = this.options.overwrite && !hasDollarKeys(this._update);\n  if (isOverwriting) {\n    this._update = new this.model(this._update, null, true);\n  }\n  if (type === 'remove') {\n    opts.remove = true;\n  } else {\n    if (!('new' in opts) && !('returnOriginal' in opts) && !('returnDocument' in opts)) {\n      opts.new = false;\n    }\n    if (!('upsert' in opts)) {\n      opts.upsert = false;\n    }\n    if (opts.upsert || opts['new']) {\n      opts.remove = false;\n    }\n    if (!isOverwriting) {\n      this._update = castDoc(this, opts.overwrite);\n      const _opts = Object.assign({}, opts, {\n        setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\n      });\n      this._update = setDefaultsOnInsert(this._conditions, schema, this._update, _opts);\n      if (!this._update || Object.keys(this._update).length === 0) {\n        if (opts.upsert) {\n          // still need to do the upsert to empty doc\n          const doc = utils.clone(castedQuery);\n          delete doc._id;\n          this._update = {\n            $set: doc\n          };\n        } else {\n          this.findOne(callback);\n          return this;\n        }\n      } else if (this._update instanceof Error) {\n        return callback(this._update);\n      } else {\n        // In order to make MongoDB 2.6 happy (see\n        // https://jira.mongodb.org/browse/SERVER-12266 and related issues)\n        // if we have an actual update document but $set is empty, junk the $set.\n        if (this._update.$set && Object.keys(this._update.$set).length === 0) {\n          delete this._update.$set;\n        }\n      }\n    }\n    if (Array.isArray(opts.arrayFilters)) {\n      opts.arrayFilters = removeUnusedArrayFilters(this._update, opts.arrayFilters);\n    }\n  }\n  this._applyPaths();\n  const options = this._mongooseOptions;\n  if (this._fields) {\n    fields = utils.clone(this._fields);\n    opts.projection = this._castFields(fields);\n    if (opts.projection instanceof Error) {\n      return callback(opts.projection);\n    }\n  }\n  if (opts.sort) convertSortToArray(opts);\n  const cb = function (err, doc, res) {\n    if (err) {\n      return callback(err);\n    }\n    _this._completeOne(doc, res, callback);\n  };\n  let useFindAndModify = true;\n  const runValidators = _getOption(this, 'runValidators', false);\n  const base = _this.model && _this.model.base;\n  const conn = get(model, 'collection.conn', {});\n  if ('useFindAndModify' in base.options) {\n    useFindAndModify = base.get('useFindAndModify');\n  }\n  if ('useFindAndModify' in conn.config) {\n    useFindAndModify = conn.config.useFindAndModify;\n  }\n  if ('useFindAndModify' in options) {\n    useFindAndModify = options.useFindAndModify;\n  }\n  if (useFindAndModify === false) {\n    // Bypass mquery\n    const collection = _this._collection.collection;\n    convertNewToReturnDocument(opts);\n    if (type === 'remove') {\n      collection.findOneAndDelete(castedQuery, opts, _wrapThunkCallback(_this, function (error, res) {\n        return cb(error, res ? res.value : res, res);\n      }));\n      return this;\n    }\n\n    // honors legacy overwrite option for backward compatibility\n    const updateMethod = isOverwriting ? 'findOneAndReplace' : 'findOneAndUpdate';\n    if (runValidators) {\n      this.validate(this._update, opts, isOverwriting, error => {\n        if (error) {\n          return callback(error);\n        }\n        if (this._update && this._update.toBSON) {\n          this._update = this._update.toBSON();\n        }\n        collection[updateMethod](castedQuery, this._update, opts, _wrapThunkCallback(_this, function (error, res) {\n          return cb(error, res ? res.value : res, res);\n        }));\n      });\n    } else {\n      if (this._update && this._update.toBSON) {\n        this._update = this._update.toBSON();\n      }\n      collection[updateMethod](castedQuery, this._update, opts, _wrapThunkCallback(_this, function (error, res) {\n        return cb(error, res ? res.value : res, res);\n      }));\n    }\n    return this;\n  }\n  if (runValidators) {\n    this.validate(this._update, opts, isOverwriting, function (error) {\n      if (error) {\n        return callback(error);\n      }\n      _legacyFindAndModify.call(_this, castedQuery, _this._update, opts, cb);\n    });\n  } else {\n    _legacyFindAndModify.call(_this, castedQuery, _this._update, opts, cb);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _completeOneLean(doc, res, opts, callback) {\n  if (opts.rawResult) {\n    return callback(null, res);\n  }\n  return callback(null, doc);\n}\n\n/*!\n * ignore\n */\n\nconst _legacyFindAndModify = util.deprecate(function (filter, update, opts, cb) {\n  if (update && update.toBSON) {\n    update = update.toBSON();\n  }\n  const collection = this._collection;\n  const sort = opts != null && Array.isArray(opts.sort) ? opts.sort : [];\n  const _cb = _wrapThunkCallback(this, function (error, res) {\n    return cb(error, res ? res.value : res, res);\n  });\n  collection.collection._findAndModify(filter, sort, update, opts, _cb);\n}, 'Mongoose: `findOneAndUpdate()` and `findOneAndDelete()` without the ' + '`useFindAndModify` option set to false are deprecated. See: ' + 'https://mongoosejs.com/docs/5.x/docs/deprecations.html#findandmodify');\n\n/*!\n * Override mquery.prototype._mergeUpdate to handle mongoose objects in\n * updates.\n *\n * @param {Object} doc\n * @api private\n */\n\nQuery.prototype._mergeUpdate = function (doc) {\n  if (doc == null || typeof doc === 'object' && Object.keys(doc).length === 0) {\n    return;\n  }\n  if (!this._update) {\n    this._update = Array.isArray(doc) ? [] : {};\n  }\n  if (doc instanceof Query) {\n    if (Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else if (Array.isArray(doc)) {\n    if (!Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    this._update = this._update.concat(doc);\n  } else {\n    if (Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    utils.mergeClone(this._update, doc);\n  }\n};\n\n/*!\n * The mongodb driver 1.3.23 only supports the nested array sort\n * syntax. We must convert it or sorting findAndModify will not work.\n */\n\nfunction convertSortToArray(opts) {\n  if (Array.isArray(opts.sort)) {\n    return;\n  }\n  if (!utils.isObject(opts.sort)) {\n    return;\n  }\n  const sort = [];\n  for (const key in opts.sort) {\n    if (utils.object.hasOwnProperty(opts.sort, key)) {\n      sort.push([key, opts.sort[key]]);\n    }\n  }\n  opts.sort = sort;\n}\n\n/*!\n * ignore\n */\n\nfunction _updateThunk(op, callback) {\n  this._castConditions();\n  _castArrayFilters(this);\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n  callback = _wrapThunkCallback(this, callback);\n  const oldCb = callback;\n  callback = function (error, result) {\n    oldCb(error, result ? result.result : {\n      ok: 0,\n      n: 0,\n      nModified: 0\n    });\n  };\n  const castedQuery = this._conditions;\n  const options = this._optionsForExec(this.model);\n  ++this._executionCount;\n  this._update = utils.clone(this._update, options);\n  const isOverwriting = this.options.overwrite && !hasDollarKeys(this._update);\n  if (isOverwriting) {\n    if (op === 'updateOne' || op === 'updateMany') {\n      return callback(new MongooseError('The MongoDB server disallows ' + 'overwriting documents using `' + op + '`. See: ' + 'https://mongoosejs.com/docs/deprecations.html#update'));\n    }\n    this._update = new this.model(this._update, null, true);\n  } else {\n    this._update = castDoc(this, options.overwrite);\n    if (this._update instanceof Error) {\n      callback(this._update);\n      return null;\n    }\n    if (this._update == null || Object.keys(this._update).length === 0) {\n      callback(null, 0);\n      return null;\n    }\n    const _opts = Object.assign({}, options, {\n      setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\n    });\n    this._update = setDefaultsOnInsert(this._conditions, this.model.schema, this._update, _opts);\n  }\n  if (Array.isArray(options.arrayFilters)) {\n    options.arrayFilters = removeUnusedArrayFilters(this._update, options.arrayFilters);\n  }\n  const runValidators = _getOption(this, 'runValidators', false);\n  if (runValidators) {\n    this.validate(this._update, options, isOverwriting, err => {\n      if (err) {\n        return callback(err);\n      }\n      if (this._update.toBSON) {\n        this._update = this._update.toBSON();\n      }\n      this._collection[op](castedQuery, this._update, options, callback);\n    });\n    return null;\n  }\n  if (this._update.toBSON) {\n    this._update = this._update.toBSON();\n  }\n  this._collection[op](castedQuery, this._update, options, callback);\n  return null;\n}\n\n/*!\n * Mongoose calls this function internally to validate the query if\n * `runValidators` is set\n *\n * @param {Object} castedDoc the update, after casting\n * @param {Object} options the options from `_optionsForExec()`\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype.validate = function validate(castedDoc, options, isOverwriting, callback) {\n  return promiseOrCallback(callback, cb => {\n    try {\n      if (isOverwriting) {\n        castedDoc.validate(cb);\n      } else {\n        updateValidators(this, this.model.schema, castedDoc, options, cb);\n      }\n    } catch (err) {\n      immediate(function () {\n        cb(err);\n      });\n    }\n  });\n};\n\n/*!\n * Internal thunk for .update()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._execUpdate = wrapThunk(function (callback) {\n  return _updateThunk.call(this, 'update', callback);\n});\n\n/*!\n * Internal thunk for .updateMany()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._updateMany = wrapThunk(function (callback) {\n  return _updateThunk.call(this, 'updateMany', callback);\n});\n\n/*!\n * Internal thunk for .updateOne()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._updateOne = wrapThunk(function (callback) {\n  return _updateThunk.call(this, 'updateOne', callback);\n});\n\n/*!\n * Internal thunk for .replaceOne()\n *\n * @param {Function} callback\n * @see Model.replaceOne #model_Model.replaceOne\n * @api private\n */\nQuery.prototype._replaceOne = wrapThunk(function (callback) {\n  return _updateThunk.call(this, 'replaceOne', callback);\n});\n\n/**\n * Declare and/or execute this query as an update() operation.\n *\n * _All paths passed that are not [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operations will become `$set` ops._\n *\n * This function triggers the following middleware.\n *\n * - `update()`\n *\n * ####Example\n *\n *     Model.where({ _id: id }).update({ title: 'words' })\n *\n *     // becomes\n *\n *     Model.where({ _id: id }).update({ $set: { title: 'words' }})\n *\n * ####Valid options:\n *\n *  - `upsert` (boolean) whether to create the doc if it doesn't match (false)\n *  - `multi` (boolean) whether multiple documents should be updated (false)\n *  - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n *  - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n *  - `strict` (boolean) overrides the `strict` option for this update\n *  - `overwrite` (boolean) disables update-only mode, allowing you to overwrite the doc (false)\n *  - `context` (string) if set to 'query' and `runValidators` is on, `this` will refer to the query in custom validator functions that update validation runs. Does nothing if `runValidators` is false.\n *  - `read`\n *  - `writeConcern`\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback, we must first call update() and then execute it by using the `exec()` method.\n *\n *     const q = Model.where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed\n *\n *     // keys that are not [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) ops become `$set`.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).exec();\n *\n *     // overwriting with empty docs\n *     const q = Model.where({ _id: id }).setOptions({ overwrite: true })\n *     q.update({ }, callback); // executes\n *\n *     // multi update with overwrite to empty doc\n *     const q = Model.where({ _id: id });\n *     q.setOptions({ multi: true, overwrite: true })\n *     q.update({ });\n *     q.update(callback); // executed\n *\n *     // multi updates\n *     Model.where()\n *          .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *\n *     // more multi updates\n *     Model.where()\n *          .setOptions({ multi: true })\n *          .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     Model.where({ email: 'address@example.com' })\n *          .update({ $inc: { counter: 1 }}, callback)\n *\n * API summary\n *\n *     update(filter, doc, options, cb) // executes\n *     update(filter, doc, options)\n *     update(filter, doc, cb) // executes\n *     update(filter, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes\n *     update()\n *\n * @param {Object} [filter]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.update = function (conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n  return _update(this, 'update', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as an updateMany() operation. Same as\n * `update()`, except MongoDB will update _all_ documents that match\n * `filter` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * ####Example:\n *     const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} [filter]\n * @param {Object|Array} [update] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.updateMany = function (conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n  return _update(this, 'updateMany', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as an updateOne() operation. Same as\n * `update()`, except it does not support the `multi` or `overwrite` options.\n *\n * - MongoDB will update _only_ the first document that matches `filter` regardless of the value of the `multi` option.\n * - Use `replaceOne()` if you want to overwrite an entire document rather than using [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operators like `$set`.\n *\n * **Note** updateOne will _not_ fire update middleware. Use `pre('updateOne')`\n * and `post('updateOne')` instead.\n *\n * ####Example:\n *     const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} [filter]\n * @param {Object|Array} [update] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.updateOne = function (conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n  return _update(this, 'updateOne', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as a replaceOne() operation. Same as\n * `update()`, except MongoDB will replace the existing document and will\n * not accept any [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operators (`$set`, etc.)\n *\n * **Note** replaceOne will _not_ fire update middleware. Use `pre('replaceOne')`\n * and `post('replaceOne')` instead.\n *\n * ####Example:\n *     const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} [filter]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.replaceOne = function (conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n  this.setOptions({\n    overwrite: true\n  });\n  return _update(this, 'replaceOne', conditions, doc, options, callback);\n};\n\n/*!\n * Internal helper for update, updateMany, updateOne, replaceOne\n */\n\nfunction _update(query, op, filter, doc, options, callback) {\n  // make sure we don't send in the whole Document to merge()\n  query.op = op;\n  filter = utils.toObject(filter);\n  doc = doc || {};\n\n  // strict is an option used in the update checking, make sure it gets set\n  if (options != null) {\n    if ('strict' in options) {\n      query._mongooseOptions.strict = options.strict;\n    }\n  }\n  if (!(filter instanceof Query) && filter != null && filter.toString() !== '[object Object]') {\n    query.error(new ObjectParameterError(filter, 'filter', op));\n  } else {\n    query.merge(filter);\n  }\n  if (utils.isObject(options)) {\n    query.setOptions(options);\n  }\n  query._mergeUpdate(doc);\n\n  // Hooks\n  if (callback) {\n    query.exec(callback);\n    return query;\n  }\n  return Query.base[op].call(query, filter, void 0, options, callback);\n}\n\n/**\n * Runs a function `fn` and treats the return value of `fn` as the new value\n * for the query to resolve to.\n *\n * Any functions you pass to `map()` will run **after** any post hooks.\n *\n * ####Example:\n *\n *     const res = await MyModel.findOne().map(res => {\n *       // Sets a `loadedAt` property on the doc that tells you the time the\n *       // document was loaded.\n *       return res == null ?\n *         res :\n *         Object.assign(res, { loadedAt: new Date() });\n *     });\n *\n * @method map\n * @memberOf Query\n * @instance\n * @param {Function} fn function to run to transform the query result\n * @return {Query} this\n */\n\nQuery.prototype.map = function (fn) {\n  this._transforms.push(fn);\n  return this;\n};\n\n/**\n * Make this query throw an error if no documents match the given `filter`.\n * This is handy for integrating with async/await, because `orFail()` saves you\n * an extra `if` statement to check if no document was found.\n *\n * ####Example:\n *\n *     // Throws if no doc returned\n *     await Model.findOne({ foo: 'bar' }).orFail();\n *\n *     // Throws if no document was updated\n *     await Model.updateOne({ foo: 'bar' }, { name: 'test' }).orFail();\n *\n *     // Throws \"No docs found!\" error if no docs match `{ foo: 'bar' }`\n *     await Model.find({ foo: 'bar' }).orFail(new Error('No docs found!'));\n *\n *     // Throws \"Not found\" error if no document was found\n *     await Model.findOneAndUpdate({ foo: 'bar' }, { name: 'test' }).\n *       orFail(() => Error('Not found'));\n *\n * @method orFail\n * @memberOf Query\n * @instance\n * @param {Function|Error} [err] optional error to throw if no docs match `filter`. If not specified, `orFail()` will throw a `DocumentNotFoundError`\n * @return {Query} this\n */\n\nQuery.prototype.orFail = function (err) {\n  this.map(res => {\n    switch (this.op) {\n      case 'find':\n        if (res.length === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOne':\n        if (res == null) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'update':\n      case 'updateMany':\n      case 'updateOne':\n        if (get(res, 'nModified') === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOneAndDelete':\n      case 'findOneAndRemove':\n        if (get(res, 'lastErrorObject.n') === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOneAndUpdate':\n      case 'findOneAndReplace':\n        if (get(res, 'lastErrorObject.updatedExisting') === false) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'deleteMany':\n      case 'deleteOne':\n      case 'remove':\n        if (res.n === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      default:\n        break;\n    }\n    return res;\n  });\n  return this;\n};\n\n/*!\n * Get the error to throw for `orFail()`\n */\n\nfunction _orFailError(err, query) {\n  if (typeof err === 'function') {\n    err = err.call(query);\n  }\n  if (err == null) {\n    err = new DocumentNotFoundError(query.getQuery(), query.model.modelName);\n  }\n  return err;\n}\n\n/**\n * Executes the query\n *\n * ####Examples:\n *\n *     const promise = query.exec();\n *     const promise = query.exec('update');\n *\n *     query.exec(callback);\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback] optional params depend on the function being called\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.exec = function exec(op, callback) {\n  const _this = this;\n  // Ensure that `exec()` is the first thing that shows up in\n  // the stack when cast errors happen.\n  const castError = new CastError();\n  if (typeof op === 'function') {\n    callback = op;\n    op = null;\n  } else if (typeof op === 'string') {\n    this.op = op;\n  }\n  callback = this.model.$handleCallbackError(callback);\n  return promiseOrCallback(callback, cb => {\n    cb = this.model.$wrapCallback(cb);\n    if (!_this.op) {\n      cb();\n      return;\n    }\n    this._hooks.execPre('exec', this, [], error => {\n      if (error != null) {\n        return cb(_cleanCastErrorStack(castError, error));\n      }\n      let thunk = '_' + this.op;\n      if (this.op === 'update') {\n        thunk = '_execUpdate';\n      } else if (this.op === 'distinct') {\n        thunk = '__distinct';\n      }\n      this[thunk].call(this, (error, res) => {\n        if (error) {\n          return cb(_cleanCastErrorStack(castError, error));\n        }\n        this._hooks.execPost('exec', this, [], {}, error => {\n          if (error) {\n            return cb(_cleanCastErrorStack(castError, error));\n          }\n          cb(null, res);\n        });\n      });\n    });\n  }, this.model.events);\n};\n\n/*!\n * ignore\n */\n\nfunction _cleanCastErrorStack(castError, error) {\n  if (error instanceof CastError) {\n    castError.copy(error);\n    return castError;\n  }\n  return error;\n}\n\n/*!\n * ignore\n */\n\nfunction _wrapThunkCallback(query, cb) {\n  return function (error, res) {\n    if (error != null) {\n      return cb(error);\n    }\n    for (const fn of query._transforms) {\n      try {\n        res = fn(res);\n      } catch (error) {\n        return cb(error);\n      }\n    }\n    return cb(null, res);\n  };\n}\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * More about [`then()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/then).\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = function (resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n * Like `.then()`, but only takes a rejection handler.\n *\n * More about [Promise `catch()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/catch).\n *\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.catch = function (reject) {\n  return this.exec().then(null, reject);\n};\n\n/**\n * Add pre [middleware](/docs/middleware.html) to this query instance. Doesn't affect\n * other queries.\n *\n * ####Example:\n *\n *     const q1 = Question.find({ answer: 42 });\n *     q1.pre(function middleware() {\n *       console.log(this.getFilter());\n *     });\n *     await q1.exec(); // Prints \"{ answer: 42 }\"\n *\n *     // Doesn't print anything, because `middleware()` is only\n *     // registered on `q1`.\n *     await Question.find({ answer: 42 });\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.pre = function (fn) {\n  this._hooks.pre('exec', fn);\n  return this;\n};\n\n/**\n * Add post [middleware](/docs/middleware.html) to this query instance. Doesn't affect\n * other queries.\n *\n * ####Example:\n *\n *     const q1 = Question.find({ answer: 42 });\n *     q1.post(function middleware() {\n *       console.log(this.getFilter());\n *     });\n *     await q1.exec(); // Prints \"{ answer: 42 }\"\n *\n *     // Doesn't print anything, because `middleware()` is only\n *     // registered on `q1`.\n *     await Question.find({ answer: 42 });\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.post = function (fn) {\n  this._hooks.post('exec', fn);\n  return this;\n};\n\n/*!\n * Casts obj for an update command.\n *\n * @param {Object} obj\n * @return {Object} obj after casting its values\n * @api private\n */\n\nQuery.prototype._castUpdate = function _castUpdate(obj, overwrite) {\n  let strict;\n  let schema = this.schema;\n  const discriminatorKey = schema.options.discriminatorKey;\n  const baseSchema = schema._baseSchema ? schema._baseSchema : schema;\n  if (this._mongooseOptions.overwriteDiscriminatorKey && obj[discriminatorKey] != null && baseSchema.discriminators) {\n    const _schema = baseSchema.discriminators[obj[discriminatorKey]];\n    if (_schema != null) {\n      schema = _schema;\n    }\n  }\n  if ('strict' in this._mongooseOptions) {\n    strict = this._mongooseOptions.strict;\n  } else if (this.schema && this.schema.options) {\n    strict = this.schema.options.strict;\n  } else {\n    strict = true;\n  }\n  let omitUndefined = false;\n  if ('omitUndefined' in this._mongooseOptions) {\n    omitUndefined = this._mongooseOptions.omitUndefined;\n  }\n  let useNestedStrict;\n  if ('useNestedStrict' in this.options) {\n    useNestedStrict = this.options.useNestedStrict;\n  }\n  let upsert;\n  if ('upsert' in this.options) {\n    upsert = this.options.upsert;\n  }\n  const filter = this._conditions;\n  if (schema != null && utils.hasUserDefinedProperty(filter, schema.options.discriminatorKey) && typeof filter[schema.options.discriminatorKey] !== 'object' && schema.discriminators != null) {\n    const discriminatorValue = filter[schema.options.discriminatorKey];\n    const byValue = getDiscriminatorByValue(this.model.discriminators, discriminatorValue);\n    schema = schema.discriminators[discriminatorValue] || byValue && byValue.schema || schema;\n  }\n  return castUpdate(schema, obj, {\n    overwrite: overwrite,\n    strict: strict,\n    omitUndefined,\n    useNestedStrict: useNestedStrict,\n    upsert: upsert,\n    arrayFilters: this.options.arrayFilters\n  }, this, this._conditions);\n};\n\n/*!\n * castQuery\n * @api private\n */\n\nfunction castQuery(query) {\n  try {\n    return query.cast(query.model);\n  } catch (err) {\n    return err;\n  }\n}\n\n/*!\n * castDoc\n * @api private\n */\n\nfunction castDoc(query, overwrite) {\n  try {\n    return query._castUpdate(query._update, overwrite);\n  } catch (err) {\n    return err;\n  }\n}\n\n/**\n * Specifies paths which should be populated with other documents.\n *\n * ####Example:\n *\n *     let book = await Book.findOne().populate('authors');\n *     book.title; // 'Node.js in Action'\n *     book.authors[0].name; // 'TJ Holowaychuk'\n *     book.authors[1].name; // 'Nathan Rajlich'\n *\n *     let books = await Book.find().populate({\n *       path: 'authors',\n *       // `match` and `sort` apply to the Author model,\n *       // not the Book model. These options do not affect\n *       // which documents are in `books`, just the order and\n *       // contents of each book document's `authors`.\n *       match: { name: new RegExp('.*h.*', 'i') },\n *       sort: { name: -1 }\n *     });\n *     books[0].title; // 'Node.js in Action'\n *     // Each book's `authors` are sorted by name, descending.\n *     books[0].authors[0].name; // 'TJ Holowaychuk'\n *     books[0].authors[1].name; // 'Marc Harter'\n *\n *     books[1].title; // 'Professional AngularJS'\n *     // Empty array, no authors' name has the letter 'h'\n *     books[1].authors; // []\n *\n * Paths are populated after the query executes and a response is received. A\n * separate query is then executed for each path specified for population. After\n * a response for each query has also been returned, the results are passed to\n * the callback.\n *\n * @param {Object|String} path either the path to populate or an object specifying all parameters\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @param {String} [options.path=null] The path to populate.\n * @param {boolean} [options.retainNullValues=false] by default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] if true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://docs.mongodb.com/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @see population ./populate.html\n * @see Query#select #query_Query-select\n * @see Model.populate #model_Model.populate\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.populate = function () {\n  // Bail when given no truthy arguments\n  if (!Array.from(arguments).some(Boolean)) {\n    return this;\n  }\n  const res = utils.populate.apply(null, arguments);\n\n  // Propagate readConcern and readPreference and lean from parent query,\n  // unless one already specified\n  if (this.options != null) {\n    const readConcern = this.options.readConcern;\n    const readPref = this.options.readPreference;\n    for (const populateOptions of res) {\n      if (readConcern != null && get(populateOptions, 'options.readConcern') == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.readConcern = readConcern;\n      }\n      if (readPref != null && get(populateOptions, 'options.readPreference') == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.readPreference = readPref;\n      }\n    }\n  }\n  const opts = this._mongooseOptions;\n  if (opts.lean != null) {\n    const lean = opts.lean;\n    for (const populateOptions of res) {\n      if (get(populateOptions, 'options.lean') == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.lean = lean;\n      }\n    }\n  }\n  if (!utils.isObject(opts.populate)) {\n    opts.populate = {};\n  }\n  const pop = opts.populate;\n  for (const populateOptions of res) {\n    const path = populateOptions.path;\n    if (pop[path] && pop[path].populate && populateOptions.populate) {\n      populateOptions.populate = pop[path].populate.concat(populateOptions.populate);\n    }\n    pop[populateOptions.path] = populateOptions;\n  }\n  return this;\n};\n\n/**\n * Gets a list of paths to be populated by this query\n *\n * ####Example:\n *      bookSchema.pre('findOne', function() {\n *        let keys = this.getPopulatedPaths(); // ['author']\n *      });\n *      ...\n *      Book.findOne({}).populate('author');\n *\n * ####Example:\n *      // Deep populate\n *      const q = L1.find().populate({\n *        path: 'level2',\n *        populate: { path: 'level3' }\n *      });\n *      q.getPopulatedPaths(); // ['level2', 'level2.level3']\n *\n * @return {Array} an array of strings representing populated paths\n * @api public\n */\n\nQuery.prototype.getPopulatedPaths = function getPopulatedPaths() {\n  const obj = this._mongooseOptions.populate || {};\n  const ret = Object.keys(obj);\n  for (const path of Object.keys(obj)) {\n    const pop = obj[path];\n    if (!Array.isArray(pop.populate)) {\n      continue;\n    }\n    _getPopulatedPaths(ret, pop.populate, path + '.');\n  }\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nfunction _getPopulatedPaths(list, arr, prefix) {\n  for (const pop of arr) {\n    list.push(prefix + pop.path);\n    if (!Array.isArray(pop.populate)) {\n      continue;\n    }\n    _getPopulatedPaths(list, pop.populate, prefix + pop.path + '.');\n  }\n}\n\n/**\n * Casts this query to the schema of `model`\n *\n * ####Note\n *\n * If `obj` is present, it is cast instead of this query.\n *\n * @param {Model} [model] the model to cast to. If not set, defaults to `this.model`\n * @param {Object} [obj]\n * @return {Object}\n * @api public\n */\n\nQuery.prototype.cast = function (model, obj) {\n  obj || (obj = this._conditions);\n  model = model || this.model;\n  const discriminatorKey = model.schema.options.discriminatorKey;\n  if (obj != null && obj.hasOwnProperty(discriminatorKey)) {\n    model = getDiscriminatorByValue(model.discriminators, obj[discriminatorKey]) || model;\n  }\n  try {\n    return cast(model.schema, obj, {\n      upsert: this.options && this.options.upsert,\n      strict: this.options && 'strict' in this.options ? this.options.strict : get(model, 'schema.options.strict', null),\n      strictQuery: this.options && this.options.strictQuery || get(model, 'schema.options.strictQuery', null)\n    }, this);\n  } catch (err) {\n    // CastError, assign model\n    if (typeof err.setModel === 'function') {\n      err.setModel(model);\n    }\n    throw err;\n  }\n};\n\n/**\n * Casts selected field arguments for field selection with mongo 2.2\n *\n *     query.select({ ids: { $elemMatch: { $in: [hexString] }})\n *\n * @param {Object} fields\n * @see https://github.com/Automattic/mongoose/issues/1091\n * @see http://docs.mongodb.org/manual/reference/projection/elemMatch/\n * @api private\n */\n\nQuery.prototype._castFields = function _castFields(fields) {\n  let selected, elemMatchKeys, keys, key, out, i;\n  if (fields) {\n    keys = Object.keys(fields);\n    elemMatchKeys = [];\n    i = keys.length;\n\n    // collect $elemMatch args\n    while (i--) {\n      key = keys[i];\n      if (fields[key].$elemMatch) {\n        selected || (selected = {});\n        selected[key] = fields[key];\n        elemMatchKeys.push(key);\n      }\n    }\n  }\n  if (selected) {\n    // they passed $elemMatch, cast em\n    try {\n      out = this.cast(this.model, selected);\n    } catch (err) {\n      return err;\n    }\n\n    // apply the casted field args\n    i = elemMatchKeys.length;\n    while (i--) {\n      key = elemMatchKeys[i];\n      fields[key] = out[key];\n    }\n  }\n  return fields;\n};\n\n/**\n * Applies schematype selected options to this query.\n * @api private\n */\n\nQuery.prototype._applyPaths = function applyPaths() {\n  this._fields = this._fields || {};\n  helpers.applyPaths(this._fields, this.model.schema);\n  let _selectPopulatedPaths = true;\n  if ('selectPopulatedPaths' in this.model.base.options) {\n    _selectPopulatedPaths = this.model.base.options.selectPopulatedPaths;\n  }\n  if ('selectPopulatedPaths' in this.model.schema.options) {\n    _selectPopulatedPaths = this.model.schema.options.selectPopulatedPaths;\n  }\n  if (_selectPopulatedPaths) {\n    selectPopulatedFields(this._fields, this._userProvidedFields, this._mongooseOptions.populate);\n  }\n};\n\n/**\n * Returns a wrapper around a [mongodb driver cursor](http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html).\n * A QueryCursor exposes a Streams3 interface, as well as a `.next()` function.\n *\n * The `.cursor()` function triggers pre find hooks, but **not** post find hooks.\n *\n * ####Example\n *\n *     // There are 2 ways to use a cursor. First, as a stream:\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       on('data', function(doc) { console.log(doc); }).\n *       on('end', function() { console.log('Done!'); });\n *\n *     // Or you can use `.next()` to manually get the next doc in the stream.\n *     // `.next()` returns a promise, so you can use promises or callbacks.\n *     const cursor = Thing.find({ name: /^hello/ }).cursor();\n *     cursor.next(function(error, doc) {\n *       console.log(doc);\n *     });\n *\n *     // Because `.next()` returns a promise, you can use co\n *     // to easily iterate through all documents without loading them\n *     // all into memory.\n *     co(function*() {\n *       const cursor = Thing.find({ name: /^hello/ }).cursor();\n *       for (let doc = yield cursor.next(); doc != null; doc = yield cursor.next()) {\n *         console.log(doc);\n *       }\n *     });\n *\n * ####Valid options\n *\n *   - `transform`: optional function which accepts a mongoose document. The return value of the function will be emitted on `data` and returned by `.next()`.\n *\n * @return {QueryCursor}\n * @param {Object} [options]\n * @see QueryCursor\n * @api public\n */\n\nQuery.prototype.cursor = function cursor(opts) {\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  this.setOptions({\n    projection: this._fieldsForExec()\n  });\n  if (opts) {\n    this.setOptions(opts);\n  }\n  const options = Object.assign({}, this._optionsForExec(), {\n    projection: this.projection()\n  });\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    return new QueryCursor(this, options)._markError(err);\n  }\n  return new QueryCursor(this, options);\n};\n\n// the rest of these are basically to support older Mongoose syntax with mquery\n\n/**\n * _DEPRECATED_ Alias of `maxScan`\n *\n * @deprecated\n * @see maxScan #query_Query-maxScan\n * @method maxscan\n * @memberOf Query\n * @instance\n */\n\nQuery.prototype.maxscan = Query.base.maxScan;\n\n/**\n * Sets the tailable option (for use with capped collections).\n *\n * ####Example\n *\n *     query.tailable() // true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} bool defaults to true\n * @param {Object} [opts] options to set\n * @param {Number} [opts.numberOfRetries] if cursor is exhausted, retry this many times before giving up\n * @param {Number} [opts.tailableRetryInterval] if cursor is exhausted, wait this many milliseconds before retrying\n * @see tailable http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/\n * @api public\n */\n\nQuery.prototype.tailable = function (val, opts) {\n  // we need to support the tailable({ awaitdata : true }) as well as the\n  // tailable(true, {awaitdata :true}) syntax that mquery does not support\n  if (val != null && typeof val.constructor === 'function' && val.constructor.name === 'Object') {\n    opts = val;\n    val = true;\n  }\n  if (val === undefined) {\n    val = true;\n  }\n  if (opts && typeof opts === 'object') {\n    for (const key of Object.keys(opts)) {\n      if (key === 'awaitdata') {\n        // For backwards compatibility\n        this.options[key] = !!opts[key];\n      } else {\n        this.options[key] = opts[key];\n      }\n    }\n  }\n  return Query.base.tailable.call(this, val);\n};\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * ####NOTE:\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `intersects` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method intersects\n * @memberOf Query\n * @instance\n * @param {Object} [arg]\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see geoIntersects http://docs.mongodb.org/manual/reference/operator/geoIntersects/\n * @api public\n */\n\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     const polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     const polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     const polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * The argument is assigned to the most recent path passed to `where()`.\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * @method geometry\n * @memberOf Query\n * @instance\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *\n * @method near\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/*!\n * Overwriting mquery is needed to support a couple different near() forms found in older\n * versions of mongoose\n * near([1,1])\n * near(1,1)\n * near(field, [1,2])\n * near(field, 1, 2)\n * In addition to all of the normal forms supported by mquery\n */\n\nQuery.prototype.near = function () {\n  const params = [];\n  const sphere = this._mongooseOptions.nearSphere;\n\n  // TODO refactor\n\n  if (arguments.length === 1) {\n    if (Array.isArray(arguments[0])) {\n      params.push({\n        center: arguments[0],\n        spherical: sphere\n      });\n    } else if (typeof arguments[0] === 'string') {\n      // just passing a path\n      params.push(arguments[0]);\n    } else if (utils.isObject(arguments[0])) {\n      if (typeof arguments[0].spherical !== 'boolean') {\n        arguments[0].spherical = sphere;\n      }\n      params.push(arguments[0]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 2) {\n    if (typeof arguments[0] === 'number' && typeof arguments[1] === 'number') {\n      params.push({\n        center: [arguments[0], arguments[1]],\n        spherical: sphere\n      });\n    } else if (typeof arguments[0] === 'string' && Array.isArray(arguments[1])) {\n      params.push(arguments[0]);\n      params.push({\n        center: arguments[1],\n        spherical: sphere\n      });\n    } else if (typeof arguments[0] === 'string' && utils.isObject(arguments[1])) {\n      params.push(arguments[0]);\n      if (typeof arguments[1].spherical !== 'boolean') {\n        arguments[1].spherical = sphere;\n      }\n      params.push(arguments[1]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 3) {\n    if (typeof arguments[0] === 'string' && typeof arguments[1] === 'number' && typeof arguments[2] === 'number') {\n      params.push(arguments[0]);\n      params.push({\n        center: [arguments[1], arguments[2]],\n        spherical: sphere\n      });\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else {\n    throw new TypeError('invalid argument');\n  }\n  return Query.base.near.apply(this, params);\n};\n\n/**\n * _DEPRECATED_ Specifies a `$nearSphere` condition\n *\n * ####Example\n *\n *     query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });\n *\n * **Deprecated.** Use `query.near()` instead with the `spherical` option set to `true`.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10], spherical: true });\n *\n * @deprecated\n * @see near() #query_Query-near\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n */\n\nQuery.prototype.nearSphere = function () {\n  this._mongooseOptions.nearSphere = true;\n  this.near.apply(this, arguments);\n  return this;\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js)\n * This function *only* works for `find()` queries.\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * ####Example\n *\n *     for await (const doc of Model.aggregate([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf Query\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  Query.prototype[Symbol.asyncIterator] = function () {\n    return this.cursor().transformNull()._transformForAsyncIterator();\n  };\n}\n\n/**\n * Specifies a `$polygon` condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @method polygon\n * @memberOf Query\n * @instance\n * @param {String|Array} [path]\n * @param {Array|Object} [coordinatePairs...]\n * @return {Query} this\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$box` condition\n *\n * ####Example\n *\n *     const lowerLeft = [40.73083, -73.99756]\n *     const upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box({ ll : lowerLeft, ur : upperRight })\n *\n * @method box\n * @memberOf Query\n * @instance\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see within() Query#within #query_Query-within\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @param {Object} val\n * @param [Array] Upper Right Coords\n * @return {Query} this\n * @api public\n */\n\n/*!\n * this is needed to support the mongoose syntax of:\n * box(field, { ll : [x,y], ur : [x2,y2] })\n * box({ ll : [x,y], ur : [x2,y2] })\n */\n\nQuery.prototype.box = function (ll, ur) {\n  if (!Array.isArray(ll) && utils.isObject(ll)) {\n    ur = ll.ur;\n    ll = ll.ll;\n  }\n  return Query.base.box.call(this, ll, ur);\n};\n\n/**\n * Specifies a `$center` or `$centerSphere` condition.\n *\n * ####Example\n *\n *     const area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n *     // spherical calculations\n *     const area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n * @method circle\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @see $geoWithin http://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * _DEPRECATED_ Alias for [circle](#query_Query-circle)\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * @deprecated\n * @method center\n * @memberOf Query\n * @instance\n * @api public\n */\n\nQuery.prototype.center = Query.base.circle;\n\n/**\n * _DEPRECATED_ Specifies a `$centerSphere` condition\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * ####Example\n *\n *     const area = { center: [50, 50], radius: 10 };\n *     query.where('loc').within().centerSphere(area);\n *\n * @deprecated\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @api public\n */\n\nQuery.prototype.centerSphere = function () {\n  if (arguments[0] != null && typeof arguments[0].constructor === 'function' && arguments[0].constructor.name === 'Object') {\n    arguments[0].spherical = true;\n  }\n  if (arguments[1] != null && typeof arguments[1].constructor === 'function' && arguments[1].constructor.name === 'Object') {\n    arguments[1].spherical = true;\n  }\n  Query.base.circle.apply(this, arguments);\n};\n\n/**\n * Determines if field selection has been made.\n *\n * @method selected\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *\n * @method selectedInclusively\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  return isInclusive(this._fields);\n};\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExclusively() // false\n *     query.select('-name')\n *     query.selectedExclusively() // true\n *     query.selectedInclusively() // false\n *\n * @method selectedExclusively\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  return isExclusive(this._fields);\n};\n\n/**\n * The model this query is associated with.\n *\n * #### Example:\n *\n *     const q = MyModel.find();\n *     q.model === MyModel; // true\n *\n * @api public\n * @property model\n * @memberOf Query\n * @instance\n */\n\nQuery.prototype.model;\n\n/*!\n * Export\n */\n\nmodule.exports = Query;","map":{"version":3,"names":["CastError","require","DocumentNotFoundError","Kareem","MongooseError","ObjectParameterError","QueryCursor","ReadPreference","get","applyGlobalMaxTimeMS","applyWriteConcern","cast","castArrayFilters","castUpdate","completeMany","promiseOrCallback","getDiscriminatorByValue","hasDollarKeys","helpers","immediate","isExclusive","isInclusive","mquery","parseProjection","removeUnusedArrayFilters","sanitizeProjection","selectPopulatedFields","setDefaultsOnInsert","slice","updateValidators","util","utils","wrapThunk","Query","conditions","options","model","collection","_mongooseOptions","_transforms","_hooks","_executionCount","keys","Object","key","mongooseCollection","schema","_mapreduce","lean","call","find","$useProjection","collation","prototype","constructor","base","use$geoWithin","toConstructor","coll","CustomQuery","criteria","clone","p","inherits","assign","sort","setOptions","op","_conditions","_fields","_update","flattenDecimals","_path","_distinct","_collection","arguments","length","_validate","path","val","arg","Array","isArray","numKeys","i","_ensurePath","$slice","select","mod","conds","$mod","projection","_userProvidedFields","Error","fields","userProvidedFields","undefined","hasUserDefinedProperty","db","isObject","value","TypeError","read","pref","tags","readPreference","session","v","writeConcern","w","j","wtimeout","ms","getOptions","overwrite","populate","_numPopulate","useFindAndModify","omitUndefined","overwriteDiscriminatorKey","defaults","explain","verbose","allowDiskUse","maxTimeMS","getFilter","getQuery","setQuery","getUpdate","setUpdate","_fieldsForExec","_updateForExec","update","transform","depopulate","ops","ret","$set","splice","indexOf","push","_optionsForExec","safe","setSafe","upsert","safeDeprecationWarning","deprecate","set","error","err","_error","_unsetCastError","mongooseOptions","_castConditions","_castArrayFilters","query","_find","callback","_wrapThunkCallback","_applyPaths","_castFields","_this","completeManyOptions","cb","docs","pop","preparePopulationOptionsMQ","populated","filter","toObject","canMerge","merge","prepareDiscriminatorCriteria","exec","source","opts","mergeClone","_completeOne","doc","res","rawResult","_completeOneLean","completeOne","_findOne","findOne","_count","count","tick","_countDocuments","countDocuments","_estimatedDocumentCount","estimatedDocumentCount","__distinct","distinct","field","remove","_remove","handleDeleteWriteOpResult","deleteOne","_deleteOne","deleteMany","_deleteMany","_init","casted","createModel","init","$session","discriminatorMapping","isRoot","findOneAndUpdate","_mergeUpdate","returnOriginal","new","returnDocument","_findOneAndUpdate","_findAndModify","findOneAndRemove","findOneAndDelete","_findOneAndDelete","findOneAndReplace","replacement","_findOneAndReplace","convertNewToReturnDocument","castedDoc","validate","toBSON","_findOneAndRemove","_getOption","option","def","type","castedQuery","castQuery","strict","isOverwriting","castDoc","_opts","_id","arrayFilters","convertSortToArray","runValidators","conn","config","updateMethod","_legacyFindAndModify","_cb","concat","object","hasOwnProperty","_updateThunk","oldCb","result","ok","n","nModified","_execUpdate","_updateMany","_updateOne","_replaceOne","updateMany","updateOne","replaceOne","toString","map","fn","orFail","_orFailError","modelName","castError","$handleCallbackError","$wrapCallback","execPre","_cleanCastErrorStack","thunk","execPost","events","copy","then","resolve","reject","catch","pre","post","_castUpdate","obj","discriminatorKey","baseSchema","_baseSchema","discriminators","_schema","useNestedStrict","discriminatorValue","byValue","from","some","Boolean","apply","readConcern","readPref","populateOptions","getPopulatedPaths","_getPopulatedPaths","list","arr","prefix","strictQuery","setModel","selected","elemMatchKeys","out","$elemMatch","applyPaths","_selectPopulatedPaths","selectPopulatedPaths","cursor","_markError","maxscan","maxScan","tailable","name","near","params","sphere","nearSphere","center","spherical","Symbol","asyncIterator","transformNull","_transformForAsyncIterator","box","ll","ur","circle","centerSphere","selectedInclusively","selectedExclusively","module","exports"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/query.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('./error/cast');\nconst DocumentNotFoundError = require('./error/notFound');\nconst Kareem = require('kareem');\nconst MongooseError = require('./error/mongooseError');\nconst ObjectParameterError = require('./error/objectParameter');\nconst QueryCursor = require('./cursor/QueryCursor');\nconst ReadPreference = require('./driver').get().ReadPreference;\nconst applyGlobalMaxTimeMS = require('./helpers/query/applyGlobalMaxTimeMS');\nconst applyWriteConcern = require('./helpers/schema/applyWriteConcern');\nconst cast = require('./cast');\nconst castArrayFilters = require('./helpers/update/castArrayFilters');\nconst castUpdate = require('./helpers/query/castUpdate');\nconst completeMany = require('./helpers/query/completeMany');\nconst get = require('./helpers/get');\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\nconst getDiscriminatorByValue = require('./helpers/discriminator/getDiscriminatorByValue');\nconst hasDollarKeys = require('./helpers/query/hasDollarKeys');\nconst helpers = require('./queryhelpers');\nconst immediate = require('./helpers/immediate');\nconst isExclusive = require('./helpers/projection/isExclusive');\nconst isInclusive = require('./helpers/projection/isInclusive');\nconst mquery = require('mquery');\nconst parseProjection = require('./helpers/projection/parseProjection');\nconst removeUnusedArrayFilters = require('./helpers/update/removeUnusedArrayFilters');\nconst sanitizeProjection = require('./helpers/query/sanitizeProjection');\nconst selectPopulatedFields = require('./helpers/query/selectPopulatedFields');\nconst setDefaultsOnInsert = require('./helpers/setDefaultsOnInsert');\nconst slice = require('sliced');\nconst updateValidators = require('./helpers/updateValidators');\nconst util = require('util');\nconst utils = require('./utils');\nconst wrapThunk = require('./helpers/query/wrapThunk');\n\n/**\n * Query constructor used for building queries. You do not need\n * to instantiate a `Query` directly. Instead use Model functions like\n * [`Model.find()`](/docs/api.html#find_find).\n *\n * ####Example:\n *\n *     const query = MyModel.find(); // `query` is an instance of `Query`\n *     query.setOptions({ lean : true });\n *     query.collection(MyModel.collection);\n *     query.where('age').gte(21).exec(callback);\n *\n *     // You can instantiate a query directly. There is no need to do\n *     // this unless you're an advanced user with a very good reason to.\n *     const query = new mongoose.Query();\n *\n * @param {Object} [options]\n * @param {Object} [model]\n * @param {Object} [conditions]\n * @param {Object} [collection] Mongoose collection\n * @api public\n */\n\nfunction Query(conditions, options, model, collection) {\n  // this stuff is for dealing with custom queries created by #toConstructor\n  if (!this._mongooseOptions) {\n    this._mongooseOptions = {};\n  }\n  options = options || {};\n\n  this._transforms = [];\n  this._hooks = new Kareem();\n  this._executionCount = 0;\n\n  // this is the case where we have a CustomQuery, we need to check if we got\n  // options passed in, and if we did, merge them in\n  const keys = Object.keys(options);\n  for (const key of keys) {\n    this._mongooseOptions[key] = options[key];\n  }\n\n  if (collection) {\n    this.mongooseCollection = collection;\n  }\n\n  if (model) {\n    this.model = model;\n    this.schema = model.schema;\n  }\n\n\n  // this is needed because map reduce returns a model that can be queried, but\n  // all of the queries on said model should be lean\n  if (this.model && this.model._mapreduce) {\n    this.lean();\n  }\n\n  // inherit mquery\n  mquery.call(this, this.mongooseCollection, options);\n\n  if (conditions) {\n    this.find(conditions);\n  }\n\n  this.options = this.options || {};\n\n  // For gh-6880. mquery still needs to support `fields` by default for old\n  // versions of MongoDB\n  this.$useProjection = true;\n\n  const collation = get(this, 'schema.options.collation', null);\n  if (collation != null) {\n    this.options.collation = collation;\n  }\n}\n\n/*!\n * inherit mquery\n */\n\nQuery.prototype = new mquery;\nQuery.prototype.constructor = Query;\nQuery.base = mquery.prototype;\n\n/**\n * Flag to opt out of using `$geoWithin`.\n *\n *     mongoose.Query.use$geoWithin = false;\n *\n * MongoDB 2.4 deprecated the use of `$within`, replacing it with `$geoWithin`. Mongoose uses `$geoWithin` by default (which is 100% backward compatible with `$within`). If you are running an older version of MongoDB, set this flag to `false` so your `within()` queries continue to work.\n *\n * @see http://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @default true\n * @property use$geoWithin\n * @memberOf Query\n * @receiver Query\n * @api public\n */\n\nQuery.use$geoWithin = mquery.use$geoWithin;\n\n/**\n * Converts this query to a customized, reusable query constructor with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query for adventure movies and read from the primary\n *     // node in the replica-set unless it is down, in which case we'll\n *     // read from a secondary node.\n *     const query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');\n *\n *     // create a custom Query constructor based off these settings\n *     const Adventure = query.toConstructor();\n *\n *     // Adventure is now a subclass of mongoose.Query and works the same way but with the\n *     // default query parameters and options set.\n *     Adventure().exec(callback)\n *\n *     // further narrow down our query results while still using the previous settings\n *     Adventure().where({ name: /^Life/ }).exec(callback);\n *\n *     // since Adventure is a stand-alone constructor we can also add our own\n *     // helper methods and getters without impacting global queries\n *     Adventure.prototype.startsWith = function (prefix) {\n *       this.where({ name: new RegExp('^' + prefix) })\n *       return this;\n *     }\n *     Object.defineProperty(Adventure.prototype, 'highlyRated', {\n *       get: function () {\n *         this.where({ rating: { $gt: 4.5 }});\n *         return this;\n *       }\n *     })\n *     Adventure().highlyRated.startsWith('Life').exec(callback)\n *\n * @return {Query} subclass-of-Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  const model = this.model;\n  const coll = this.mongooseCollection;\n\n  const CustomQuery = function(criteria, options) {\n    if (!(this instanceof CustomQuery)) {\n      return new CustomQuery(criteria, options);\n    }\n    this._mongooseOptions = utils.clone(p._mongooseOptions);\n    Query.call(this, criteria, options || null, model, coll);\n  };\n\n  util.inherits(CustomQuery, model.Query);\n\n  // set inherited defaults\n  const p = CustomQuery.prototype;\n\n  p.options = {};\n\n  // Need to handle `sort()` separately because entries-style `sort()` syntax\n  // `sort([['prop1', 1]])` confuses mquery into losing the outer nested array.\n  // See gh-8159\n  const options = Object.assign({}, this.options);\n  if (options.sort != null) {\n    p.sort(options.sort);\n    delete options.sort;\n  }\n  p.setOptions(options);\n\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update, {\n    flattenDecimals: false\n  });\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._mongooseOptions = this._mongooseOptions;\n\n  return CustomQuery;\n};\n\n/**\n * Specifies a javascript function or expression to pass to MongoDBs query system.\n *\n * ####Example\n *\n *     query.$where('this.comments.length === 10 || this.name.length === 5')\n *\n *     // or\n *\n *     query.$where(function () {\n *       return this.comments.length === 10 || this.name.length === 5;\n *     })\n *\n * ####NOTE:\n *\n * Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`.\n * **Be sure to read about all of [its caveats](http://docs.mongodb.org/manual/reference/operator/where/) before using.**\n *\n * @see $where http://docs.mongodb.org/manual/reference/operator/where/\n * @method $where\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @instance\n * @method $where\n * @api public\n */\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @method where\n * @memberOf Query\n * @instance\n * @param {String|Object} [path]\n * @param {any} [val]\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a `$slice` projection for an array.\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @method slice\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @see $slice http://docs.mongodb.org/manual/reference/projection/slice/#prj._S_slice\n * @api public\n */\n\nQuery.prototype.slice = function() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  this._validate('slice');\n\n  let path;\n  let val;\n\n  if (arguments.length === 1) {\n    const arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const keys = Object.keys(arg);\n      const numKeys = keys.length;\n      for (let i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (arguments.length === 2) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = slice(arguments);\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (arguments.length === 3) {\n    path = arguments[0];\n    val = slice(arguments, 1);\n  }\n\n  const p = {};\n  p[path] = { $slice: val };\n  this.select(p);\n\n  return this;\n};\n\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @method equals\n * @memberOf Query\n * @instance\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @see $or http://docs.mongodb.org/manual/reference/operator/or/\n * @method or\n * @memberOf Query\n * @instance\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $nor http://docs.mongodb.org/manual/reference/operator/nor/\n * @method nor\n * @memberOf Query\n * @instance\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @method and\n * @memberOf Query\n * @instance\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a `$gt` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $gt http://docs.mongodb.org/manual/reference/operator/gt/\n * @api public\n */\n\n/**\n * Specifies a `$gte` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $gte http://docs.mongodb.org/manual/reference/operator/gte/\n * @api public\n */\n\n/**\n * Specifies a `$lt` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $lt http://docs.mongodb.org/manual/reference/operator/lt/\n * @api public\n */\n\n/**\n * Specifies a `$lte` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @see $lte http://docs.mongodb.org/manual/reference/operator/lte/\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$ne` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $ne http://docs.mongodb.org/manual/reference/operator/ne/\n * @method ne\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {any} val\n * @api public\n */\n\n/**\n * Specifies an `$in` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $in http://docs.mongodb.org/manual/reference/operator/in/\n * @method in\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies an `$nin` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $nin http://docs.mongodb.org/manual/reference/operator/nin/\n * @method nin\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies an `$all` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example:\n *\n *     MyModel.find().where('pets').all(['dog', 'cat', 'ferret']);\n *     // Equivalent:\n *     MyModel.find().all('pets', ['dog', 'cat', 'ferret']);\n *\n * @see $all http://docs.mongodb.org/manual/reference/operator/all/\n * @method all\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies a `$size` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     MyModel.where('tags').size(0).exec(function (err, docs) {\n *       if (err) return handleError(err);\n *\n *       assert(Array.isArray(docs));\n *       console.log('documents with 0 tags', docs);\n *     })\n *\n * @see $size http://docs.mongodb.org/manual/reference/operator/size/\n * @method size\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$regex` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $regex http://docs.mongodb.org/manual/reference/operator/regex/\n * @method regex\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a `maxDistance` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @method maxDistance\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$mod` condition, filters documents for documents whose\n * `path` property is a number that is equal to `remainder` modulo `divisor`.\n *\n * ####Example\n *\n *     // All find products whose inventory is odd\n *     Product.find().mod('inventory', [2, 1]);\n *     Product.find().where('inventory').mod([2, 1]);\n *     // This syntax is a little strange, but supported.\n *     Product.find().where('inventory').mod(2, 1);\n *\n * @method mod\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val must be of length 2, first element is `divisor`, 2nd element is `remainder`.\n * @return {Query} this\n * @see $mod http://docs.mongodb.org/manual/reference/operator/mod/\n * @api public\n */\n\nQuery.prototype.mod = function() {\n  let val;\n  let path;\n\n  if (arguments.length === 1) {\n    this._ensurePath('mod');\n    val = arguments[0];\n    path = this._path;\n  } else if (arguments.length === 2 && !Array.isArray(arguments[1])) {\n    this._ensurePath('mod');\n    val = slice(arguments);\n    path = this._path;\n  } else if (arguments.length === 3) {\n    val = slice(arguments, 1);\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @method exists\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Boolean} val\n * @return {Query} this\n * @see $exists http://docs.mongodb.org/manual/reference/operator/exists/\n * @api public\n */\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @method elemMatch\n * @memberOf Query\n * @instance\n * @param {String|Object|Function} path\n * @param {Object|Function} filter\n * @return {Query} this\n * @see $elemMatch http://docs.mongodb.org/manual/reference/operator/elemMatch/\n * @api public\n */\n\n/**\n * Defines a `$within` or `$geoWithin` argument for geo-spatial queries.\n *\n * ####Example\n *\n *     query.where(path).within().box()\n *     query.where(path).within().circle()\n *     query.where(path).within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * As of Mongoose 3.7, `$geoWithin` is always used for queries. To change this behavior, see [Query.use$geoWithin](#query_Query-use%2524geoWithin).\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `within` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method within\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @memberOf Query\n * @instance\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies the maximum number of documents the query will return.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies the number of documents to skip.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see cursor.skip http://docs.mongodb.org/manual/reference/method/cursor.skip/\n * @api public\n */\n\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see maxScan http://docs.mongodb.org/manual/reference/operator/maxScan/\n * @api public\n */\n\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see batchSize http://docs.mongodb.org/manual/reference/method/cursor.batchSize/\n * @api public\n */\n\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @instance\n * @param {String} val\n * @see comment http://docs.mongodb.org/manual/reference/operator/comment/\n * @api public\n */\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     query.snapshot() // true\n *     query.snapshot(true)\n *     query.snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method snapshot\n * @memberOf Query\n * @instance\n * @see snapshot http://docs.mongodb.org/manual/reference/operator/snapshot/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1})\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method hint\n * @memberOf Query\n * @instance\n * @param {Object} val a hint object\n * @return {Query} this\n * @see $hint http://docs.mongodb.org/manual/reference/operator/hint/\n * @api public\n */\n\n/**\n * Get/set the current projection (AKA fields). Pass `null` to remove the\n * current projection.\n *\n * Unlike `projection()`, the `select()` function modifies the current\n * projection in place. This function overwrites the existing projection.\n *\n * ####Example:\n *\n *     const q = Model.find();\n *     q.projection(); // null\n *\n *     q.select('a b');\n *     q.projection(); // { a: 1, b: 1 }\n *\n *     q.projection({ c: 1 });\n *     q.projection(); // { c: 1 }\n *\n *     q.projection(null);\n *     q.projection(); // null\n *\n *\n * @method projection\n * @memberOf Query\n * @instance\n * @param {Object|null} arg\n * @return {Object} the current projection\n * @api public\n */\n\nQuery.prototype.projection = function(arg) {\n  if (arguments.length === 0) {\n    return this._fields;\n  }\n\n  this._fields = {};\n  this._userProvidedFields = {};\n  this.select(arg);\n  return this._fields;\n};\n\n/**\n * Specifies which document fields to include or exclude (also known as the query \"projection\")\n *\n * When using string syntax, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included. Lastly, if a path is prefixed with `+`, it forces inclusion of the path, which is useful for paths excluded at the [schema level](/docs/api.html#schematype_SchemaType-select).\n *\n * A projection _must_ be either inclusive or exclusive. In other words, you must\n * either list the fields to include (which excludes all others), or list the fields\n * to exclude (which implies all other fields are included). The [`_id` field is the only exception because MongoDB includes it by default](https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/#suppress-id-field).\n *\n * ####Example\n *\n *     // include a and b, exclude other fields\n *     query.select('a b');\n *     // Equivalent syntaxes:\n *     query.select(['a', 'b']);\n *     query.select({ a: 1, b: 1 });\n *\n *     // exclude c and d, include other fields\n *     query.select('-c -d');\n *\n *     // Use `+` to override schema-level `select: false` without making the\n *     // projection inclusive.\n *     const schema = new Schema({\n *       foo: { type: String, select: false },\n *       bar: String\n *     });\n *     // ...\n *     query.select('+foo'); // Override foo's `select: false` without excluding `bar`\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({ a: 1, b: 1 });\n *     query.select({ c: 0, d: 0 });\n *\n *\n * @method select\n * @memberOf Query\n * @instance\n * @param {Object|String|Array<String>} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\nQuery.prototype.select = function select() {\n  let arg = arguments[0];\n  if (!arg) return this;\n\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n\n  this._validate('select');\n\n  const fields = this._fields || (this._fields = {});\n  const userProvidedFields = this._userProvidedFields || (this._userProvidedFields = {});\n  let sanitizeProjection = undefined;\n  if (this.model != null && utils.hasUserDefinedProperty(this.model.db.options, 'sanitizeProjection')) {\n    sanitizeProjection = this.model.db.options.sanitizeProjection;\n  } else if (this.model != null && utils.hasUserDefinedProperty(this.model.base.options, 'sanitizeProjection')) {\n    sanitizeProjection = this.model.base.options.sanitizeProjection;\n  } else {\n    sanitizeProjection = this._mongooseOptions.sanitizeProjection;\n  }\n\n  arg = parseProjection(arg);\n\n  if (utils.isObject(arg)) {\n    const keys = Object.keys(arg);\n    for (let i = 0; i < keys.length; ++i) {\n      let value = arg[keys[i]];\n      if (typeof value === 'string' && sanitizeProjection) {\n        value = 1;\n      }\n      fields[keys[i]] = value;\n      userProvidedFields[keys[i]] = value;\n    }\n    return this;\n  }\n\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n\n/**\n * _DEPRECATED_ Sets the slaveOk option.\n *\n * **Deprecated** in MongoDB 2.2 in favor of [read preferences](#query_Query-read).\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @method slaveOk\n * @memberOf Query\n * @instance\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see slaveOk http://docs.mongodb.org/manual/reference/method/rs.slaveOk/\n * @see read() #query_Query-read\n * @return {Query} this\n * @api public\n */\n\n/**\n * Determines the MongoDB nodes from which to read.\n *\n * ####Preferences:\n *\n *     primary - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // read from secondaries with matching tags\n *     new Query().read('s', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }])\n *\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @method read\n * @memberOf Query\n * @instance\n * @param {String} pref one of the listed preference options or aliases\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = function read(pref, tags) {\n  // first cast into a ReadPreference object to support tags\n  const read = new ReadPreference(pref, tags);\n  this.options.readPreference = read;\n  return this;\n};\n\n/**\n * Sets the [MongoDB session](https://docs.mongodb.com/manual/reference/server-sessions/)\n * associated with this query. Sessions are how you mark a query as part of a\n * [transaction](/docs/transactions.html).\n *\n * Calling `session(null)` removes the session from this query.\n *\n * ####Example:\n *\n *     const s = await mongoose.startSession();\n *     await mongoose.model('Person').findOne({ name: 'Axl Rose' }).session(s);\n *\n * @method session\n * @memberOf Query\n * @instance\n * @param {ClientSession} [session] from `await conn.startSession()`\n * @see Connection.prototype.startSession() /docs/api.html#connection_Connection-startSession\n * @see mongoose.startSession() /docs/api.html#mongoose_Mongoose-startSession\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.session = function session(v) {\n  if (v == null) {\n    delete this.options.session;\n  }\n  this.options.session = v;\n  return this;\n};\n\n/**\n * Sets the 3 write concern parameters for this query:\n *\n * - `w`: Sets the specified number of `mongod` servers, or tag set of `mongod` servers, that must acknowledge this write before this write is considered successful.\n * - `j`: Boolean, set to `true` to request acknowledgement that this operation has been persisted to MongoDB's on-disk journal.\n * - `wtimeout`: If [`w > 1`](/docs/api.html#query_Query-w), the maximum amount of time to wait for this write to propagate through the replica set before this operation fails. The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern` option](/docs/guide.html#writeConcern)\n *\n * ####Example:\n *\n *     // The 'majority' option means the `deleteOne()` promise won't resolve\n *     // until the `deleteOne()` has propagated to the majority of the replica set\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       writeConcern({ w: 'majority' });\n *\n * @method writeConcern\n * @memberOf Query\n * @instance\n * @param {Object} writeConcern the write concern value to set\n * @see mongodb https://mongodb.github.io/node-mongodb-native/3.1/api/global.html#WriteConcern\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.writeConcern = function writeConcern(val) {\n  if (val == null) {\n    delete this.options.writeConcern;\n    return this;\n  }\n  this.options.writeConcern = val;\n  return this;\n};\n\n/**\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\n * that must acknowledge this write before this write is considered successful.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.w` option](/docs/guide.html#writeConcern)\n *\n * ####Example:\n *\n *     // The 'majority' option means the `deleteOne()` promise won't resolve\n *     // until the `deleteOne()` has propagated to the majority of the replica set\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       w('majority');\n *\n * @method w\n * @memberOf Query\n * @instance\n * @param {String|number} val 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.w = function w(val) {\n  if (val == null) {\n    delete this.options.w;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.w = val;\n  } else {\n    this.options.w = val;\n  }\n  return this;\n};\n\n/**\n * Requests acknowledgement that this operation has been persisted to MongoDB's\n * on-disk journal.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.j` option](/docs/guide.html#writeConcern)\n *\n * ####Example:\n *\n *     await mongoose.model('Person').deleteOne({ name: 'Ned Stark' }).j(true);\n *\n * @method j\n * @memberOf Query\n * @instance\n * @param {boolean} val\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.j = function j(val) {\n  if (val == null) {\n    delete this.options.j;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.j = val;\n  } else {\n    this.options.j = val;\n  }\n  return this;\n};\n\n/**\n * If [`w > 1`](/docs/api.html#query_Query-w), the maximum amount of time to\n * wait for this write to propagate through the replica set before this\n * operation fails. The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.wtimeout` option](/docs/guide.html#writeConcern)\n *\n * ####Example:\n *\n *     // The `deleteOne()` promise won't resolve until this `deleteOne()` has\n *     // propagated to at least `w = 2` members of the replica set. If it takes\n *     // longer than 1 second, this `deleteOne()` will fail.\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       w(2).\n *       wtimeout(1000);\n *\n * @method wtimeout\n * @memberOf Query\n * @instance\n * @param {number} ms number of milliseconds to wait\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.wtimeout = function wtimeout(ms) {\n  if (ms == null) {\n    delete this.options.wtimeout;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.wtimeout = ms;\n  } else {\n    this.options.wtimeout = ms;\n  }\n  return this;\n};\n\n/**\n * Sets the readConcern option for the query.\n *\n * ####Example:\n *\n *     new Query().readConcern('local')\n *     new Query().readConcern('l')  // same as local\n *\n *     new Query().readConcern('available')\n *     new Query().readConcern('a')  // same as available\n *\n *     new Query().readConcern('majority')\n *     new Query().readConcern('m')  // same as majority\n *\n *     new Query().readConcern('linearizable')\n *     new Query().readConcern('lz') // same as linearizable\n *\n *     new Query().readConcern('snapshot')\n *     new Query().readConcern('s')  // same as snapshot\n *\n *\n * ####Read Concern Level:\n *\n *     local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\n *     linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\n *     snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\n *\n * Aliases\n *\n *     l   local\n *     a   available\n *     m   majority\n *     lz  linearizable\n *     s   snapshot\n *\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\n *\n * @memberOf Query\n * @method readConcern\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Gets query options.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.limit(10);\n *     query.setOptions({ maxTimeMS: 1000 })\n *     query.getOptions(); // { limit: 10, maxTimeMS: 1000 }\n *\n * @return {Object} the options\n * @api public\n */\n\nQuery.prototype.getOptions = function() {\n  return this.options;\n};\n\n/**\n * Sets query options. Some options only make sense for certain operations.\n *\n * ####Options:\n *\n * The following options are only for `find()`:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors)\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D)\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D)\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D)\n * - [allowDiskUse](https://docs.mongodb.com/manual/reference/method/cursor.allowDiskUse/)\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D)\n * - [readPreference](http://docs.mongodb.org/manual/applications/replication/#read-preference)\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint)\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment)\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D)\n * - [maxscan](https://docs.mongodb.org/v3.2/reference/operator/meta/maxScan/#metaOp._S_maxScan)\n *\n * The following options are only for write operations: `update()`, `updateOne()`, `updateMany()`, `replaceOne()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\n *\n * - [upsert](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\n * - [writeConcern](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\n * - [timestamps](https://mongoosejs.com/docs/guide.html#timestamps): If `timestamps` is set in the schema, set this option to `false` to skip timestamps for that particular update. Has no effect if `timestamps` is not enabled in the schema options.\n * - omitUndefined: delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * - overwriteDiscriminatorKey: allow setting the discriminator key in the update. Will use the correct discriminator schema if the update changes the discriminator key.\n * - overwrite: replace the entire document\n *\n * The following options are only for `find()`, `findOne()`, `findById()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\n *\n * - [lean](./api.html#query_Query-lean)\n * - [populate](/docs/populate.html)\n * - [projection](/docs/api/query.html#query_Query-projection)\n * - sanitizeProjection\n *\n * The following options are only for all operations **except** `update()`, `updateOne()`, `updateMany()`, `remove()`, `deleteOne()`, and `deleteMany()`:\n *\n * - [maxTimeMS](https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/)\n *\n * The following options are for `findOneAndUpdate()` and `findOneAndRemove()`\n *\n * - [useFindAndModify](/docs/deprecations.html#findandmodify)\n * - rawResult\n *\n * The following options are for all operations:\n *\n * - [collation](https://docs.mongodb.com/manual/reference/collation/)\n * - [session](https://docs.mongodb.com/manual/reference/server-sessions/)\n * - [explain](https://docs.mongodb.com/manual/reference/method/cursor.explain/)\n *\n * @param {Object} options\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.setOptions = function(options, overwrite) {\n  // overwrite is only for internal use\n  if (overwrite) {\n    // ensure that _mongooseOptions & options are two different objects\n    this._mongooseOptions = (options && utils.clone(options)) || {};\n    this.options = options || {};\n\n    if ('populate' in options) {\n      this.populate(this._mongooseOptions);\n    }\n    return this;\n  }\n  if (options == null) {\n    return this;\n  }\n  if (typeof options !== 'object') {\n    throw new Error('Options must be an object, got \"' + options + '\"');\n  }\n\n  if (Array.isArray(options.populate)) {\n    const populate = options.populate;\n    delete options.populate;\n    const _numPopulate = populate.length;\n    for (let i = 0; i < _numPopulate; ++i) {\n      this.populate(populate[i]);\n    }\n  }\n\n  if ('useFindAndModify' in options) {\n    this._mongooseOptions.useFindAndModify = options.useFindAndModify;\n    delete options.useFindAndModify;\n  }\n  if ('omitUndefined' in options) {\n    this._mongooseOptions.omitUndefined = options.omitUndefined;\n    delete options.omitUndefined;\n  }\n  if ('setDefaultsOnInsert' in options) {\n    this._mongooseOptions.setDefaultsOnInsert = options.setDefaultsOnInsert;\n    delete options.setDefaultsOnInsert;\n  }\n  if ('overwriteDiscriminatorKey' in options) {\n    this._mongooseOptions.overwriteDiscriminatorKey = options.overwriteDiscriminatorKey;\n    delete options.overwriteDiscriminatorKey;\n  }\n  if ('sanitizeProjection' in options) {\n    if (options.sanitizeProjection && !this._mongooseOptions.sanitizeProjection) {\n      sanitizeProjection(this._fields);\n    }\n\n    this._mongooseOptions.sanitizeProjection = options.sanitizeProjection;\n    delete options.sanitizeProjection;\n  }\n\n  if ('defaults' in options) {\n    this._mongooseOptions.defaults = options.defaults;\n    // deleting options.defaults will cause 7287 to fail\n  }\n\n  return Query.base.setOptions.call(this, options);\n};\n\n/**\n * Sets the [`explain` option](https://docs.mongodb.com/manual/reference/method/cursor.explain/),\n * which makes this query return detailed execution stats instead of the actual\n * query result. This method is useful for determining what index your queries\n * use.\n *\n * Calling `query.explain(v)` is equivalent to `query.setOptions({ explain: v })`\n *\n * ####Example:\n *\n *     const query = new Query();\n *     const res = await query.find({ a: 1 }).explain('queryPlanner');\n *     console.log(res);\n *\n * @param {String} [verbose] The verbosity mode. Either 'queryPlanner', 'executionStats', or 'allPlansExecution'. The default is 'queryPlanner'\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.explain = function(verbose) {\n  if (arguments.length === 0) {\n    this.options.explain = true;\n  } else if (verbose === false) {\n    delete this.options.explain;\n  } else {\n    this.options.explain = verbose;\n  }\n  return this;\n};\n\n/**\n * Sets the [`allowDiskUse` option](https://docs.mongodb.com/manual/reference/method/cursor.allowDiskUse/),\n * which allows the MongoDB server to use more than 100 MB for this query's `sort()`. This option can\n * let you work around `QueryExceededMemoryLimitNoDiskUseAllowed` errors from the MongoDB server.\n *\n * Note that this option requires MongoDB server >= 4.4. Setting this option is a no-op for MongoDB 4.2\n * and earlier.\n *\n * Calling `query.allowDiskUse(v)` is equivalent to `query.setOptions({ allowDiskUse: v })`\n *\n * ####Example:\n *\n *     await query.find().sort({ name: 1 }).allowDiskUse(true);\n *     // Equivalent:\n *     await query.find().sort({ name: 1 }).allowDiskUse();\n *\n * @param {Boolean} [v] Enable/disable `allowDiskUse`. If called with 0 arguments, sets `allowDiskUse: true`\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.allowDiskUse = function(v) {\n  if (arguments.length === 0) {\n    this.options.allowDiskUse = true;\n  } else if (v === false) {\n    delete this.options.allowDiskUse;\n  } else {\n    this.options.allowDiskUse = v;\n  }\n  return this;\n};\n\n/**\n * Sets the [maxTimeMS](https://docs.mongodb.com/manual/reference/method/cursor.maxTimeMS/)\n * option. This will tell the MongoDB server to abort if the query or write op\n * has been running for more than `ms` milliseconds.\n *\n * Calling `query.maxTimeMS(v)` is equivalent to `query.setOptions({ maxTimeMS: v })`\n *\n * ####Example:\n *\n *     const query = new Query();\n *     // Throws an error 'operation exceeded time limit' as long as there's\n *     // >= 1 doc in the queried collection\n *     const res = await query.find({ $where: 'sleep(1000) || true' }).maxTimeMS(100);\n *\n * @param {Number} [ms] The number of milliseconds\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.maxTimeMS = function(ms) {\n  this.options.maxTimeMS = ms;\n  return this;\n};\n\n/**\n * Returns the current query filter (also known as conditions) as a [POJO](https://masteringjs.io/tutorials/fundamentals/pojo).\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getFilter(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query filter\n * @api public\n */\n\nQuery.prototype.getFilter = function() {\n  return this._conditions;\n};\n\n/**\n * Returns the current query filter. Equivalent to `getFilter()`.\n *\n * You should use `getFilter()` instead of `getQuery()` where possible. `getQuery()`\n * will likely be deprecated in a future release.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getQuery(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query filter\n * @api public\n */\n\nQuery.prototype.getQuery = function() {\n  return this._conditions;\n};\n\n/**\n * Sets the query conditions to the provided JSON object.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 })\n *     query.setQuery({ a: 2 });\n *     query.getQuery(); // { a: 2 }\n *\n * @param {Object} new query conditions\n * @return {undefined}\n * @api public\n */\n\nQuery.prototype.setQuery = function(val) {\n  this._conditions = val;\n};\n\n/**\n * Returns the current update operations as a JSON object.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.update({}, { $set: { a: 5 } });\n *     query.getUpdate(); // { $set: { a: 5 } }\n *\n * @return {Object} current update operations\n * @api public\n */\n\nQuery.prototype.getUpdate = function() {\n  return this._update;\n};\n\n/**\n * Sets the current update operation to new value.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.update({}, { $set: { a: 5 } });\n *     query.setUpdate({ $set: { b: 6 } });\n *     query.getUpdate(); // { $set: { b: 6 } }\n *\n * @param {Object} new update operation\n * @return {undefined}\n * @api public\n */\n\nQuery.prototype.setUpdate = function(val) {\n  this._update = val;\n};\n\n/**\n * Returns fields selection for this query.\n *\n * @method _fieldsForExec\n * @return {Object}\n * @api private\n * @receiver Query\n */\n\nQuery.prototype._fieldsForExec = function() {\n  return utils.clone(this._fields);\n};\n\n\n/**\n * Return an update document with corrected `$set` operations.\n *\n * @method _updateForExec\n * @api private\n * @receiver Query\n */\n\nQuery.prototype._updateForExec = function() {\n  const update = utils.clone(this._update, {\n    transform: false,\n    depopulate: true\n  });\n  const ops = Object.keys(update);\n  let i = ops.length;\n  const ret = {};\n\n  while (i--) {\n    const op = ops[i];\n\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Makes sure _path is set.\n *\n * @method _ensurePath\n * @param {String} method\n * @api private\n * @receiver Query\n */\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @method canMerge\n * @memberOf Query\n * @instance\n * @param {Object} conds\n * @return {Boolean}\n * @api private\n */\n\n/**\n * Returns default options for this query.\n *\n * @param {Model} model\n * @api private\n */\n\nQuery.prototype._optionsForExec = function(model) {\n  const options = utils.clone(this.options);\n  delete options.populate;\n  model = model || this.model;\n\n  if (!model) {\n    return options;\n  }\n\n  const safe = get(model, 'schema.options.safe', null);\n  if (!('safe' in options) && safe != null) {\n    setSafe(options, safe);\n  }\n\n  // Apply schema-level `writeConcern` option\n  applyWriteConcern(model.schema, options);\n\n  const readPreference = get(model, 'schema.options.read');\n  if (!('readPreference' in options) && readPreference) {\n    options.readPreference = readPreference;\n  }\n\n  if (options.upsert !== void 0) {\n    options.upsert = !!options.upsert;\n  }\n  if (options.writeConcern) {\n    if (options.j) {\n      options.writeConcern.j = options.j;\n      delete options.j;\n    }\n    if (options.w) {\n      options.writeConcern.w = options.w;\n      delete options.w;\n    }\n    if (options.wtimeout) {\n      options.writeConcern.wtimeout = options.wtimeout;\n      delete options.wtimeout;\n    }\n  }\n  return options;\n};\n\n/*!\n * ignore\n */\n\nconst safeDeprecationWarning = 'Mongoose: the `safe` option is deprecated. ' +\n  'Use write concerns instead: http://bit.ly/mongoose-w';\n\nconst setSafe = util.deprecate(function setSafe(options, safe) {\n  options.safe = safe;\n}, safeDeprecationWarning);\n\n/**\n * Sets the lean option.\n *\n * Documents returned from queries with the `lean` option enabled are plain\n * javascript objects, not [Mongoose Documents](/api/document.html). They have no\n * `save` method, getters/setters, virtuals, or other Mongoose features.\n *\n * ####Example:\n *\n *     new Query().lean() // true\n *     new Query().lean(true)\n *     new Query().lean(false)\n *\n *     const docs = await Model.find().lean();\n *     docs[0] instanceof mongoose.Document; // false\n *\n * [Lean is great for high-performance, read-only cases](/docs/tutorials/lean.html),\n * especially when combined\n * with [cursors](/docs/queries.html#streaming).\n *\n * If you need virtuals, getters/setters, or defaults with `lean()`, you need\n * to use a plugin. See:\n *\n * - [mongoose-lean-virtuals](https://plugins.mongoosejs.io/plugins/lean-virtuals)\n * - [mongoose-lean-getters](https://plugins.mongoosejs.io/plugins/lean-getters)\n * - [mongoose-lean-defaults](https://www.npmjs.com/package/mongoose-lean-defaults)\n *\n * @param {Boolean|Object} bool defaults to true\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.lean = function(v) {\n  this._mongooseOptions.lean = arguments.length ? v : true;\n  return this;\n};\n\n/**\n * Adds a `$set` to this query's update without changing the operation.\n * This is useful for query middleware so you can add an update regardless\n * of whether you use `updateOne()`, `updateMany()`, `findOneAndUpdate()`, etc.\n *\n * ####Example:\n *\n *     // Updates `{ $set: { updatedAt: new Date() } }`\n *     new Query().updateOne({}, {}).set('updatedAt', new Date());\n *     new Query().updateMany({}, {}).set({ updatedAt: new Date() });\n *\n * @param {String|Object} path path or object of key/value pairs to set\n * @param {Any} [val] the value to set\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.set = function(path, val) {\n  if (typeof path === 'object') {\n    const keys = Object.keys(path);\n    for (const key of keys) {\n      this.set(key, path[key]);\n    }\n    return this;\n  }\n\n  this._update = this._update || {};\n  this._update.$set = this._update.$set || {};\n  this._update.$set[path] = val;\n  return this;\n};\n\n/**\n * For update operations, returns the value of a path in the update's `$set`.\n * Useful for writing getters/setters that can work with both update operations\n * and `save()`.\n *\n * ####Example:\n *\n *     const query = Model.updateOne({}, { $set: { name: 'Jean-Luc Picard' } });\n *     query.get('name'); // 'Jean-Luc Picard'\n *\n * @param {String|Object} path path or object of key/value pairs to get\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.get = function get(path) {\n  const update = this._update;\n  if (update == null) {\n    return void 0;\n  }\n  const $set = update.$set;\n  if ($set == null) {\n    return update[path];\n  }\n\n  if (utils.hasUserDefinedProperty(update, path)) {\n    return update[path];\n  }\n  if (utils.hasUserDefinedProperty($set, path)) {\n    return $set[path];\n  }\n\n  return void 0;\n};\n\n/**\n * Gets/sets the error flag on this query. If this flag is not null or\n * undefined, the `exec()` promise will reject without executing.\n *\n * ####Example:\n *\n *     Query().error(); // Get current error value\n *     Query().error(null); // Unset the current error\n *     Query().error(new Error('test')); // `exec()` will resolve with test\n *     Schema.pre('find', function() {\n *       if (!this.getQuery().userId) {\n *         this.error(new Error('Not allowed to query without setting userId'));\n *       }\n *     });\n *\n * Note that query casting runs **after** hooks, so cast errors will override\n * custom errors.\n *\n * ####Example:\n *     const TestSchema = new Schema({ num: Number });\n *     const TestModel = db.model('Test', TestSchema);\n *     TestModel.find({ num: 'not a number' }).error(new Error('woops')).exec(function(error) {\n *       // `error` will be a cast error because `num` failed to cast\n *     });\n *\n * @param {Error|null} err if set, `exec()` will fail fast before sending the query to MongoDB\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.error = function error(err) {\n  if (arguments.length === 0) {\n    return this._error;\n  }\n\n  this._error = err;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._unsetCastError = function _unsetCastError() {\n  if (this._error != null && !(this._error instanceof CastError)) {\n    return;\n  }\n  return this.error(null);\n};\n\n/**\n * Getter/setter around the current mongoose-specific options for this query\n * Below are the current Mongoose-specific options.\n *\n * - `populate`: an array representing what paths will be populated. Should have one entry for each call to [`Query.prototype.populate()`](/docs/api.html#query_Query-populate)\n * - `lean`: if truthy, Mongoose will not [hydrate](/docs/api.html#model_Model.hydrate) any documents that are returned from this query. See [`Query.prototype.lean()`](/docs/api.html#query_Query-lean) for more information.\n * - `strict`: controls how Mongoose handles keys that aren't in the schema for updates. This option is `true` by default, which means Mongoose will silently strip any paths in the update that aren't in the schema. See the [`strict` mode docs](/docs/guide.html#strict) for more information.\n * - `strictQuery`: controls how Mongoose handles keys that aren't in the schema for the query `filter`. This option is `false` by default for backwards compatibility, which means Mongoose will allow `Model.find({ foo: 'bar' })` even if `foo` is not in the schema. See the [`strictQuery` docs](/docs/guide.html#strictQuery) for more information.\n * - `useFindAndModify`: used to work around the [`findAndModify()` deprecation warning](/docs/deprecations.html#findandmodify)\n * - `omitUndefined`: delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * - `nearSphere`: use `$nearSphere` instead of `near()`. See the [`Query.prototype.nearSphere()` docs](/docs/api.html#query_Query-nearSphere)\n *\n * Mongoose maintains a separate object for internal options because\n * Mongoose sends `Query.prototype.options` to the MongoDB server, and the\n * above options are not relevant for the MongoDB server.\n *\n * @param {Object} options if specified, overwrites the current options\n * @return {Object} the options\n * @api public\n */\n\nQuery.prototype.mongooseOptions = function(v) {\n  if (arguments.length > 0) {\n    this._mongooseOptions = v;\n  }\n  return this._mongooseOptions;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._castConditions = function() {\n  try {\n    this.cast(this.model);\n    this._unsetCastError();\n  } catch (err) {\n    this.error(err);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _castArrayFilters(query) {\n  try {\n    castArrayFilters(query);\n  } catch (err) {\n    query.error(err);\n  }\n}\n\n/**\n * Thunk around find()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._find = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n\n  const fields = this._fieldsForExec();\n  const mongooseOptions = this._mongooseOptions;\n  const _this = this;\n  const userProvidedFields = _this._userProvidedFields || {};\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n\n  // Separate options to pass down to `completeMany()` in case we need to\n  // set a session on the document\n  const completeManyOptions = Object.assign({}, {\n    session: get(this, 'options.session', null)\n  });\n\n  const cb = (err, docs) => {\n    if (err) {\n      return callback(err);\n    }\n\n    if (docs.length === 0) {\n      return callback(null, docs);\n    }\n    if (this.options.explain) {\n      return callback(null, docs);\n    }\n\n    if (!mongooseOptions.populate) {\n      return mongooseOptions.lean ?\n        callback(null, docs) :\n        completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions, callback);\n    }\n\n    const pop = helpers.preparePopulationOptionsMQ(_this, mongooseOptions);\n    completeManyOptions.populated = pop;\n    _this.model.populate(docs, pop, function(err, docs) {\n      if (err) return callback(err);\n      return mongooseOptions.lean ?\n        callback(null, docs) :\n        completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions, callback);\n    });\n  };\n\n  const options = this._optionsForExec();\n  options.projection = this._fieldsForExec();\n  const filter = this._conditions;\n\n  this._collection.find(filter, options, cb);\n  return null;\n});\n\n/**\n * Find all documents that match `selector`. The result will be an array of documents.\n *\n * If there are too many documents in the result to fit in memory, use\n * [`Query.prototype.cursor()`](api.html#query_Query-cursor)\n *\n * ####Example\n *\n *     // Using async/await\n *     const arr = await Movie.find({ year: { $gte: 1980, $lte: 1989 } });\n *\n *     // Using callbacks\n *     Movie.find({ year: { $gte: 1980, $lte: 1989 } }, function(err, arr) {});\n *\n * @param {Object|ObjectId} [filter] mongodb selector. If not specified, returns all documents.\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function(conditions, callback) {\n  this.op = 'find';\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'find'));\n  }\n\n  // if we don't have a callback, then just return the query object\n  if (!callback) {\n    return Query.base.find.call(this);\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function(source) {\n  if (!source) {\n    return this;\n  }\n\n  const opts = { overwrite: true };\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions, opts);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields, opts);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options, opts);\n    }\n\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n\n    utils.merge(this._mongooseOptions, source._mongooseOptions);\n\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source, opts);\n\n  return this;\n};\n\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\nQuery.prototype.collation = function(value) {\n  if (this.options == null) {\n    this.options = {};\n  }\n  this.options.collation = value;\n  return this;\n};\n\n/**\n * Hydrate a single doc from `findOne()`, `findOneAndUpdate()`, etc.\n *\n * @api private\n */\n\nQuery.prototype._completeOne = function(doc, res, callback) {\n  if (!doc && !this.options.rawResult) {\n    return callback(null, null);\n  }\n\n  const model = this.model;\n  const projection = utils.clone(this._fields);\n  const userProvidedFields = this._userProvidedFields || {};\n  // `populate`, `lean`\n  const mongooseOptions = this._mongooseOptions;\n  // `rawResult`\n  const options = this.options;\n\n  if (options.explain) {\n    return callback(null, doc);\n  }\n\n  if (!mongooseOptions.populate) {\n    return mongooseOptions.lean ?\n      _completeOneLean(doc, res, options, callback) :\n      completeOne(model, doc, res, options, projection, userProvidedFields,\n        null, callback);\n  }\n\n  const pop = helpers.preparePopulationOptionsMQ(this, this._mongooseOptions);\n  model.populate(doc, pop, (err, doc) => {\n    if (err) {\n      return callback(err);\n    }\n    return mongooseOptions.lean ?\n      _completeOneLean(doc, res, options, callback) :\n      completeOne(model, doc, res, options, projection, userProvidedFields,\n        pop, callback);\n  });\n};\n\n/**\n * Thunk around findOne()\n *\n * @param {Function} [callback]\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @api private\n */\n\nQuery.prototype._findOne = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error()) {\n    callback(this.error());\n    return null;\n  }\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n\n  // don't pass in the conditions because we already merged them in\n  Query.base.findOne.call(this, {}, (err, doc) => {\n    if (err) {\n      callback(err);\n      return null;\n    }\n\n    this._completeOne(doc, null, _wrapThunkCallback(this, callback));\n  });\n});\n\n/**\n * Declares the query a findOne operation. When executed, the first found document is passed to the callback.\n *\n * Passing a `callback` executes the query. The result of the query is a single document.\n *\n * * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `Model.findById()`\n * instead.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * ####Example\n *\n *     const query  = Kitten.where({ color: 'white' });\n *     query.findOne(function (err, kitten) {\n *       if (err) return handleError(err);\n *       if (kitten) {\n *         // doc may be null if no document matched\n *       }\n *     });\n *\n * @param {Object} [filter] mongodb selector\n * @param {Object} [projection] optional fields to return\n * @param {Object} [options] see [`setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @see Query.select #query_Query-select\n * @api public\n */\n\nQuery.prototype.findOne = function(conditions, projection, options, callback) {\n  this.op = 'findOne';\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = null;\n    projection = null;\n    options = null;\n  } else if (typeof projection === 'function') {\n    callback = projection;\n    options = null;\n    projection = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  // make sure we don't send in the whole Document to merge()\n  conditions = utils.toObject(conditions);\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (projection) {\n    this.select(projection);\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'findOne'));\n  }\n\n  if (!callback) {\n    // already merged in the conditions, don't need to send them in.\n    return Query.base.findOne.call(this);\n  }\n\n  this.exec(callback);\n  return this;\n};\n\n/**\n * Thunk around count()\n *\n * @param {Function} [callback]\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api private\n */\n\nQuery.prototype._count = wrapThunk(function(callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    this.error(err);\n  }\n\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n\n  this._collection.count(conds, options, utils.tick(callback));\n});\n\n/**\n * Thunk around countDocuments()\n *\n * @param {Function} [callback]\n * @see countDocuments http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n * @api private\n */\n\nQuery.prototype._countDocuments = wrapThunk(function(callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    this.error(err);\n  }\n\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n\n  this._collection.collection.countDocuments(conds, options, utils.tick(callback));\n});\n\n/**\n * Thunk around estimatedDocumentCount()\n *\n * @param {Function} [callback]\n * @see estimatedDocumentCount http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount\n * @api private\n */\n\nQuery.prototype._estimatedDocumentCount = wrapThunk(function(callback) {\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  const options = this._optionsForExec();\n\n  this._collection.collection.estimatedDocumentCount(options, utils.tick(callback));\n});\n\n/**\n * Specifies this query as a `count` query.\n *\n * This method is deprecated. If you want to count the number of documents in\n * a collection, e.g. `count({})`, use the [`estimatedDocumentCount()` function](/docs/api.html#query_Query-estimatedDocumentCount)\n * instead. Otherwise, use the [`countDocuments()`](/docs/api.html#query_Query-countDocuments) function instead.\n *\n * Passing a `callback` executes the query.\n *\n * This function triggers the following middleware.\n *\n * - `count()`\n *\n * ####Example:\n *\n *     const countQuery = model.where({ 'color': 'black' }).count();\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @deprecated\n * @param {Object} [filter] count documents that match this object\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api public\n */\n\nQuery.prototype.count = function(filter, callback) {\n  this.op = 'count';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = undefined;\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Specifies this query as a `estimatedDocumentCount()` query. Faster than\n * using `countDocuments()` for large collections because\n * `estimatedDocumentCount()` uses collection metadata rather than scanning\n * the entire collection.\n *\n * `estimatedDocumentCount()` does **not** accept a filter. `Model.find({ foo: bar }).estimatedDocumentCount()`\n * is equivalent to `Model.find().estimatedDocumentCount()`\n *\n * This function triggers the following middleware.\n *\n * - `estimatedDocumentCount()`\n *\n * ####Example:\n *\n *     await Model.find().estimatedDocumentCount();\n *\n * @param {Object} [options] passed transparently to the [MongoDB driver](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount)\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see estimatedDocumentCount http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount\n * @api public\n */\n\nQuery.prototype.estimatedDocumentCount = function(options, callback) {\n  this.op = 'estimatedDocumentCount';\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  if (typeof options === 'object' && options != null) {\n    this.setOptions(options);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Specifies this query as a `countDocuments()` query. Behaves like `count()`,\n * except it always does a full collection scan when passed an empty filter `{}`.\n *\n * There are also minor differences in how `countDocuments()` handles\n * [`$where` and a couple geospatial operators](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments).\n * versus `count()`.\n *\n * Passing a `callback` executes the query.\n *\n * This function triggers the following middleware.\n *\n * - `countDocuments()`\n *\n * ####Example:\n *\n *     const countQuery = model.where({ 'color': 'black' }).countDocuments();\n *\n *     query.countDocuments({ color: 'black' }).count(callback);\n *\n *     query.countDocuments({ color: 'black' }, callback);\n *\n *     query.where('color', 'black').countDocuments(function(err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     });\n *\n * The `countDocuments()` function is similar to `count()`, but there are a\n * [few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments).\n * Below are the operators that `count()` supports but `countDocuments()` does not,\n * and the suggested replacement:\n *\n * - `$where`: [`$expr`](https://docs.mongodb.com/manual/reference/operator/query/expr/)\n * - `$near`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$center`](https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center)\n * - `$nearSphere`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere)\n *\n * @param {Object} [filter] mongodb selector\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see countDocuments http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n * @api public\n */\n\nQuery.prototype.countDocuments = function(conditions, callback) {\n  this.op = 'countDocuments';\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = undefined;\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Thunk around distinct()\n *\n * @param {Function} [callback]\n * @see distinct http://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api private\n */\n\nQuery.prototype.__distinct = wrapThunk(function __distinct(callback) {\n  this._castConditions();\n\n  if (this.error()) {\n    callback(this.error());\n    return null;\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n\n  const options = this._optionsForExec();\n\n  // don't pass in the conditions because we already merged them in\n  this._collection.collection.\n    distinct(this._distinct, this._conditions, options, callback);\n});\n\n/**\n * Declares or executes a distinct() operation.\n *\n * Passing a `callback` executes the query.\n *\n * This function does not trigger any middleware.\n *\n * ####Example\n *\n *     distinct(field, conditions, callback)\n *     distinct(field, conditions)\n *     distinct(field, callback)\n *     distinct(field)\n *     distinct(callback)\n *     distinct()\n *\n * @param {String} [field]\n * @param {Object|Query} [filter]\n * @param {Function} [callback] optional params are (error, arr)\n * @return {Query} this\n * @see distinct http://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api public\n */\n\nQuery.prototype.distinct = function(field, conditions, callback) {\n  this.op = 'distinct';\n  if (!callback) {\n    if (typeof conditions === 'function') {\n      callback = conditions;\n      conditions = undefined;\n    } else if (typeof field === 'function') {\n      callback = field;\n      field = undefined;\n      conditions = undefined;\n    }\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'distinct'));\n  }\n\n  if (field != null) {\n    this._distinct = field;\n  }\n\n  if (callback != null) {\n    this.exec(callback);\n  }\n\n  return this;\n};\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The\n * sort order of each path is ascending unless the path name is prefixed with `-`\n * which will be treated as descending.\n *\n * ####Example\n *\n *     // sort by \"field\" ascending and \"test\" descending\n *     query.sort({ field: 'asc', test: -1 });\n *\n *     // equivalent\n *     query.sort('field -test');\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see cursor.sort http://docs.mongodb.org/manual/reference/method/cursor.sort/\n * @api public\n */\n\nQuery.prototype.sort = function(arg) {\n  if (arguments.length > 1) {\n    throw new Error('sort() only takes 1 Argument');\n  }\n\n  return Query.base.sort.call(this, arg);\n};\n\n/**\n * Declare and/or execute this query as a remove() operation. `remove()` is\n * deprecated, you should use [`deleteOne()`](#query_Query-deleteOne)\n * or [`deleteMany()`](#query_Query-deleteMany) instead.\n *\n * This function does not trigger any middleware\n *\n * ####Example\n *\n *     Character.remove({ name: /Stark/ }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#remove()` function](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * ####Example\n *\n *     const res = await Character.remove({ name: /Stark/ });\n *     // Number of docs deleted\n *     res.deletedCount;\n *\n * ####Note\n *\n * Calling `remove()` creates a [Mongoose query](./queries.html), and a query\n * does not execute until you either pass a callback, call [`Query#then()`](#query_Query-then),\n * or call [`Query#exec()`](#query_Query-exec).\n *\n *     // not executed\n *     const query = Character.remove({ name: /Stark/ });\n *\n *     // executed\n *     Character.remove({ name: /Stark/ }, callback);\n *     Character.remove({ name: /Stark/ }).remove(callback);\n *\n *     // executed without a callback\n *     Character.exec();\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @deprecated\n * @see deleteWriteOpResult http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB driver remove http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove\n * @api public\n */\n\nQuery.prototype.remove = function(filter, callback) {\n  this.op = 'remove';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'remove'));\n  }\n\n  if (!callback) {\n    return Query.base.remove.call(this);\n  }\n\n  this.exec(callback);\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._remove = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  return Query.base.remove.call(this, helpers.handleDeleteWriteOpResult(callback));\n});\n\n/**\n * Declare and/or execute this query as a `deleteOne()` operation. Works like\n * remove, except it deletes at most one document regardless of the `single`\n * option.\n *\n * This function triggers `deleteOne` middleware.\n *\n * ####Example\n *\n *     await Character.deleteOne({ name: 'Eddard Stark' });\n *\n *     // Using callbacks:\n *     Character.deleteOne({ name: 'Eddard Stark' }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#deleteOne()` function](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteOne).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * ####Example\n *\n *     const res = await Character.deleteOne({ name: 'Eddard Stark' });\n *     // `1` if MongoDB deleted a doc, `0` if no docs matched the filter `{ name: ... }`\n *     res.deletedCount;\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @see deleteWriteOpResult http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB Driver deleteOne http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteOne\n * @api public\n */\n\nQuery.prototype.deleteOne = function(filter, options, callback) {\n  this.op = 'deleteOne';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else {\n    this.setOptions(options);\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteOne'));\n  }\n\n  if (!callback) {\n    return Query.base.deleteOne.call(this);\n  }\n\n  this.exec.call(this, callback);\n\n  return this;\n};\n\n/*!\n * Internal thunk for `deleteOne()`\n */\n\nQuery.prototype._deleteOne = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  return Query.base.deleteOne.call(this, helpers.handleDeleteWriteOpResult(callback));\n});\n\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Works like\n * remove, except it deletes _every_ document that matches `filter` in the\n * collection, regardless of the value of `single`.\n *\n * This function triggers `deleteMany` middleware.\n *\n * ####Example\n *\n *     await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });\n *\n *     // Using callbacks:\n *     Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#deleteMany()` function](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteMany).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * ####Example\n *\n *     const res = await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });\n *     // `0` if no docs matched the filter, number of docs deleted otherwise\n *     res.deletedCount;\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @see deleteWriteOpResult http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB Driver deleteMany http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteMany\n * @api public\n */\n\nQuery.prototype.deleteMany = function(filter, options, callback) {\n  this.op = 'deleteMany';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else {\n    this.setOptions(options);\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteMany'));\n  }\n\n  if (!callback) {\n    return Query.base.deleteMany.call(this);\n  }\n\n  this.exec.call(this, callback);\n\n  return this;\n};\n\n/*!\n * Internal thunk around `deleteMany()`\n */\n\nQuery.prototype._deleteMany = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  return Query.base.deleteMany.call(this, helpers.handleDeleteWriteOpResult(callback));\n});\n\n/*!\n * hydrates a document\n *\n * @param {Model} model\n * @param {Document} doc\n * @param {Object} res 3rd parameter to callback\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n */\n\nfunction completeOne(model, doc, res, options, fields, userProvidedFields, pop, callback) {\n  const opts = pop ?\n    { populated: pop }\n    : undefined;\n\n  if (options.rawResult && doc == null) {\n    _init(null);\n    return null;\n  }\n\n  const casted = helpers.createModel(model, doc, fields, userProvidedFields, options);\n  try {\n    casted.init(doc, opts, _init);\n  } catch (error) {\n    _init(error);\n  }\n\n  function _init(err) {\n    if (err) {\n      return immediate(() => callback(err));\n    }\n\n\n    if (options.rawResult) {\n      if (doc && casted) {\n        if (options.session != null) {\n          casted.$session(options.session);\n        }\n        res.value = casted;\n      } else {\n        res.value = null;\n      }\n      return immediate(() => callback(null, res));\n    }\n    if (options.session != null) {\n      casted.$session(options.session);\n    }\n    immediate(() => callback(null, casted));\n  }\n}\n\n/*!\n * If the model is a discriminator type and not root, then add the key & value to the criteria.\n */\n\nfunction prepareDiscriminatorCriteria(query) {\n  if (!query || !query.model || !query.model.schema) {\n    return;\n  }\n\n  const schema = query.model.schema;\n\n  if (schema && schema.discriminatorMapping && !schema.discriminatorMapping.isRoot) {\n    query._conditions[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;\n  }\n}\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found\n * document (if any) to the callback. The query executes if\n * `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * ####Available options\n *\n * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `fields`: {Object|String} - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `context` (string) if set to 'query' and `runValidators` is on, `this` will refer to the query in custom validator functions that update validation runs. Does nothing if `runValidators` is false.\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @method findOneAndUpdate\n * @memberOf Query\n * @instance\n * @param {Object|Query} [filter]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\n * @param {Function} [callback] optional params are (error, doc), _unless_ `rawResult` is used, in which case params are (error, writeOpResult)\n * @see Tutorial /docs/tutorials/findoneandupdate.html\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function(criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      if (typeof doc === 'function') {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      options = undefined;\n      break;\n    case 1:\n      if (typeof criteria === 'function') {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n  }\n\n  if (mquery.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  options = options ? utils.clone(options) : {};\n\n  if (options.projection) {\n    this.select(options.projection);\n    delete options.projection;\n  }\n  if (options.fields) {\n    this.select(options.fields);\n    delete options.fields;\n  }\n\n\n  const returnOriginal = get(this, 'model.base.options.returnOriginal');\n  if (options.new == null && options.returnDocument == null && options.returnOriginal == null && returnOriginal != null) {\n    options.returnOriginal = returnOriginal;\n  }\n\n  this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/*!\n * Thunk around findOneAndUpdate()\n *\n * @param {Function} [callback]\n * @api private\n */\n\nQuery.prototype._findOneAndUpdate = wrapThunk(function(callback) {\n  if (this.error() != null) {\n    return callback(this.error());\n  }\n\n  this._findAndModify('update', callback);\n});\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to\n * the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndRemove()`\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *\n * @method findOneAndRemove\n * @memberOf Query\n * @instance\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = function(conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n  this._validate();\n\n  switch (arguments.length) {\n    case 2:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 1:\n      if (typeof conditions === 'function') {\n        callback = conditions;\n        conditions = undefined;\n        options = undefined;\n      }\n      break;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Issues a MongoDB [findOneAndDelete](https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndDelete/) command.\n *\n * Finds a matching document, removes it, and passes the found document (if any)\n * to the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * This function differs slightly from `Model.findOneAndRemove()` in that\n * `findOneAndRemove()` becomes a [MongoDB `findAndModify()` command](https://docs.mongodb.com/manual/reference/method/db.collection.findAndModify/),\n * as opposed to a `findOneAndDelete()` command. For most mongoose use cases,\n * this distinction is purely pedantic. You should use `findOneAndDelete()`\n * unless you have a good reason not to.\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     A.where().findOneAndDelete(conditions, options, callback) // executes\n *     A.where().findOneAndDelete(conditions, options)  // return Query\n *     A.where().findOneAndDelete(conditions, callback) // executes\n *     A.where().findOneAndDelete(conditions) // returns Query\n *     A.where().findOneAndDelete(callback)   // executes\n *     A.where().findOneAndDelete()           // returns Query\n *\n * @method findOneAndDelete\n * @memberOf Query\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndDelete = function(conditions, options, callback) {\n  this.op = 'findOneAndDelete';\n  this._validate();\n\n  switch (arguments.length) {\n    case 2:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 1:\n      if (typeof conditions === 'function') {\n        callback = conditions;\n        conditions = undefined;\n        options = undefined;\n      }\n      break;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/*!\n * Thunk around findOneAndDelete()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndDelete = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  const filter = this._conditions;\n  const options = this._optionsForExec();\n  let fields = null;\n\n  if (this._fields != null) {\n    options.projection = this._castFields(utils.clone(this._fields));\n    fields = options.projection;\n    if (fields instanceof Error) {\n      callback(fields);\n      return null;\n    }\n  }\n\n  this._collection.collection.findOneAndDelete(filter, options, _wrapThunkCallback(this, (err, res) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const doc = res.value;\n\n    return this._completeOne(doc, res, callback);\n  }));\n});\n\n/**\n * Issues a MongoDB [findOneAndReplace](https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndReplace/) command.\n *\n * Finds a matching document, removes it, and passes the found document (if any)\n * to the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndReplace()`\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     A.where().findOneAndReplace(filter, replacement, options, callback); // executes\n *     A.where().findOneAndReplace(filter, replacement, options); // return Query\n *     A.where().findOneAndReplace(filter, replacement, callback); // executes\n *     A.where().findOneAndReplace(filter); // returns Query\n *     A.where().findOneAndReplace(callback); // executes\n *     A.where().findOneAndReplace(); // returns Query\n *\n * @method findOneAndReplace\n * @memberOf Query\n * @param {Object} [filter]\n * @param {Object} [replacement]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndReplace = function(filter, replacement, options, callback) {\n  this.op = 'findOneAndReplace';\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if (typeof options === 'function') {\n        callback = options;\n        options = void 0;\n      }\n      break;\n    case 2:\n      if (typeof replacement === 'function') {\n        callback = replacement;\n        replacement = void 0;\n      }\n      break;\n    case 1:\n      if (typeof filter === 'function') {\n        callback = filter;\n        filter = void 0;\n        replacement = void 0;\n        options = void 0;\n      }\n      break;\n  }\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n  }\n\n  if (replacement != null) {\n    if (hasDollarKeys(replacement)) {\n      throw new Error('The replacement document must not contain atomic operators.');\n    }\n    this._mergeUpdate(replacement);\n  }\n\n  options = options || {};\n\n  const returnOriginal = get(this, 'model.base.options.returnOriginal');\n  if (options.new == null && options.returnDocument == null && options.returnOriginal == null && returnOriginal != null) {\n    options.returnOriginal = returnOriginal;\n  }\n  this.setOptions(options);\n  this.setOptions({ overwrite: true });\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/*!\n * Thunk around findOneAndReplace()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndReplace = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  const filter = this._conditions;\n  const options = this._optionsForExec();\n  convertNewToReturnDocument(options);\n  let fields = null;\n\n  let castedDoc = new this.model(this._update, null, true);\n  this._update = castedDoc;\n\n  this._applyPaths();\n  if (this._fields != null) {\n    options.projection = this._castFields(utils.clone(this._fields));\n    fields = options.projection;\n    if (fields instanceof Error) {\n      callback(fields);\n      return null;\n    }\n  }\n\n  castedDoc.validate(err => {\n    if (err != null) {\n      return callback(err);\n    }\n\n    if (castedDoc.toBSON) {\n      castedDoc = castedDoc.toBSON();\n    }\n\n    this._collection.collection.findOneAndReplace(filter, castedDoc, options, _wrapThunkCallback(this, (err, res) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const doc = res.value;\n\n      return this._completeOne(doc, res, callback);\n    }));\n  });\n});\n\n/*!\n * Support the `new` option as an alternative to `returnOriginal` for backwards\n * compat.\n */\n\nfunction convertNewToReturnDocument(options) {\n  if ('new' in options) {\n    options.returnDocument = options['new'] ? 'after' : 'before';\n    delete options['new'];\n  }\n  if ('returnOriginal' in options) {\n    options.returnDocument = options['returnOriginal'] ? 'before' : 'after';\n    delete options['returnOriginal'];\n  }\n}\n\n/*!\n * Thunk around findOneAndRemove()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndRemove = wrapThunk(function(callback) {\n  if (this.error() != null) {\n    callback(this.error());\n    return;\n  }\n\n  this._findAndModify('remove', callback);\n});\n\n/*!\n * Get options from query opts, falling back to the base mongoose object.\n */\n\nfunction _getOption(query, option, def) {\n  const opts = query._optionsForExec(query.model);\n\n  if (option in opts) {\n    return opts[option];\n  }\n  if (option in query.model.base.options) {\n    return query.model.base.options[option];\n  }\n  return def;\n}\n\n/*!\n * Override mquery.prototype._findAndModify to provide casting etc.\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype._findAndModify = function(type, callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('Expected callback in _findAndModify');\n  }\n\n  const model = this.model;\n  const schema = model.schema;\n  const _this = this;\n  let fields;\n\n  const castedQuery = castQuery(this);\n  if (castedQuery instanceof Error) {\n    return callback(castedQuery);\n  }\n\n  _castArrayFilters(this);\n\n  const opts = this._optionsForExec(model);\n\n  if ('strict' in opts) {\n    this._mongooseOptions.strict = opts.strict;\n  }\n\n  const isOverwriting = this.options.overwrite && !hasDollarKeys(this._update);\n  if (isOverwriting) {\n    this._update = new this.model(this._update, null, true);\n  }\n\n  if (type === 'remove') {\n    opts.remove = true;\n  } else {\n    if (!('new' in opts) && !('returnOriginal' in opts) && !('returnDocument' in opts)) {\n      opts.new = false;\n    }\n    if (!('upsert' in opts)) {\n      opts.upsert = false;\n    }\n    if (opts.upsert || opts['new']) {\n      opts.remove = false;\n    }\n\n    if (!isOverwriting) {\n      this._update = castDoc(this, opts.overwrite);\n      const _opts = Object.assign({}, opts, {\n        setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\n      });\n      this._update = setDefaultsOnInsert(this._conditions, schema, this._update, _opts);\n      if (!this._update || Object.keys(this._update).length === 0) {\n        if (opts.upsert) {\n          // still need to do the upsert to empty doc\n          const doc = utils.clone(castedQuery);\n          delete doc._id;\n          this._update = { $set: doc };\n        } else {\n          this.findOne(callback);\n          return this;\n        }\n      } else if (this._update instanceof Error) {\n        return callback(this._update);\n      } else {\n        // In order to make MongoDB 2.6 happy (see\n        // https://jira.mongodb.org/browse/SERVER-12266 and related issues)\n        // if we have an actual update document but $set is empty, junk the $set.\n        if (this._update.$set && Object.keys(this._update.$set).length === 0) {\n          delete this._update.$set;\n        }\n      }\n    }\n\n    if (Array.isArray(opts.arrayFilters)) {\n      opts.arrayFilters = removeUnusedArrayFilters(this._update, opts.arrayFilters);\n    }\n  }\n\n  this._applyPaths();\n\n  const options = this._mongooseOptions;\n\n  if (this._fields) {\n    fields = utils.clone(this._fields);\n    opts.projection = this._castFields(fields);\n    if (opts.projection instanceof Error) {\n      return callback(opts.projection);\n    }\n  }\n\n  if (opts.sort) convertSortToArray(opts);\n\n  const cb = function(err, doc, res) {\n    if (err) {\n      return callback(err);\n    }\n\n    _this._completeOne(doc, res, callback);\n  };\n\n  let useFindAndModify = true;\n  const runValidators = _getOption(this, 'runValidators', false);\n  const base = _this.model && _this.model.base;\n  const conn = get(model, 'collection.conn', {});\n  if ('useFindAndModify' in base.options) {\n    useFindAndModify = base.get('useFindAndModify');\n  }\n  if ('useFindAndModify' in conn.config) {\n    useFindAndModify = conn.config.useFindAndModify;\n  }\n  if ('useFindAndModify' in options) {\n    useFindAndModify = options.useFindAndModify;\n  }\n  if (useFindAndModify === false) {\n    // Bypass mquery\n    const collection = _this._collection.collection;\n    convertNewToReturnDocument(opts);\n\n    if (type === 'remove') {\n      collection.findOneAndDelete(castedQuery, opts, _wrapThunkCallback(_this, function(error, res) {\n        return cb(error, res ? res.value : res, res);\n      }));\n\n      return this;\n    }\n\n    // honors legacy overwrite option for backward compatibility\n    const updateMethod = isOverwriting ? 'findOneAndReplace' : 'findOneAndUpdate';\n\n    if (runValidators) {\n      this.validate(this._update, opts, isOverwriting, error => {\n        if (error) {\n          return callback(error);\n        }\n        if (this._update && this._update.toBSON) {\n          this._update = this._update.toBSON();\n        }\n\n        collection[updateMethod](castedQuery, this._update, opts, _wrapThunkCallback(_this, function(error, res) {\n          return cb(error, res ? res.value : res, res);\n        }));\n      });\n    } else {\n      if (this._update && this._update.toBSON) {\n        this._update = this._update.toBSON();\n      }\n      collection[updateMethod](castedQuery, this._update, opts, _wrapThunkCallback(_this, function(error, res) {\n        return cb(error, res ? res.value : res, res);\n      }));\n    }\n\n    return this;\n  }\n\n  if (runValidators) {\n    this.validate(this._update, opts, isOverwriting, function(error) {\n      if (error) {\n        return callback(error);\n      }\n      _legacyFindAndModify.call(_this, castedQuery, _this._update, opts, cb);\n    });\n  } else {\n    _legacyFindAndModify.call(_this, castedQuery, _this._update, opts, cb);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _completeOneLean(doc, res, opts, callback) {\n  if (opts.rawResult) {\n    return callback(null, res);\n  }\n  return callback(null, doc);\n}\n\n\n/*!\n * ignore\n */\n\nconst _legacyFindAndModify = util.deprecate(function(filter, update, opts, cb) {\n  if (update && update.toBSON) {\n    update = update.toBSON();\n  }\n  const collection = this._collection;\n  const sort = opts != null && Array.isArray(opts.sort) ? opts.sort : [];\n  const _cb = _wrapThunkCallback(this, function(error, res) {\n    return cb(error, res ? res.value : res, res);\n  });\n  collection.collection._findAndModify(filter, sort, update, opts, _cb);\n}, 'Mongoose: `findOneAndUpdate()` and `findOneAndDelete()` without the ' +\n  '`useFindAndModify` option set to false are deprecated. See: ' +\n  'https://mongoosejs.com/docs/5.x/docs/deprecations.html#findandmodify');\n\n/*!\n * Override mquery.prototype._mergeUpdate to handle mongoose objects in\n * updates.\n *\n * @param {Object} doc\n * @api private\n */\n\nQuery.prototype._mergeUpdate = function(doc) {\n  if (doc == null || (typeof doc === 'object' && Object.keys(doc).length === 0)) {\n    return;\n  }\n\n  if (!this._update) {\n    this._update = Array.isArray(doc) ? [] : {};\n  }\n  if (doc instanceof Query) {\n    if (Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else if (Array.isArray(doc)) {\n    if (!Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    this._update = this._update.concat(doc);\n  } else {\n    if (Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    utils.mergeClone(this._update, doc);\n  }\n};\n\n/*!\n * The mongodb driver 1.3.23 only supports the nested array sort\n * syntax. We must convert it or sorting findAndModify will not work.\n */\n\nfunction convertSortToArray(opts) {\n  if (Array.isArray(opts.sort)) {\n    return;\n  }\n  if (!utils.isObject(opts.sort)) {\n    return;\n  }\n\n  const sort = [];\n\n  for (const key in opts.sort) {\n    if (utils.object.hasOwnProperty(opts.sort, key)) {\n      sort.push([key, opts.sort[key]]);\n    }\n  }\n\n  opts.sort = sort;\n}\n\n/*!\n * ignore\n */\n\nfunction _updateThunk(op, callback) {\n  this._castConditions();\n\n  _castArrayFilters(this);\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n  const oldCb = callback;\n  callback = function(error, result) {\n    oldCb(error, result ? result.result : { ok: 0, n: 0, nModified: 0 });\n  };\n\n  const castedQuery = this._conditions;\n  const options = this._optionsForExec(this.model);\n\n  ++this._executionCount;\n\n  this._update = utils.clone(this._update, options);\n  const isOverwriting = this.options.overwrite && !hasDollarKeys(this._update);\n  if (isOverwriting) {\n    if (op === 'updateOne' || op === 'updateMany') {\n      return callback(new MongooseError('The MongoDB server disallows ' +\n        'overwriting documents using `' + op + '`. See: ' +\n        'https://mongoosejs.com/docs/deprecations.html#update'));\n    }\n    this._update = new this.model(this._update, null, true);\n  } else {\n    this._update = castDoc(this, options.overwrite);\n\n    if (this._update instanceof Error) {\n      callback(this._update);\n      return null;\n    }\n\n    if (this._update == null || Object.keys(this._update).length === 0) {\n      callback(null, 0);\n      return null;\n    }\n\n    const _opts = Object.assign({}, options, {\n      setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\n    });\n    this._update = setDefaultsOnInsert(this._conditions, this.model.schema,\n      this._update, _opts);\n  }\n\n  if (Array.isArray(options.arrayFilters)) {\n    options.arrayFilters = removeUnusedArrayFilters(this._update, options.arrayFilters);\n  }\n\n  const runValidators = _getOption(this, 'runValidators', false);\n  if (runValidators) {\n    this.validate(this._update, options, isOverwriting, err => {\n      if (err) {\n        return callback(err);\n      }\n\n      if (this._update.toBSON) {\n        this._update = this._update.toBSON();\n      }\n      this._collection[op](castedQuery, this._update, options, callback);\n    });\n    return null;\n  }\n\n  if (this._update.toBSON) {\n    this._update = this._update.toBSON();\n  }\n\n  this._collection[op](castedQuery, this._update, options, callback);\n  return null;\n}\n\n/*!\n * Mongoose calls this function internally to validate the query if\n * `runValidators` is set\n *\n * @param {Object} castedDoc the update, after casting\n * @param {Object} options the options from `_optionsForExec()`\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype.validate = function validate(castedDoc, options, isOverwriting, callback) {\n  return promiseOrCallback(callback, cb => {\n    try {\n      if (isOverwriting) {\n        castedDoc.validate(cb);\n      } else {\n        updateValidators(this, this.model.schema, castedDoc, options, cb);\n      }\n    } catch (err) {\n      immediate(function() {\n        cb(err);\n      });\n    }\n  });\n};\n\n/*!\n * Internal thunk for .update()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._execUpdate = wrapThunk(function(callback) {\n  return _updateThunk.call(this, 'update', callback);\n});\n\n/*!\n * Internal thunk for .updateMany()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._updateMany = wrapThunk(function(callback) {\n  return _updateThunk.call(this, 'updateMany', callback);\n});\n\n/*!\n * Internal thunk for .updateOne()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._updateOne = wrapThunk(function(callback) {\n  return _updateThunk.call(this, 'updateOne', callback);\n});\n\n/*!\n * Internal thunk for .replaceOne()\n *\n * @param {Function} callback\n * @see Model.replaceOne #model_Model.replaceOne\n * @api private\n */\nQuery.prototype._replaceOne = wrapThunk(function(callback) {\n  return _updateThunk.call(this, 'replaceOne', callback);\n});\n\n/**\n * Declare and/or execute this query as an update() operation.\n *\n * _All paths passed that are not [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operations will become `$set` ops._\n *\n * This function triggers the following middleware.\n *\n * - `update()`\n *\n * ####Example\n *\n *     Model.where({ _id: id }).update({ title: 'words' })\n *\n *     // becomes\n *\n *     Model.where({ _id: id }).update({ $set: { title: 'words' }})\n *\n * ####Valid options:\n *\n *  - `upsert` (boolean) whether to create the doc if it doesn't match (false)\n *  - `multi` (boolean) whether multiple documents should be updated (false)\n *  - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n *  - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n *  - `strict` (boolean) overrides the `strict` option for this update\n *  - `overwrite` (boolean) disables update-only mode, allowing you to overwrite the doc (false)\n *  - `context` (string) if set to 'query' and `runValidators` is on, `this` will refer to the query in custom validator functions that update validation runs. Does nothing if `runValidators` is false.\n *  - `read`\n *  - `writeConcern`\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback, we must first call update() and then execute it by using the `exec()` method.\n *\n *     const q = Model.where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed\n *\n *     // keys that are not [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) ops become `$set`.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).exec();\n *\n *     // overwriting with empty docs\n *     const q = Model.where({ _id: id }).setOptions({ overwrite: true })\n *     q.update({ }, callback); // executes\n *\n *     // multi update with overwrite to empty doc\n *     const q = Model.where({ _id: id });\n *     q.setOptions({ multi: true, overwrite: true })\n *     q.update({ });\n *     q.update(callback); // executed\n *\n *     // multi updates\n *     Model.where()\n *          .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *\n *     // more multi updates\n *     Model.where()\n *          .setOptions({ multi: true })\n *          .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     Model.where({ email: 'address@example.com' })\n *          .update({ $inc: { counter: 1 }}, callback)\n *\n * API summary\n *\n *     update(filter, doc, options, cb) // executes\n *     update(filter, doc, options)\n *     update(filter, doc, cb) // executes\n *     update(filter, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes\n *     update()\n *\n * @param {Object} [filter]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.update = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'update', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as an updateMany() operation. Same as\n * `update()`, except MongoDB will update _all_ documents that match\n * `filter` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * ####Example:\n *     const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} [filter]\n * @param {Object|Array} [update] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.updateMany = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateMany', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as an updateOne() operation. Same as\n * `update()`, except it does not support the `multi` or `overwrite` options.\n *\n * - MongoDB will update _only_ the first document that matches `filter` regardless of the value of the `multi` option.\n * - Use `replaceOne()` if you want to overwrite an entire document rather than using [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operators like `$set`.\n *\n * **Note** updateOne will _not_ fire update middleware. Use `pre('updateOne')`\n * and `post('updateOne')` instead.\n *\n * ####Example:\n *     const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} [filter]\n * @param {Object|Array} [update] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.updateOne = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateOne', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as a replaceOne() operation. Same as\n * `update()`, except MongoDB will replace the existing document and will\n * not accept any [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operators (`$set`, etc.)\n *\n * **Note** replaceOne will _not_ fire update middleware. Use `pre('replaceOne')`\n * and `post('replaceOne')` instead.\n *\n * ####Example:\n *     const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} [filter]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.replaceOne = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  this.setOptions({ overwrite: true });\n  return _update(this, 'replaceOne', conditions, doc, options, callback);\n};\n\n/*!\n * Internal helper for update, updateMany, updateOne, replaceOne\n */\n\nfunction _update(query, op, filter, doc, options, callback) {\n  // make sure we don't send in the whole Document to merge()\n  query.op = op;\n  filter = utils.toObject(filter);\n  doc = doc || {};\n\n  // strict is an option used in the update checking, make sure it gets set\n  if (options != null) {\n    if ('strict' in options) {\n      query._mongooseOptions.strict = options.strict;\n    }\n  }\n\n  if (!(filter instanceof Query) &&\n      filter != null &&\n      filter.toString() !== '[object Object]') {\n    query.error(new ObjectParameterError(filter, 'filter', op));\n  } else {\n    query.merge(filter);\n  }\n\n  if (utils.isObject(options)) {\n    query.setOptions(options);\n  }\n\n  query._mergeUpdate(doc);\n\n  // Hooks\n  if (callback) {\n    query.exec(callback);\n\n    return query;\n  }\n\n  return Query.base[op].call(query, filter, void 0, options, callback);\n}\n\n/**\n * Runs a function `fn` and treats the return value of `fn` as the new value\n * for the query to resolve to.\n *\n * Any functions you pass to `map()` will run **after** any post hooks.\n *\n * ####Example:\n *\n *     const res = await MyModel.findOne().map(res => {\n *       // Sets a `loadedAt` property on the doc that tells you the time the\n *       // document was loaded.\n *       return res == null ?\n *         res :\n *         Object.assign(res, { loadedAt: new Date() });\n *     });\n *\n * @method map\n * @memberOf Query\n * @instance\n * @param {Function} fn function to run to transform the query result\n * @return {Query} this\n */\n\nQuery.prototype.map = function(fn) {\n  this._transforms.push(fn);\n  return this;\n};\n\n/**\n * Make this query throw an error if no documents match the given `filter`.\n * This is handy for integrating with async/await, because `orFail()` saves you\n * an extra `if` statement to check if no document was found.\n *\n * ####Example:\n *\n *     // Throws if no doc returned\n *     await Model.findOne({ foo: 'bar' }).orFail();\n *\n *     // Throws if no document was updated\n *     await Model.updateOne({ foo: 'bar' }, { name: 'test' }).orFail();\n *\n *     // Throws \"No docs found!\" error if no docs match `{ foo: 'bar' }`\n *     await Model.find({ foo: 'bar' }).orFail(new Error('No docs found!'));\n *\n *     // Throws \"Not found\" error if no document was found\n *     await Model.findOneAndUpdate({ foo: 'bar' }, { name: 'test' }).\n *       orFail(() => Error('Not found'));\n *\n * @method orFail\n * @memberOf Query\n * @instance\n * @param {Function|Error} [err] optional error to throw if no docs match `filter`. If not specified, `orFail()` will throw a `DocumentNotFoundError`\n * @return {Query} this\n */\n\nQuery.prototype.orFail = function(err) {\n  this.map(res => {\n    switch (this.op) {\n      case 'find':\n        if (res.length === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOne':\n        if (res == null) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'update':\n      case 'updateMany':\n      case 'updateOne':\n        if (get(res, 'nModified') === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOneAndDelete':\n      case 'findOneAndRemove':\n        if (get(res, 'lastErrorObject.n') === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOneAndUpdate':\n      case 'findOneAndReplace':\n        if (get(res, 'lastErrorObject.updatedExisting') === false) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'deleteMany':\n      case 'deleteOne':\n      case 'remove':\n        if (res.n === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      default:\n        break;\n    }\n\n    return res;\n  });\n  return this;\n};\n\n/*!\n * Get the error to throw for `orFail()`\n */\n\nfunction _orFailError(err, query) {\n  if (typeof err === 'function') {\n    err = err.call(query);\n  }\n\n  if (err == null) {\n    err = new DocumentNotFoundError(query.getQuery(), query.model.modelName);\n  }\n\n  return err;\n}\n\n/**\n * Executes the query\n *\n * ####Examples:\n *\n *     const promise = query.exec();\n *     const promise = query.exec('update');\n *\n *     query.exec(callback);\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback] optional params depend on the function being called\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.exec = function exec(op, callback) {\n  const _this = this;\n  // Ensure that `exec()` is the first thing that shows up in\n  // the stack when cast errors happen.\n  const castError = new CastError();\n\n  if (typeof op === 'function') {\n    callback = op;\n    op = null;\n  } else if (typeof op === 'string') {\n    this.op = op;\n  }\n\n  callback = this.model.$handleCallbackError(callback);\n\n  return promiseOrCallback(callback, (cb) => {\n    cb = this.model.$wrapCallback(cb);\n\n    if (!_this.op) {\n      cb();\n      return;\n    }\n\n    this._hooks.execPre('exec', this, [], (error) => {\n      if (error != null) {\n        return cb(_cleanCastErrorStack(castError, error));\n      }\n      let thunk = '_' + this.op;\n      if (this.op === 'update') {\n        thunk = '_execUpdate';\n      } else if (this.op === 'distinct') {\n        thunk = '__distinct';\n      }\n      this[thunk].call(this, (error, res) => {\n        if (error) {\n          return cb(_cleanCastErrorStack(castError, error));\n        }\n\n        this._hooks.execPost('exec', this, [], {}, (error) => {\n          if (error) {\n            return cb(_cleanCastErrorStack(castError, error));\n          }\n\n          cb(null, res);\n        });\n      });\n    });\n  }, this.model.events);\n};\n\n/*!\n * ignore\n */\n\nfunction _cleanCastErrorStack(castError, error) {\n  if (error instanceof CastError) {\n    castError.copy(error);\n    return castError;\n  }\n\n  return error;\n}\n\n/*!\n * ignore\n */\n\nfunction _wrapThunkCallback(query, cb) {\n  return function(error, res) {\n    if (error != null) {\n      return cb(error);\n    }\n\n    for (const fn of query._transforms) {\n      try {\n        res = fn(res);\n      } catch (error) {\n        return cb(error);\n      }\n    }\n\n    return cb(null, res);\n  };\n}\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * More about [`then()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/then).\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = function(resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n * Like `.then()`, but only takes a rejection handler.\n *\n * More about [Promise `catch()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/catch).\n *\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.catch = function(reject) {\n  return this.exec().then(null, reject);\n};\n\n/**\n * Add pre [middleware](/docs/middleware.html) to this query instance. Doesn't affect\n * other queries.\n *\n * ####Example:\n *\n *     const q1 = Question.find({ answer: 42 });\n *     q1.pre(function middleware() {\n *       console.log(this.getFilter());\n *     });\n *     await q1.exec(); // Prints \"{ answer: 42 }\"\n *\n *     // Doesn't print anything, because `middleware()` is only\n *     // registered on `q1`.\n *     await Question.find({ answer: 42 });\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.pre = function(fn) {\n  this._hooks.pre('exec', fn);\n  return this;\n};\n\n/**\n * Add post [middleware](/docs/middleware.html) to this query instance. Doesn't affect\n * other queries.\n *\n * ####Example:\n *\n *     const q1 = Question.find({ answer: 42 });\n *     q1.post(function middleware() {\n *       console.log(this.getFilter());\n *     });\n *     await q1.exec(); // Prints \"{ answer: 42 }\"\n *\n *     // Doesn't print anything, because `middleware()` is only\n *     // registered on `q1`.\n *     await Question.find({ answer: 42 });\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.post = function(fn) {\n  this._hooks.post('exec', fn);\n  return this;\n};\n\n/*!\n * Casts obj for an update command.\n *\n * @param {Object} obj\n * @return {Object} obj after casting its values\n * @api private\n */\n\nQuery.prototype._castUpdate = function _castUpdate(obj, overwrite) {\n  let strict;\n  let schema = this.schema;\n\n  const discriminatorKey = schema.options.discriminatorKey;\n  const baseSchema = schema._baseSchema ? schema._baseSchema : schema;\n  if (this._mongooseOptions.overwriteDiscriminatorKey &&\n      obj[discriminatorKey] != null &&\n      baseSchema.discriminators) {\n    const _schema = baseSchema.discriminators[obj[discriminatorKey]];\n    if (_schema != null) {\n      schema = _schema;\n    }\n  }\n\n  if ('strict' in this._mongooseOptions) {\n    strict = this._mongooseOptions.strict;\n  } else if (this.schema && this.schema.options) {\n    strict = this.schema.options.strict;\n  } else {\n    strict = true;\n  }\n\n  let omitUndefined = false;\n  if ('omitUndefined' in this._mongooseOptions) {\n    omitUndefined = this._mongooseOptions.omitUndefined;\n  }\n\n  let useNestedStrict;\n  if ('useNestedStrict' in this.options) {\n    useNestedStrict = this.options.useNestedStrict;\n  }\n\n  let upsert;\n  if ('upsert' in this.options) {\n    upsert = this.options.upsert;\n  }\n\n  const filter = this._conditions;\n  if (schema != null &&\n      utils.hasUserDefinedProperty(filter, schema.options.discriminatorKey) &&\n      typeof filter[schema.options.discriminatorKey] !== 'object' &&\n      schema.discriminators != null) {\n    const discriminatorValue = filter[schema.options.discriminatorKey];\n    const byValue = getDiscriminatorByValue(this.model.discriminators, discriminatorValue);\n    schema = schema.discriminators[discriminatorValue] ||\n      (byValue && byValue.schema) ||\n      schema;\n  }\n\n  return castUpdate(schema, obj, {\n    overwrite: overwrite,\n    strict: strict,\n    omitUndefined,\n    useNestedStrict: useNestedStrict,\n    upsert: upsert,\n    arrayFilters: this.options.arrayFilters\n  }, this, this._conditions);\n};\n\n/*!\n * castQuery\n * @api private\n */\n\nfunction castQuery(query) {\n  try {\n    return query.cast(query.model);\n  } catch (err) {\n    return err;\n  }\n}\n\n/*!\n * castDoc\n * @api private\n */\n\nfunction castDoc(query, overwrite) {\n  try {\n    return query._castUpdate(query._update, overwrite);\n  } catch (err) {\n    return err;\n  }\n}\n\n/**\n * Specifies paths which should be populated with other documents.\n *\n * ####Example:\n *\n *     let book = await Book.findOne().populate('authors');\n *     book.title; // 'Node.js in Action'\n *     book.authors[0].name; // 'TJ Holowaychuk'\n *     book.authors[1].name; // 'Nathan Rajlich'\n *\n *     let books = await Book.find().populate({\n *       path: 'authors',\n *       // `match` and `sort` apply to the Author model,\n *       // not the Book model. These options do not affect\n *       // which documents are in `books`, just the order and\n *       // contents of each book document's `authors`.\n *       match: { name: new RegExp('.*h.*', 'i') },\n *       sort: { name: -1 }\n *     });\n *     books[0].title; // 'Node.js in Action'\n *     // Each book's `authors` are sorted by name, descending.\n *     books[0].authors[0].name; // 'TJ Holowaychuk'\n *     books[0].authors[1].name; // 'Marc Harter'\n *\n *     books[1].title; // 'Professional AngularJS'\n *     // Empty array, no authors' name has the letter 'h'\n *     books[1].authors; // []\n *\n * Paths are populated after the query executes and a response is received. A\n * separate query is then executed for each path specified for population. After\n * a response for each query has also been returned, the results are passed to\n * the callback.\n *\n * @param {Object|String} path either the path to populate or an object specifying all parameters\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @param {String} [options.path=null] The path to populate.\n * @param {boolean} [options.retainNullValues=false] by default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] if true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://docs.mongodb.com/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @see population ./populate.html\n * @see Query#select #query_Query-select\n * @see Model.populate #model_Model.populate\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.populate = function() {\n  // Bail when given no truthy arguments\n  if (!Array.from(arguments).some(Boolean)) {\n    return this;\n  }\n\n  const res = utils.populate.apply(null, arguments);\n\n  // Propagate readConcern and readPreference and lean from parent query,\n  // unless one already specified\n  if (this.options != null) {\n    const readConcern = this.options.readConcern;\n    const readPref = this.options.readPreference;\n\n    for (const populateOptions of res) {\n      if (readConcern != null && get(populateOptions, 'options.readConcern') == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.readConcern = readConcern;\n      }\n      if (readPref != null && get(populateOptions, 'options.readPreference') == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.readPreference = readPref;\n      }\n    }\n  }\n\n  const opts = this._mongooseOptions;\n\n  if (opts.lean != null) {\n    const lean = opts.lean;\n    for (const populateOptions of res) {\n      if (get(populateOptions, 'options.lean') == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.lean = lean;\n      }\n    }\n  }\n\n  if (!utils.isObject(opts.populate)) {\n    opts.populate = {};\n  }\n\n  const pop = opts.populate;\n\n  for (const populateOptions of res) {\n    const path = populateOptions.path;\n    if (pop[path] && pop[path].populate && populateOptions.populate) {\n      populateOptions.populate = pop[path].populate.concat(populateOptions.populate);\n    }\n\n    pop[populateOptions.path] = populateOptions;\n  }\n  return this;\n};\n\n/**\n * Gets a list of paths to be populated by this query\n *\n * ####Example:\n *      bookSchema.pre('findOne', function() {\n *        let keys = this.getPopulatedPaths(); // ['author']\n *      });\n *      ...\n *      Book.findOne({}).populate('author');\n *\n * ####Example:\n *      // Deep populate\n *      const q = L1.find().populate({\n *        path: 'level2',\n *        populate: { path: 'level3' }\n *      });\n *      q.getPopulatedPaths(); // ['level2', 'level2.level3']\n *\n * @return {Array} an array of strings representing populated paths\n * @api public\n */\n\nQuery.prototype.getPopulatedPaths = function getPopulatedPaths() {\n  const obj = this._mongooseOptions.populate || {};\n  const ret = Object.keys(obj);\n  for (const path of Object.keys(obj)) {\n    const pop = obj[path];\n    if (!Array.isArray(pop.populate)) {\n      continue;\n    }\n    _getPopulatedPaths(ret, pop.populate, path + '.');\n  }\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nfunction _getPopulatedPaths(list, arr, prefix) {\n  for (const pop of arr) {\n    list.push(prefix + pop.path);\n    if (!Array.isArray(pop.populate)) {\n      continue;\n    }\n    _getPopulatedPaths(list, pop.populate, prefix + pop.path + '.');\n  }\n}\n\n/**\n * Casts this query to the schema of `model`\n *\n * ####Note\n *\n * If `obj` is present, it is cast instead of this query.\n *\n * @param {Model} [model] the model to cast to. If not set, defaults to `this.model`\n * @param {Object} [obj]\n * @return {Object}\n * @api public\n */\n\nQuery.prototype.cast = function(model, obj) {\n  obj || (obj = this._conditions);\n\n  model = model || this.model;\n  const discriminatorKey = model.schema.options.discriminatorKey;\n  if (obj != null &&\n      obj.hasOwnProperty(discriminatorKey)) {\n    model = getDiscriminatorByValue(model.discriminators, obj[discriminatorKey]) || model;\n  }\n\n  try {\n    return cast(model.schema, obj, {\n      upsert: this.options && this.options.upsert,\n      strict: (this.options && 'strict' in this.options) ?\n        this.options.strict :\n        get(model, 'schema.options.strict', null),\n      strictQuery: (this.options && this.options.strictQuery) ||\n        get(model, 'schema.options.strictQuery', null)\n    }, this);\n  } catch (err) {\n    // CastError, assign model\n    if (typeof err.setModel === 'function') {\n      err.setModel(model);\n    }\n    throw err;\n  }\n};\n\n/**\n * Casts selected field arguments for field selection with mongo 2.2\n *\n *     query.select({ ids: { $elemMatch: { $in: [hexString] }})\n *\n * @param {Object} fields\n * @see https://github.com/Automattic/mongoose/issues/1091\n * @see http://docs.mongodb.org/manual/reference/projection/elemMatch/\n * @api private\n */\n\nQuery.prototype._castFields = function _castFields(fields) {\n  let selected,\n      elemMatchKeys,\n      keys,\n      key,\n      out,\n      i;\n\n  if (fields) {\n    keys = Object.keys(fields);\n    elemMatchKeys = [];\n    i = keys.length;\n\n    // collect $elemMatch args\n    while (i--) {\n      key = keys[i];\n      if (fields[key].$elemMatch) {\n        selected || (selected = {});\n        selected[key] = fields[key];\n        elemMatchKeys.push(key);\n      }\n    }\n  }\n\n  if (selected) {\n    // they passed $elemMatch, cast em\n    try {\n      out = this.cast(this.model, selected);\n    } catch (err) {\n      return err;\n    }\n\n    // apply the casted field args\n    i = elemMatchKeys.length;\n    while (i--) {\n      key = elemMatchKeys[i];\n      fields[key] = out[key];\n    }\n  }\n\n  return fields;\n};\n\n/**\n * Applies schematype selected options to this query.\n * @api private\n */\n\nQuery.prototype._applyPaths = function applyPaths() {\n  this._fields = this._fields || {};\n  helpers.applyPaths(this._fields, this.model.schema);\n\n  let _selectPopulatedPaths = true;\n\n  if ('selectPopulatedPaths' in this.model.base.options) {\n    _selectPopulatedPaths = this.model.base.options.selectPopulatedPaths;\n  }\n  if ('selectPopulatedPaths' in this.model.schema.options) {\n    _selectPopulatedPaths = this.model.schema.options.selectPopulatedPaths;\n  }\n\n  if (_selectPopulatedPaths) {\n    selectPopulatedFields(this._fields, this._userProvidedFields, this._mongooseOptions.populate);\n  }\n};\n\n/**\n * Returns a wrapper around a [mongodb driver cursor](http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html).\n * A QueryCursor exposes a Streams3 interface, as well as a `.next()` function.\n *\n * The `.cursor()` function triggers pre find hooks, but **not** post find hooks.\n *\n * ####Example\n *\n *     // There are 2 ways to use a cursor. First, as a stream:\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       on('data', function(doc) { console.log(doc); }).\n *       on('end', function() { console.log('Done!'); });\n *\n *     // Or you can use `.next()` to manually get the next doc in the stream.\n *     // `.next()` returns a promise, so you can use promises or callbacks.\n *     const cursor = Thing.find({ name: /^hello/ }).cursor();\n *     cursor.next(function(error, doc) {\n *       console.log(doc);\n *     });\n *\n *     // Because `.next()` returns a promise, you can use co\n *     // to easily iterate through all documents without loading them\n *     // all into memory.\n *     co(function*() {\n *       const cursor = Thing.find({ name: /^hello/ }).cursor();\n *       for (let doc = yield cursor.next(); doc != null; doc = yield cursor.next()) {\n *         console.log(doc);\n *       }\n *     });\n *\n * ####Valid options\n *\n *   - `transform`: optional function which accepts a mongoose document. The return value of the function will be emitted on `data` and returned by `.next()`.\n *\n * @return {QueryCursor}\n * @param {Object} [options]\n * @see QueryCursor\n * @api public\n */\n\nQuery.prototype.cursor = function cursor(opts) {\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  this.setOptions({ projection: this._fieldsForExec() });\n  if (opts) {\n    this.setOptions(opts);\n  }\n\n  const options = Object.assign({}, this._optionsForExec(), {\n    projection: this.projection()\n  });\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    return (new QueryCursor(this, options))._markError(err);\n  }\n\n  return new QueryCursor(this, options);\n};\n\n// the rest of these are basically to support older Mongoose syntax with mquery\n\n/**\n * _DEPRECATED_ Alias of `maxScan`\n *\n * @deprecated\n * @see maxScan #query_Query-maxScan\n * @method maxscan\n * @memberOf Query\n * @instance\n */\n\nQuery.prototype.maxscan = Query.base.maxScan;\n\n/**\n * Sets the tailable option (for use with capped collections).\n *\n * ####Example\n *\n *     query.tailable() // true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} bool defaults to true\n * @param {Object} [opts] options to set\n * @param {Number} [opts.numberOfRetries] if cursor is exhausted, retry this many times before giving up\n * @param {Number} [opts.tailableRetryInterval] if cursor is exhausted, wait this many milliseconds before retrying\n * @see tailable http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/\n * @api public\n */\n\nQuery.prototype.tailable = function(val, opts) {\n  // we need to support the tailable({ awaitdata : true }) as well as the\n  // tailable(true, {awaitdata :true}) syntax that mquery does not support\n  if (val != null && typeof val.constructor === 'function' && val.constructor.name === 'Object') {\n    opts = val;\n    val = true;\n  }\n\n  if (val === undefined) {\n    val = true;\n  }\n\n  if (opts && typeof opts === 'object') {\n    for (const key of Object.keys(opts)) {\n      if (key === 'awaitdata') {\n        // For backwards compatibility\n        this.options[key] = !!opts[key];\n      } else {\n        this.options[key] = opts[key];\n      }\n    }\n  }\n\n  return Query.base.tailable.call(this, val);\n};\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * ####NOTE:\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `intersects` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method intersects\n * @memberOf Query\n * @instance\n * @param {Object} [arg]\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see geoIntersects http://docs.mongodb.org/manual/reference/operator/geoIntersects/\n * @api public\n */\n\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     const polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     const polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     const polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * The argument is assigned to the most recent path passed to `where()`.\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * @method geometry\n * @memberOf Query\n * @instance\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *\n * @method near\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/*!\n * Overwriting mquery is needed to support a couple different near() forms found in older\n * versions of mongoose\n * near([1,1])\n * near(1,1)\n * near(field, [1,2])\n * near(field, 1, 2)\n * In addition to all of the normal forms supported by mquery\n */\n\nQuery.prototype.near = function() {\n  const params = [];\n  const sphere = this._mongooseOptions.nearSphere;\n\n  // TODO refactor\n\n  if (arguments.length === 1) {\n    if (Array.isArray(arguments[0])) {\n      params.push({ center: arguments[0], spherical: sphere });\n    } else if (typeof arguments[0] === 'string') {\n      // just passing a path\n      params.push(arguments[0]);\n    } else if (utils.isObject(arguments[0])) {\n      if (typeof arguments[0].spherical !== 'boolean') {\n        arguments[0].spherical = sphere;\n      }\n      params.push(arguments[0]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 2) {\n    if (typeof arguments[0] === 'number' && typeof arguments[1] === 'number') {\n      params.push({ center: [arguments[0], arguments[1]], spherical: sphere });\n    } else if (typeof arguments[0] === 'string' && Array.isArray(arguments[1])) {\n      params.push(arguments[0]);\n      params.push({ center: arguments[1], spherical: sphere });\n    } else if (typeof arguments[0] === 'string' && utils.isObject(arguments[1])) {\n      params.push(arguments[0]);\n      if (typeof arguments[1].spherical !== 'boolean') {\n        arguments[1].spherical = sphere;\n      }\n      params.push(arguments[1]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 3) {\n    if (typeof arguments[0] === 'string' && typeof arguments[1] === 'number'\n        && typeof arguments[2] === 'number') {\n      params.push(arguments[0]);\n      params.push({ center: [arguments[1], arguments[2]], spherical: sphere });\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else {\n    throw new TypeError('invalid argument');\n  }\n\n  return Query.base.near.apply(this, params);\n};\n\n/**\n * _DEPRECATED_ Specifies a `$nearSphere` condition\n *\n * ####Example\n *\n *     query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });\n *\n * **Deprecated.** Use `query.near()` instead with the `spherical` option set to `true`.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10], spherical: true });\n *\n * @deprecated\n * @see near() #query_Query-near\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n */\n\nQuery.prototype.nearSphere = function() {\n  this._mongooseOptions.nearSphere = true;\n  this.near.apply(this, arguments);\n  return this;\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js)\n * This function *only* works for `find()` queries.\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * ####Example\n *\n *     for await (const doc of Model.aggregate([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf Query\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  Query.prototype[Symbol.asyncIterator] = function() {\n    return this.cursor().transformNull()._transformForAsyncIterator();\n  };\n}\n\n/**\n * Specifies a `$polygon` condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @method polygon\n * @memberOf Query\n * @instance\n * @param {String|Array} [path]\n * @param {Array|Object} [coordinatePairs...]\n * @return {Query} this\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$box` condition\n *\n * ####Example\n *\n *     const lowerLeft = [40.73083, -73.99756]\n *     const upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box({ ll : lowerLeft, ur : upperRight })\n *\n * @method box\n * @memberOf Query\n * @instance\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see within() Query#within #query_Query-within\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @param {Object} val\n * @param [Array] Upper Right Coords\n * @return {Query} this\n * @api public\n */\n\n/*!\n * this is needed to support the mongoose syntax of:\n * box(field, { ll : [x,y], ur : [x2,y2] })\n * box({ ll : [x,y], ur : [x2,y2] })\n */\n\nQuery.prototype.box = function(ll, ur) {\n  if (!Array.isArray(ll) && utils.isObject(ll)) {\n    ur = ll.ur;\n    ll = ll.ll;\n  }\n  return Query.base.box.call(this, ll, ur);\n};\n\n/**\n * Specifies a `$center` or `$centerSphere` condition.\n *\n * ####Example\n *\n *     const area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n *     // spherical calculations\n *     const area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n * @method circle\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @see $geoWithin http://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * _DEPRECATED_ Alias for [circle](#query_Query-circle)\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * @deprecated\n * @method center\n * @memberOf Query\n * @instance\n * @api public\n */\n\nQuery.prototype.center = Query.base.circle;\n\n/**\n * _DEPRECATED_ Specifies a `$centerSphere` condition\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * ####Example\n *\n *     const area = { center: [50, 50], radius: 10 };\n *     query.where('loc').within().centerSphere(area);\n *\n * @deprecated\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @api public\n */\n\nQuery.prototype.centerSphere = function() {\n  if (arguments[0] != null && typeof arguments[0].constructor === 'function' && arguments[0].constructor.name === 'Object') {\n    arguments[0].spherical = true;\n  }\n\n  if (arguments[1] != null && typeof arguments[1].constructor === 'function' && arguments[1].constructor.name === 'Object') {\n    arguments[1].spherical = true;\n  }\n\n  Query.base.circle.apply(this, arguments);\n};\n\n/**\n * Determines if field selection has been made.\n *\n * @method selected\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *\n * @method selectedInclusively\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  return isInclusive(this._fields);\n};\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExclusively() // false\n *     query.select('-name')\n *     query.selectedExclusively() // true\n *     query.selectedInclusively() // false\n *\n * @method selectedExclusively\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  return isExclusive(this._fields);\n};\n\n/**\n * The model this query is associated with.\n *\n * #### Example:\n *\n *     const q = MyModel.find();\n *     q.model === MyModel; // true\n *\n * @api public\n * @property model\n * @memberOf Query\n * @instance\n */\n\nQuery.prototype.model;\n\n/*!\n * Export\n */\n\nmodule.exports = Query;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,cAAc,CAAC;AACzC,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACzD,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,aAAa,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AACtD,MAAMI,oBAAoB,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AAC/D,MAAMK,WAAW,GAAGL,OAAO,CAAC,sBAAsB,CAAC;AACnD,MAAMM,cAAc,GAAGN,OAAO,CAAC,UAAU,CAAC,CAACO,GAAG,EAAE,CAACD,cAAc;AAC/D,MAAME,oBAAoB,GAAGR,OAAO,CAAC,sCAAsC,CAAC;AAC5E,MAAMS,iBAAiB,GAAGT,OAAO,CAAC,oCAAoC,CAAC;AACvE,MAAMU,IAAI,GAAGV,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAMW,gBAAgB,GAAGX,OAAO,CAAC,mCAAmC,CAAC;AACrE,MAAMY,UAAU,GAAGZ,OAAO,CAAC,4BAA4B,CAAC;AACxD,MAAMa,YAAY,GAAGb,OAAO,CAAC,8BAA8B,CAAC;AAC5D,MAAMO,GAAG,GAAGP,OAAO,CAAC,eAAe,CAAC;AACpC,MAAMc,iBAAiB,GAAGd,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAMe,uBAAuB,GAAGf,OAAO,CAAC,iDAAiD,CAAC;AAC1F,MAAMgB,aAAa,GAAGhB,OAAO,CAAC,+BAA+B,CAAC;AAC9D,MAAMiB,OAAO,GAAGjB,OAAO,CAAC,gBAAgB,CAAC;AACzC,MAAMkB,SAAS,GAAGlB,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAMmB,WAAW,GAAGnB,OAAO,CAAC,kCAAkC,CAAC;AAC/D,MAAMoB,WAAW,GAAGpB,OAAO,CAAC,kCAAkC,CAAC;AAC/D,MAAMqB,MAAM,GAAGrB,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMsB,eAAe,GAAGtB,OAAO,CAAC,sCAAsC,CAAC;AACvE,MAAMuB,wBAAwB,GAAGvB,OAAO,CAAC,2CAA2C,CAAC;AACrF,MAAMwB,kBAAkB,GAAGxB,OAAO,CAAC,oCAAoC,CAAC;AACxE,MAAMyB,qBAAqB,GAAGzB,OAAO,CAAC,uCAAuC,CAAC;AAC9E,MAAM0B,mBAAmB,GAAG1B,OAAO,CAAC,+BAA+B,CAAC;AACpE,MAAM2B,KAAK,GAAG3B,OAAO,CAAC,QAAQ,CAAC;AAC/B,MAAM4B,gBAAgB,GAAG5B,OAAO,CAAC,4BAA4B,CAAC;AAC9D,MAAM6B,IAAI,GAAG7B,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM8B,KAAK,GAAG9B,OAAO,CAAC,SAAS,CAAC;AAChC,MAAM+B,SAAS,GAAG/B,OAAO,CAAC,2BAA2B,CAAC;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASgC,KAAK,CAACC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,UAAU,EAAE;EACrD;EACA,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;IAC1B,IAAI,CAACA,gBAAgB,GAAG,CAAC,CAAC;EAC5B;EACAH,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,IAAI,CAACI,WAAW,GAAG,EAAE;EACrB,IAAI,CAACC,MAAM,GAAG,IAAIrC,MAAM,EAAE;EAC1B,IAAI,CAACsC,eAAe,GAAG,CAAC;;EAExB;EACA;EACA,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACP,OAAO,CAAC;EACjC,KAAK,MAAMS,GAAG,IAAIF,IAAI,EAAE;IACtB,IAAI,CAACJ,gBAAgB,CAACM,GAAG,CAAC,GAAGT,OAAO,CAACS,GAAG,CAAC;EAC3C;EAEA,IAAIP,UAAU,EAAE;IACd,IAAI,CAACQ,kBAAkB,GAAGR,UAAU;EACtC;EAEA,IAAID,KAAK,EAAE;IACT,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACU,MAAM,GAAGV,KAAK,CAACU,MAAM;EAC5B;;EAGA;EACA;EACA,IAAI,IAAI,CAACV,KAAK,IAAI,IAAI,CAACA,KAAK,CAACW,UAAU,EAAE;IACvC,IAAI,CAACC,IAAI,EAAE;EACb;;EAEA;EACA1B,MAAM,CAAC2B,IAAI,CAAC,IAAI,EAAE,IAAI,CAACJ,kBAAkB,EAAEV,OAAO,CAAC;EAEnD,IAAID,UAAU,EAAE;IACd,IAAI,CAACgB,IAAI,CAAChB,UAAU,CAAC;EACvB;EAEA,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,IAAI,CAAC,CAAC;;EAEjC;EACA;EACA,IAAI,CAACgB,cAAc,GAAG,IAAI;EAE1B,MAAMC,SAAS,GAAG5C,GAAG,CAAC,IAAI,EAAE,0BAA0B,EAAE,IAAI,CAAC;EAC7D,IAAI4C,SAAS,IAAI,IAAI,EAAE;IACrB,IAAI,CAACjB,OAAO,CAACiB,SAAS,GAAGA,SAAS;EACpC;AACF;;AAEA;AACA;AACA;;AAEAnB,KAAK,CAACoB,SAAS,GAAG,IAAI/B,MAAM;AAC5BW,KAAK,CAACoB,SAAS,CAACC,WAAW,GAAGrB,KAAK;AACnCA,KAAK,CAACsB,IAAI,GAAGjC,MAAM,CAAC+B,SAAS;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApB,KAAK,CAACuB,aAAa,GAAGlC,MAAM,CAACkC,aAAa;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvB,KAAK,CAACoB,SAAS,CAACI,aAAa,GAAG,SAASA,aAAa,GAAG;EACvD,MAAMrB,KAAK,GAAG,IAAI,CAACA,KAAK;EACxB,MAAMsB,IAAI,GAAG,IAAI,CAACb,kBAAkB;EAEpC,MAAMc,WAAW,GAAG,UAASC,QAAQ,EAAEzB,OAAO,EAAE;IAC9C,IAAI,EAAE,IAAI,YAAYwB,WAAW,CAAC,EAAE;MAClC,OAAO,IAAIA,WAAW,CAACC,QAAQ,EAAEzB,OAAO,CAAC;IAC3C;IACA,IAAI,CAACG,gBAAgB,GAAGP,KAAK,CAAC8B,KAAK,CAACC,CAAC,CAACxB,gBAAgB,CAAC;IACvDL,KAAK,CAACgB,IAAI,CAAC,IAAI,EAAEW,QAAQ,EAAEzB,OAAO,IAAI,IAAI,EAAEC,KAAK,EAAEsB,IAAI,CAAC;EAC1D,CAAC;EAED5B,IAAI,CAACiC,QAAQ,CAACJ,WAAW,EAAEvB,KAAK,CAACH,KAAK,CAAC;;EAEvC;EACA,MAAM6B,CAAC,GAAGH,WAAW,CAACN,SAAS;EAE/BS,CAAC,CAAC3B,OAAO,GAAG,CAAC,CAAC;;EAEd;EACA;EACA;EACA,MAAMA,OAAO,GAAGQ,MAAM,CAACqB,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC7B,OAAO,CAAC;EAC/C,IAAIA,OAAO,CAAC8B,IAAI,IAAI,IAAI,EAAE;IACxBH,CAAC,CAACG,IAAI,CAAC9B,OAAO,CAAC8B,IAAI,CAAC;IACpB,OAAO9B,OAAO,CAAC8B,IAAI;EACrB;EACAH,CAAC,CAACI,UAAU,CAAC/B,OAAO,CAAC;EAErB2B,CAAC,CAACK,EAAE,GAAG,IAAI,CAACA,EAAE;EACdL,CAAC,CAACM,WAAW,GAAGrC,KAAK,CAAC8B,KAAK,CAAC,IAAI,CAACO,WAAW,CAAC;EAC7CN,CAAC,CAACO,OAAO,GAAGtC,KAAK,CAAC8B,KAAK,CAAC,IAAI,CAACQ,OAAO,CAAC;EACrCP,CAAC,CAACQ,OAAO,GAAGvC,KAAK,CAAC8B,KAAK,CAAC,IAAI,CAACS,OAAO,EAAE;IACpCC,eAAe,EAAE;EACnB,CAAC,CAAC;EACFT,CAAC,CAACU,KAAK,GAAG,IAAI,CAACA,KAAK;EACpBV,CAAC,CAACW,SAAS,GAAG,IAAI,CAACA,SAAS;EAC5BX,CAAC,CAACY,WAAW,GAAG,IAAI,CAACA,WAAW;EAChCZ,CAAC,CAACxB,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;EAE1C,OAAOqB,WAAW;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA1B,KAAK,CAACoB,SAAS,CAACzB,KAAK,GAAG,YAAW;EACjC,IAAI+C,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,OAAO,IAAI;EACb;EAEA,IAAI,CAACC,SAAS,CAAC,OAAO,CAAC;EAEvB,IAAIC,IAAI;EACR,IAAIC,GAAG;EAEP,IAAIJ,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,MAAMI,GAAG,GAAGL,SAAS,CAAC,CAAC,CAAC;IACxB,IAAI,OAAOK,GAAG,KAAK,QAAQ,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;MAClD,MAAMtC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACsC,GAAG,CAAC;MAC7B,MAAMG,OAAO,GAAGzC,IAAI,CAACkC,MAAM;MAC3B,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,OAAO,EAAE,EAAEC,CAAC,EAAE;QAChC,IAAI,CAACxD,KAAK,CAACc,IAAI,CAAC0C,CAAC,CAAC,EAAEJ,GAAG,CAACtC,IAAI,CAAC0C,CAAC,CAAC,CAAC,CAAC;MACnC;MACA,OAAO,IAAI;IACb;IACA,IAAI,CAACC,WAAW,CAAC,OAAO,CAAC;IACzBP,IAAI,GAAG,IAAI,CAACN,KAAK;IACjBO,GAAG,GAAGJ,SAAS,CAAC,CAAC,CAAC;EACpB,CAAC,MAAM,IAAIA,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IACjC,IAAI,QAAQ,KAAK,OAAOD,SAAS,CAAC,CAAC,CAAC,EAAE;MACpC,IAAI,CAACU,WAAW,CAAC,OAAO,CAAC;MACzBP,IAAI,GAAG,IAAI,CAACN,KAAK;MACjBO,GAAG,GAAGnD,KAAK,CAAC+C,SAAS,CAAC;IACxB,CAAC,MAAM;MACLG,IAAI,GAAGH,SAAS,CAAC,CAAC,CAAC;MACnBI,GAAG,GAAGJ,SAAS,CAAC,CAAC,CAAC;IACpB;EACF,CAAC,MAAM,IAAIA,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IACjCE,IAAI,GAAGH,SAAS,CAAC,CAAC,CAAC;IACnBI,GAAG,GAAGnD,KAAK,CAAC+C,SAAS,EAAE,CAAC,CAAC;EAC3B;EAEA,MAAMb,CAAC,GAAG,CAAC,CAAC;EACZA,CAAC,CAACgB,IAAI,CAAC,GAAG;IAAEQ,MAAM,EAAEP;EAAI,CAAC;EACzB,IAAI,CAACQ,MAAM,CAACzB,CAAC,CAAC;EAEd,OAAO,IAAI;AACb,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA7B,KAAK,CAACoB,SAAS,CAACmC,GAAG,GAAG,YAAW;EAC/B,IAAIT,GAAG;EACP,IAAID,IAAI;EAER,IAAIH,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,IAAI,CAACS,WAAW,CAAC,KAAK,CAAC;IACvBN,GAAG,GAAGJ,SAAS,CAAC,CAAC,CAAC;IAClBG,IAAI,GAAG,IAAI,CAACN,KAAK;EACnB,CAAC,MAAM,IAAIG,SAAS,CAACC,MAAM,KAAK,CAAC,IAAI,CAACK,KAAK,CAACC,OAAO,CAACP,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;IACjE,IAAI,CAACU,WAAW,CAAC,KAAK,CAAC;IACvBN,GAAG,GAAGnD,KAAK,CAAC+C,SAAS,CAAC;IACtBG,IAAI,GAAG,IAAI,CAACN,KAAK;EACnB,CAAC,MAAM,IAAIG,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IACjCG,GAAG,GAAGnD,KAAK,CAAC+C,SAAS,EAAE,CAAC,CAAC;IACzBG,IAAI,GAAGH,SAAS,CAAC,CAAC,CAAC;EACrB,CAAC,MAAM;IACLI,GAAG,GAAGJ,SAAS,CAAC,CAAC,CAAC;IAClBG,IAAI,GAAGH,SAAS,CAAC,CAAC,CAAC;EACrB;EAEA,MAAMc,KAAK,GAAG,IAAI,CAACrB,WAAW,CAACU,IAAI,CAAC,KAAK,IAAI,CAACV,WAAW,CAACU,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;EACrEW,KAAK,CAACC,IAAI,GAAGX,GAAG;EAChB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApE,KAAK,CAACoB,SAAS,CAACiD,IAAI,GAAG,SAASA,IAAI,CAACC,IAAI,EAAEC,IAAI,EAAE;EAC/C;EACA,MAAMF,IAAI,GAAG,IAAI/F,cAAc,CAACgG,IAAI,EAAEC,IAAI,CAAC;EAC3C,IAAI,CAACrE,OAAO,CAACsE,cAAc,GAAGH,IAAI;EAClC,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEArE,KAAK,CAACoB,SAAS,CAACqD,OAAO,GAAG,SAASA,OAAO,CAACC,CAAC,EAAE;EAC5C,IAAIA,CAAC,IAAI,IAAI,EAAE;IACb,OAAO,IAAI,CAACxE,OAAO,CAACuE,OAAO;EAC7B;EACA,IAAI,CAACvE,OAAO,CAACuE,OAAO,GAAGC,CAAC;EACxB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA1E,KAAK,CAACoB,SAAS,CAACuD,YAAY,GAAG,SAASA,YAAY,CAAC7B,GAAG,EAAE;EACxD,IAAIA,GAAG,IAAI,IAAI,EAAE;IACf,OAAO,IAAI,CAAC5C,OAAO,CAACyE,YAAY;IAChC,OAAO,IAAI;EACb;EACA,IAAI,CAACzE,OAAO,CAACyE,YAAY,GAAG7B,GAAG;EAC/B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA9C,KAAK,CAACoB,SAAS,CAACwD,CAAC,GAAG,SAASA,CAAC,CAAC9B,GAAG,EAAE;EAClC,IAAIA,GAAG,IAAI,IAAI,EAAE;IACf,OAAO,IAAI,CAAC5C,OAAO,CAAC0E,CAAC;EACvB;EACA,IAAI,IAAI,CAAC1E,OAAO,CAACyE,YAAY,IAAI,IAAI,EAAE;IACrC,IAAI,CAACzE,OAAO,CAACyE,YAAY,CAACC,CAAC,GAAG9B,GAAG;EACnC,CAAC,MAAM;IACL,IAAI,CAAC5C,OAAO,CAAC0E,CAAC,GAAG9B,GAAG;EACtB;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA9C,KAAK,CAACoB,SAAS,CAACyD,CAAC,GAAG,SAASA,CAAC,CAAC/B,GAAG,EAAE;EAClC,IAAIA,GAAG,IAAI,IAAI,EAAE;IACf,OAAO,IAAI,CAAC5C,OAAO,CAAC2E,CAAC;EACvB;EACA,IAAI,IAAI,CAAC3E,OAAO,CAACyE,YAAY,IAAI,IAAI,EAAE;IACrC,IAAI,CAACzE,OAAO,CAACyE,YAAY,CAACE,CAAC,GAAG/B,GAAG;EACnC,CAAC,MAAM;IACL,IAAI,CAAC5C,OAAO,CAAC2E,CAAC,GAAG/B,GAAG;EACtB;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA9C,KAAK,CAACoB,SAAS,CAAC0D,QAAQ,GAAG,SAASA,QAAQ,CAACC,EAAE,EAAE;EAC/C,IAAIA,EAAE,IAAI,IAAI,EAAE;IACd,OAAO,IAAI,CAAC7E,OAAO,CAAC4E,QAAQ;EAC9B;EACA,IAAI,IAAI,CAAC5E,OAAO,CAACyE,YAAY,IAAI,IAAI,EAAE;IACrC,IAAI,CAACzE,OAAO,CAACyE,YAAY,CAACG,QAAQ,GAAGC,EAAE;EACzC,CAAC,MAAM;IACL,IAAI,CAAC7E,OAAO,CAAC4E,QAAQ,GAAGC,EAAE;EAC5B;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA/E,KAAK,CAACoB,SAAS,CAAC4D,UAAU,GAAG,YAAW;EACtC,OAAO,IAAI,CAAC9E,OAAO;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,KAAK,CAACoB,SAAS,CAACa,UAAU,GAAG,UAAS/B,OAAO,EAAE+E,SAAS,EAAE;EACxD;EACA,IAAIA,SAAS,EAAE;IACb;IACA,IAAI,CAAC5E,gBAAgB,GAAIH,OAAO,IAAIJ,KAAK,CAAC8B,KAAK,CAAC1B,OAAO,CAAC,IAAK,CAAC,CAAC;IAC/D,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAE5B,IAAI,UAAU,IAAIA,OAAO,EAAE;MACzB,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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA1E,KAAK,CAACoB,SAAS,CAACuE,SAAS,GAAG,UAASZ,EAAE,EAAE;EACvC,IAAI,CAAC7E,OAAO,CAACyF,SAAS,GAAGZ,EAAE;EAC3B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA/E,KAAK,CAACoB,SAAS,CAACwE,SAAS,GAAG,YAAW;EACrC,OAAO,IAAI,CAACzD,WAAW;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAnC,KAAK,CAACoB,SAAS,CAACyE,QAAQ,GAAG,YAAW;EACpC,OAAO,IAAI,CAAC1D,WAAW;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAnC,KAAK,CAACoB,SAAS,CAAC0E,QAAQ,GAAG,UAAShD,GAAG,EAAE;EACvC,IAAI,CAACX,WAAW,GAAGW,GAAG;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA9C,KAAK,CAACoB,SAAS,CAAC2E,SAAS,GAAG,YAAW;EACrC,OAAO,IAAI,CAAC1D,OAAO;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEArC,KAAK,CAACoB,SAAS,CAAC4E,SAAS,GAAG,UAASlD,GAAG,EAAE;EACxC,IAAI,CAACT,OAAO,GAAGS,GAAG;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA9C,KAAK,CAACoB,SAAS,CAAC6E,cAAc,GAAG,YAAW;EAC1C,OAAOnG,KAAK,CAAC8B,KAAK,CAAC,IAAI,CAACQ,OAAO,CAAC;AAClC,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApC,KAAK,CAACoB,SAAS,CA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ACVA,GAAG,GAAG,IAAI;EACZ;EAEA,IAAIA,GAAG,KAAKiB,SAAS,EAAE;IACrBjB,GAAG,GAAG,IAAI;EACZ;EAEA,IAAIgG,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IACpC,KAAK,MAAMnI,GAAG,IAAID,MAAM,CAACD,IAAI,CAACqI,IAAI,CAAC,EAAE;MACnC,IAAInI,GAAG,KAAK,WAAW,EAAE;QACvB;QACA,IAAI,CAACT,OAAO,CAACS,GAAG,CAAC,GAAG,CAAC,CAACmI,IAAI,CAACnI,GAAG,CAAC;MACjC,CAAC,MAAM;QACL,IAAI,CAACT,OAAO,CAACS,GAAG,CAAC,GAAGmI,IAAI,CAACnI,GAAG,CAAC;MAC/B;IACF;EACF;EAEA,OAAOX,KAAK,CAACsB,IAAI,CAACuQ,QAAQ,CAAC7Q,IAAI,CAAC,IAAI,EAAE8B,GAAG,CAAC;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA9C,KAAK,CAACoB,SAAS,CAAC2Q,IAAI,GAAG,YAAW;EAChC,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,MAAM,GAAG,IAAI,CAAC5R,gBAAgB,CAAC6R,UAAU;;EAE/C;;EAEA,IAAIxP,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,IAAIK,KAAK,CAACC,OAAO,CAACP,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;MAC/BsP,MAAM,CAACrL,IAAI,CAAC;QAAEwL,MAAM,EAAEzP,SAAS,CAAC,CAAC,CAAC;QAAE0P,SAAS,EAAEH;MAAO,CAAC,CAAC;IAC1D,CAAC,MAAM,IAAI,OAAOvP,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MAC3C;MACAsP,MAAM,CAACrL,IAAI,CAACjE,SAAS,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC,MAAM,IAAI5C,KAAK,CAACoE,QAAQ,CAACxB,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;MACvC,IAAI,OAAOA,SAAS,CAAC,CAAC,CAAC,CAAC0P,SAAS,KAAK,SAAS,EAAE;QAC/C1P,SAAS,CAAC,CAAC,CAAC,CAAC0P,SAAS,GAAGH,MAAM;MACjC;MACAD,MAAM,CAACrL,IAAI,CAACjE,SAAS,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC,MAAM;MACL,MAAM,IAAI0B,SAAS,CAAC,kBAAkB,CAAC;IACzC;EACF,CAAC,MAAM,IAAI1B,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IACjC,IAAI,OAAOD,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,OAAOA,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MACxEsP,MAAM,CAACrL,IAAI,CAAC;QAAEwL,MAAM,EAAE,CAACzP,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;QAAE0P,SAAS,EAAEH;MAAO,CAAC,CAAC;IAC1E,CAAC,MAAM,IAAI,OAAOvP,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAIM,KAAK,CAACC,OAAO,CAACP,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;MAC1EsP,MAAM,CAACrL,IAAI,CAACjE,SAAS,CAAC,CAAC,CAAC,CAAC;MACzBsP,MAAM,CAACrL,IAAI,CAAC;QAAEwL,MAAM,EAAEzP,SAAS,CAAC,CAAC,CAAC;QAAE0P,SAAS,EAAEH;MAAO,CAAC,CAAC;IAC1D,CAAC,MAAM,IAAI,OAAOvP,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI5C,KAAK,CAACoE,QAAQ,CAACxB,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;MAC3EsP,MAAM,CAACrL,IAAI,CAACjE,SAAS,CAAC,CAAC,CAAC,CAAC;MACzB,IAAI,OAAOA,SAAS,CAAC,CAAC,CAAC,CAAC0P,SAAS,KAAK,SAAS,EAAE;QAC/C1P,SAAS,CAAC,CAAC,CAAC,CAAC0P,SAAS,GAAGH,MAAM;MACjC;MACAD,MAAM,CAACrL,IAAI,CAACjE,SAAS,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC,MAAM;MACL,MAAM,IAAI0B,SAAS,CAAC,kBAAkB,CAAC;IACzC;EACF,CAAC,MAAM,IAAI1B,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IACjC,IAAI,OAAOD,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,OAAOA,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,IACjE,OAAOA,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MACvCsP,MAAM,CAACrL,IAAI,CAACjE,SAAS,CAAC,CAAC,CAAC,CAAC;MACzBsP,MAAM,CAACrL,IAAI,CAAC;QAAEwL,MAAM,EAAE,CAACzP,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;QAAE0P,SAAS,EAAEH;MAAO,CAAC,CAAC;IAC1E,CAAC,MAAM;MACL,MAAM,IAAI7N,SAAS,CAAC,kBAAkB,CAAC;IACzC;EACF,CAAC,MAAM;IACL,MAAM,IAAIA,SAAS,CAAC,kBAAkB,CAAC;EACzC;EAEA,OAAOpE,KAAK,CAACsB,IAAI,CAACyQ,IAAI,CAACxB,KAAK,CAAC,IAAI,EAAEyB,MAAM,CAAC;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAhS,KAAK,CAACoB,SAAS,CAAC8Q,UAAU,GAAG,YAAW;EACtC,IAAI,CAAC7R,gBAAgB,CAAC6R,UAAU,GAAG,IAAI;EACvC,IAAI,CAACH,IAAI,CAACxB,KAAK,CAAC,IAAI,EAAE7N,SAAS,CAAC;EAChC,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI2P,MAAM,CAACC,aAAa,IAAI,IAAI,EAAE;EAChCtS,KAAK,CAACoB,SAAS,CAACiR,MAAM,CAACC,aAAa,CAAC,GAAG,YAAW;IACjD,OAAO,IAAI,CAACb,MAAM,EAAE,CAACc,aAAa,EAAE,CAACC,0BAA0B,EAAE;EACnE,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEAxS,KAAK,CAACoB,SAAS,CAACqR,GAAG,GAAG,UAASC,EAAE,EAAEC,EAAE,EAAE;EACrC,IAAI,CAAC3P,KAAK,CAACC,OAAO,CAACyP,EAAE,CAAC,IAAI5S,KAAK,CAACoE,QAAQ,CAACwO,EAAE,CAAC,EAAE;IAC5CC,EAAE,GAAGD,EAAE,CAACC,EAAE;IACVD,EAAE,GAAGA,EAAE,CAACA,EAAE;EACZ;EACA,OAAO1S,KAAK,CAACsB,IAAI,CAACmR,GAAG,CAACzR,IAAI,CAAC,IAAI,EAAE0R,EAAE,EAAEC,EAAE,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA3S,KAAK,CAACoB,SAAS,CAAC+Q,MAAM,GAAGnS,KAAK,CAACsB,IAAI,CAACsR,MAAM;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA5S,KAAK,CAACoB,SAAS,CAACyR,YAAY,GAAG,YAAW;EACxC,IAAInQ,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,OAAOA,SAAS,CAAC,CAAC,CAAC,CAACrB,WAAW,KAAK,UAAU,IAAIqB,SAAS,CAAC,CAAC,CAAC,CAACrB,WAAW,CAACyQ,IAAI,KAAK,QAAQ,EAAE;IACxHpP,SAAS,CAAC,CAAC,CAAC,CAAC0P,SAAS,GAAG,IAAI;EAC/B;EAEA,IAAI1P,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,OAAOA,SAAS,CAAC,CAAC,CAAC,CAACrB,WAAW,KAAK,UAAU,IAAIqB,SAAS,CAAC,CAAC,CAAC,CAACrB,WAAW,CAACyQ,IAAI,KAAK,QAAQ,EAAE;IACxHpP,SAAS,CAAC,CAAC,CAAC,CAAC0P,SAAS,GAAG,IAAI;EAC/B;EAEApS,KAAK,CAACsB,IAAI,CAACsR,MAAM,CAACrC,KAAK,CAAC,IAAI,EAAE7N,SAAS,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA1C,KAAK,CAACoB,SAAS,CAAC0R,mBAAmB,GAAG,SAASA,mBAAmB,GAAG;EACnE,OAAO1T,WAAW,CAAC,IAAI,CAACgD,OAAO,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApC,KAAK,CAACoB,SAAS,CAAC2R,mBAAmB,GAAG,SAASA,mBAAmB,GAAG;EACnE,OAAO5T,WAAW,CAAC,IAAI,CAACiD,OAAO,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApC,KAAK,CAACoB,SAAS,CAACjB,KAAK;;AAErB;AACA;AACA;;AAEA6S,MAAM,CAACC,OAAO,GAAGjT,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}