{"ast":null,"code":"'use strict';\n\nconst StrictModeError = require('../../error/strict');\n\n/*!\n * ignore\n */\n\nmodule.exports = function (schematype) {\n  if (schematype.$immutable) {\n    schematype.$immutableSetter = createImmutableSetter(schematype.path, schematype.options.immutable);\n    schematype.set(schematype.$immutableSetter);\n  } else if (schematype.$immutableSetter) {\n    schematype.setters = schematype.setters.filter(fn => fn !== schematype.$immutableSetter);\n    delete schematype.$immutableSetter;\n  }\n};\nfunction createImmutableSetter(path, immutable) {\n  return function immutableSetter(v) {\n    if (this == null || this.$__ == null) {\n      return v;\n    }\n    if (this.isNew) {\n      return v;\n    }\n    const _immutable = typeof immutable === 'function' ? immutable.call(this, this) : immutable;\n    if (!_immutable) {\n      return v;\n    }\n    const _value = this.$__getValue(path);\n    if (this.$__.strictMode === 'throw' && v !== _value) {\n      throw new StrictModeError(path, 'Path `' + path + '` is immutable ' + 'and strict mode is set to throw.', true);\n    }\n    return _value;\n  };\n}","map":{"version":3,"names":["StrictModeError","require","module","exports","schematype","$immutable","$immutableSetter","createImmutableSetter","path","options","immutable","set","setters","filter","fn","immutableSetter","v","$__","isNew","_immutable","call","_value","$__getValue","strictMode"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/helpers/schematype/handleImmutable.js"],"sourcesContent":["'use strict';\n\nconst StrictModeError = require('../../error/strict');\n\n/*!\n * ignore\n */\n\nmodule.exports = function(schematype) {\n  if (schematype.$immutable) {\n    schematype.$immutableSetter = createImmutableSetter(schematype.path,\n      schematype.options.immutable);\n    schematype.set(schematype.$immutableSetter);\n  } else if (schematype.$immutableSetter) {\n    schematype.setters = schematype.setters.\n      filter(fn => fn !== schematype.$immutableSetter);\n    delete schematype.$immutableSetter;\n  }\n};\n\nfunction createImmutableSetter(path, immutable) {\n  return function immutableSetter(v) {\n    if (this == null || this.$__ == null) {\n      return v;\n    }\n    if (this.isNew) {\n      return v;\n    }\n\n    const _immutable = typeof immutable === 'function' ?\n      immutable.call(this, this) :\n      immutable;\n    if (!_immutable) {\n      return v;\n    }\n\n    const _value = this.$__getValue(path);\n    if (this.$__.strictMode === 'throw' && v !== _value) {\n      throw new StrictModeError(path, 'Path `' + path + '` is immutable ' +\n        'and strict mode is set to throw.', true);\n    }\n\n    return _value;\n  };\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAoB,CAAC;;AAErD;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG,UAASC,UAAU,EAAE;EACpC,IAAIA,UAAU,CAACC,UAAU,EAAE;IACzBD,UAAU,CAACE,gBAAgB,GAAGC,qBAAqB,CAACH,UAAU,CAACI,IAAI,EACjEJ,UAAU,CAACK,OAAO,CAACC,SAAS,CAAC;IAC/BN,UAAU,CAACO,GAAG,CAACP,UAAU,CAACE,gBAAgB,CAAC;EAC7C,CAAC,MAAM,IAAIF,UAAU,CAACE,gBAAgB,EAAE;IACtCF,UAAU,CAACQ,OAAO,GAAGR,UAAU,CAACQ,OAAO,CACrCC,MAAM,CAACC,EAAE,IAAIA,EAAE,KAAKV,UAAU,CAACE,gBAAgB,CAAC;IAClD,OAAOF,UAAU,CAACE,gBAAgB;EACpC;AACF,CAAC;AAED,SAASC,qBAAqB,CAACC,IAAI,EAAEE,SAAS,EAAE;EAC9C,OAAO,SAASK,eAAe,CAACC,CAAC,EAAE;IACjC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAACC,GAAG,IAAI,IAAI,EAAE;MACpC,OAAOD,CAAC;IACV;IACA,IAAI,IAAI,CAACE,KAAK,EAAE;MACd,OAAOF,CAAC;IACV;IAEA,MAAMG,UAAU,GAAG,OAAOT,SAAS,KAAK,UAAU,GAChDA,SAAS,CAACU,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAC1BV,SAAS;IACX,IAAI,CAACS,UAAU,EAAE;MACf,OAAOH,CAAC;IACV;IAEA,MAAMK,MAAM,GAAG,IAAI,CAACC,WAAW,CAACd,IAAI,CAAC;IACrC,IAAI,IAAI,CAACS,GAAG,CAACM,UAAU,KAAK,OAAO,IAAIP,CAAC,KAAKK,MAAM,EAAE;MACnD,MAAM,IAAIrB,eAAe,CAACQ,IAAI,EAAE,QAAQ,GAAGA,IAAI,GAAG,iBAAiB,GACjE,kCAAkC,EAAE,IAAI,CAAC;IAC7C;IAEA,OAAOa,MAAM;EACf,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}