{"ast":null,"code":"'use strict';\n\nconst Document = require('../document');\nconst EmbeddedDocument = require('./embedded');\nconst MongooseError = require('../error/mongooseError');\nconst ObjectId = require('./objectid');\nconst cleanModifiedSubpaths = require('../helpers/document/cleanModifiedSubpaths');\nconst get = require('../helpers/get');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\nconst utils = require('../utils');\nconst util = require('util');\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\nconst slicedSymbol = Symbol('mongoose#Array#sliced');\nconst _basePush = Array.prototype.push;\nconst validatorsSymbol = Symbol('mongoose#MongooseCoreArray#validators');\n\n/*!\n * ignore\n */\n\nclass CoreMongooseArray extends Array {\n  get isMongooseArray() {\n    return true;\n  }\n  get validators() {\n    return this[validatorsSymbol];\n  }\n  set validators(v) {\n    this[validatorsSymbol] = v;\n  }\n\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @instance\n   * @api private\n   */\n\n  $__getAtomics() {\n    const ret = [];\n    const keys = Object.keys(this[arrayAtomicsSymbol] || {});\n    let i = keys.length;\n    const opts = Object.assign({}, internalToObjectOptions, {\n      _isNested: true\n    });\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject(opts)];\n      return ret;\n    }\n    while (i--) {\n      const op = keys[i];\n      let val = this[arrayAtomicsSymbol][op];\n\n      // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n      if (utils.isMongooseObject(val)) {\n        val = val.toObject(opts);\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, opts);\n      } else if (val != null && Array.isArray(val.$each)) {\n        val.$each = this.toObject.call(val.$each, opts);\n      } else if (val != null && typeof val.valueOf === 'function') {\n        val = val.valueOf();\n      }\n      if (op === '$addToSet') {\n        val = {\n          $each: val\n        };\n      }\n      ret.push([op, val]);\n    }\n    return ret;\n  }\n\n  /*!\n   * ignore\n   */\n\n  $atomics() {\n    return this[arrayAtomicsSymbol] || {};\n  }\n\n  /*!\n   * ignore\n   */\n\n  $parent() {\n    return this[arrayParentSymbol];\n  }\n\n  /*!\n   * ignore\n   */\n\n  $path() {\n    return this[arrayPathSymbol];\n  }\n\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * ####NOTE:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method $shift\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   */\n\n  $shift() {\n    this._registerAtomic('$pop', -1);\n    this._markModified();\n\n    // only allow shifting once\n    if (this._shifted) {\n      return;\n    }\n    this._shifted = true;\n    return [].shift.call(this);\n  }\n\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this mulitple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @instance\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   * @method $pop\n   * @memberOf MongooseArray\n   */\n\n  $pop() {\n    this._registerAtomic('$pop', 1);\n    this._markModified();\n\n    // only allow popping once\n    if (this._popped) {\n      return;\n    }\n    this._popped = true;\n    return [].pop.call(this);\n  }\n\n  /*!\n   * ignore\n   */\n\n  $schema() {\n    return this[arraySchemaSymbol];\n  }\n\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _cast(value) {\n    let populated = false;\n    let Model;\n    if (this[arrayParentSymbol]) {\n      populated = this[arrayParentSymbol].populated(this[arrayPathSymbol], true);\n    }\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options[populateModelSymbol];\n\n      // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n      if (Buffer.isBuffer(value) || value instanceof ObjectId || !utils.isObject(value)) {\n        value = {\n          _id: value\n        };\n      }\n\n      // gh-2399\n      // we should cast model only when it's not a discriminator\n      const isDisc = value.$__schema && value.$__schema.discriminatorMapping && value.$__schema.discriminatorMapping.key !== undefined;\n      if (!isDisc) {\n        value = new Model(value);\n      }\n      return this[arraySchemaSymbol].caster.applySetters(value, this[arrayParentSymbol], true);\n    }\n    return this[arraySchemaSymbol].caster.applySetters(value, this[arrayParentSymbol], false);\n  }\n\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @memberOf MongooseArray\n   */\n\n  _mapCast(val, index) {\n    return this._cast(val, this.length + index);\n  }\n\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {EmbeddedDocument} embeddedDoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the embeddedDoc\n   * @method _markModified\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _markModified(elem) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n      if (arguments.length) {\n        dirtyPath = dirtyPath + '.' + elem;\n      }\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n      parent.markModified(dirtyPath, arguments.length > 0 ? elem : parent);\n    }\n    return this;\n  }\n\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _registerAtomic(op, val) {\n    if (this[slicedSymbol]) {\n      return;\n    }\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this[arrayAtomicsSymbol] = {\n        $set: val\n      };\n      cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]);\n      this._markModified();\n      return this;\n    }\n    this[arrayAtomicsSymbol] || (this[arrayAtomicsSymbol] = {});\n    const atomics = this[arrayAtomicsSymbol];\n\n    // reset pop/shift after save\n    if (op === '$pop' && !('$pop' in atomics)) {\n      const _this = this;\n      this[arrayParentSymbol].once('save', function () {\n        _this._popped = _this._shifted = null;\n      });\n    }\n\n    // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n    if (this[arrayAtomicsSymbol].$set || Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this[arrayAtomicsSymbol] = {\n        $set: this\n      };\n      return this;\n    }\n    let selector;\n    if (op === '$pullAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      const pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n      if (val[0] instanceof EmbeddedDocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(function (v) {\n          return v.toObject({\n            transform: false,\n            virtuals: false\n          });\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = {\n          $in: []\n        });\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else if (op === '$push') {\n      atomics.$push = atomics.$push || {\n        $each: []\n      };\n      if (val != null && utils.hasUserDefinedProperty(val, '$each')) {\n        atomics.$push = val;\n      } else {\n        atomics.$push.$each = atomics.$push.$each.concat(val);\n      }\n    } else {\n      atomics[op] = val;\n    }\n    return this;\n  }\n\n  /**\n   * Adds values to the array if not already present.\n   *\n   * ####Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     const added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {any} [args...]\n   * @return {Array} the values that were added\n   * @memberOf MongooseArray\n   * @api public\n   * @method addToSet\n   */\n\n  addToSet() {\n    _checkManualPopulation(this, arguments);\n    let values = [].map.call(arguments, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    const added = [];\n    let type = '';\n    if (values[0] instanceof EmbeddedDocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    }\n    values.forEach(function (v) {\n      let found;\n      const val = +v;\n      switch (type) {\n        case 'doc':\n          found = this.some(function (doc) {\n            return doc.equals(v);\n          });\n          break;\n        case 'date':\n          found = this.some(function (d) {\n            return +d === val;\n          });\n          break;\n        default:\n          found = ~this.indexOf(v);\n      }\n      if (!found) {\n        [].push.call(this, v);\n        this._registerAtomic('$addToSet', v);\n        this._markModified();\n        [].push.call(added, v);\n      }\n    }, this);\n    return added;\n  }\n\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @memberOf MongooseArray\n   */\n\n  hasAtomics() {\n    if (!utils.isPOJO(this[arrayAtomicsSymbol])) {\n      return 0;\n    }\n    return Object.keys(this[arrayAtomicsSymbol]).length;\n  }\n\n  /**\n   * Return whether or not the `obj` is included in the array.\n   *\n   * @param {Object} obj the item to check\n   * @return {Boolean}\n   * @api public\n   * @method includes\n   * @memberOf MongooseArray\n   */\n\n  includes(obj, fromIndex) {\n    const ret = this.indexOf(obj, fromIndex);\n    return ret !== -1;\n  }\n\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @memberOf MongooseArray\n   */\n\n  indexOf(obj, fromIndex) {\n    if (obj instanceof ObjectId) {\n      obj = obj.toString();\n    }\n    fromIndex = fromIndex == null ? 0 : fromIndex;\n    const len = this.length;\n    for (let i = fromIndex; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @memberOf MongooseArray\n   */\n\n  inspect() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {any} [args...]\n   * @api public\n   * @method nonAtomicPush\n   * @memberOf MongooseArray\n   */\n\n  nonAtomicPush() {\n    const values = [].map.call(arguments, this._mapCast, this);\n    const ret = [].push.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop #types_array_MongooseArray-%24pop\n   * @api public\n   * @method pop\n   * @memberOf MongooseArray\n   */\n\n  pop() {\n    const ret = [].pop.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  }\n\n  /**\n   * Pulls items from the array atomically. Equality is determined by casting\n   * the provided value to an embedded document and comparing using\n   * [the `Document.equals()` function.](./api.html#document_Document-equals)\n   *\n   * ####Examples:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\n   *\n   * @param {any} [args...]\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @method pull\n   * @memberOf MongooseArray\n   */\n\n  pull() {\n    const values = [].map.call(arguments, this._cast, this);\n    const cur = this[arrayParentSymbol].get(this[arrayPathSymbol]);\n    let i = cur.length;\n    let mem;\n    while (i--) {\n      mem = cur[i];\n      if (mem instanceof Document) {\n        const some = values.some(function (v) {\n          return mem.equals(v);\n        });\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n    if (values[0] instanceof EmbeddedDocument) {\n      this._registerAtomic('$pullDocs', values.map(function (v) {\n        return v.$__getValue('_id') || v;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n    this._markModified();\n\n    // Might have modified child paths and then pulled, like\n    // `doc.children[1].name = 'test';` followed by\n    // `doc.children.remove(doc.children[0]);`. In this case we fall back\n    // to a `$set` on the whole array. See #3511\n    if (cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]) > 0) {\n      this._registerAtomic('$set', this);\n    }\n    return this;\n  }\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     const schema = Schema({ nums: [Number] });\n   *     const Model = mongoose.model('Test', schema);\n   *\n   *     const doc = await Model.create({ nums: [3, 4] });\n   *     doc.nums.push(5); // Add 5 to the end of the array\n   *     await doc.save();\n   *\n   *     // You can also pass an object with `$each` as the\n   *     // first parameter to use MongoDB's `$position`\n   *     doc.nums.push({\n   *       $each: [1, 2],\n   *       $position: 0\n   *     });\n   *     doc.nums; // [1, 2, 3, 4, 5]\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseArray\n   */\n\n  push() {\n    let values = arguments;\n    let atomic = values;\n    const isOverwrite = values[0] != null && utils.hasUserDefinedProperty(values[0], '$each');\n    if (isOverwrite) {\n      atomic = values[0];\n      values = values[0].$each;\n    }\n    if (this[arraySchemaSymbol] == null) {\n      return _basePush.apply(this, values);\n    }\n    _checkManualPopulation(this, values);\n    const parent = this[arrayParentSymbol];\n    values = [].map.call(values, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, parent, undefined, undefined, {\n      skipDocumentArrayCast: true\n    });\n    let ret;\n    const atomics = this[arrayAtomicsSymbol];\n    if (isOverwrite) {\n      atomic.$each = values;\n      if (get(atomics, '$push.$each.length', 0) > 0 && atomics.$push.$position != atomics.$position) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' + 'with different `$position`');\n      }\n      if (atomic.$position != null) {\n        [].splice.apply(this, [atomic.$position, 0].concat(values));\n        ret = this.length;\n      } else {\n        ret = [].push.apply(this, values);\n      }\n    } else {\n      if (get(atomics, '$push.$each.length', 0) > 0 && atomics.$push.$position != null) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' + 'with different `$position`');\n      }\n      atomic = values;\n      ret = [].push.apply(this, values);\n    }\n    this._registerAtomic('$push', atomic);\n    this._markModified();\n    return ret;\n  }\n\n  /**\n   * Alias of [pull](#mongoosearray_MongooseArray-pull)\n   *\n   * @see MongooseArray#pull #types_array_MongooseArray-pull\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method remove\n   */\n\n  remove() {\n    return this.pull.apply(this, arguments);\n  }\n\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * ####Example:\n   *\n   *     // given documents based on the following\n   *     const Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     const doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @memberOf MongooseArray\n   */\n\n  set(i, val) {\n    const value = this._cast(val, i);\n    this[i] = value;\n    this._markModified(i);\n    return this;\n  }\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     doc.array = [2,3];\n   *     const res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @memberOf MongooseArray\n   */\n\n  shift() {\n    const ret = [].shift.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-sort\n   */\n\n  sort() {\n    const ret = [].sort.apply(this, arguments);\n    this._registerAtomic('$set', this);\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-splice\n   */\n\n  splice() {\n    let ret;\n    _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));\n    if (arguments.length) {\n      let vals;\n      if (this[arraySchemaSymbol] == null) {\n        vals = arguments;\n      } else {\n        vals = [];\n        for (let i = 0; i < arguments.length; ++i) {\n          vals[i] = i < 2 ? arguments[i] : this._cast(arguments[i], arguments[0] + (i - 2));\n        }\n      }\n      ret = [].splice.apply(this, vals);\n      this._registerAtomic('$set', this);\n    }\n    return ret;\n  }\n\n  /*!\n   * ignore\n   */\n\n  slice() {\n    const ret = super.slice.apply(this, arguments);\n    ret[arrayParentSymbol] = this[arrayParentSymbol];\n    ret[arraySchemaSymbol] = this[arraySchemaSymbol];\n    ret[arrayAtomicsSymbol] = this[arrayAtomicsSymbol];\n    ret[arrayPathSymbol] = this[arrayPathSymbol];\n    ret[slicedSymbol] = true;\n    return ret;\n  }\n\n  /*!\n   * ignore\n   */\n\n  filter() {\n    const ret = super.filter.apply(this, arguments);\n    ret[arrayParentSymbol] = this[arrayParentSymbol];\n    ret[arraySchemaSymbol] = this[arraySchemaSymbol];\n    ret[arrayAtomicsSymbol] = this[arrayAtomicsSymbol];\n    ret[arrayPathSymbol] = this[arrayPathSymbol];\n    return ret;\n  }\n\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  }\n\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @memberOf MongooseArray\n   */\n\n  toObject(options) {\n    if (options && options.depopulate) {\n      options = utils.clone(options);\n      options._isNested = true;\n      // Ensure return value is a vanilla array, because in Node.js 6+ `map()`\n      // is smart enough to use the inherited array's constructor.\n      return [].concat(this).map(function (doc) {\n        return doc instanceof Document ? doc.toObject(options) : doc;\n      });\n    }\n    return [].concat(this);\n  }\n\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @memberOf MongooseArray\n   */\n\n  unshift() {\n    _checkManualPopulation(this, arguments);\n    let values;\n    if (this[arraySchemaSymbol] == null) {\n      values = arguments;\n    } else {\n      values = [].map.call(arguments, this._cast, this);\n      values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    }\n    [].unshift.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return this.length;\n  }\n}\nif (util.inspect.custom) {\n  CoreMongooseArray.prototype[util.inspect.custom] = CoreMongooseArray.prototype.inspect;\n}\n\n/*!\n * ignore\n */\n\nfunction _isAllSubdocs(docs, ref) {\n  if (!ref) {\n    return false;\n  }\n  for (const arg of docs) {\n    if (arg == null) {\n      return false;\n    }\n    const model = arg.constructor;\n    if (!(arg instanceof Document) || model.modelName !== ref && model.baseModelName !== ref) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * ignore\n */\n\nfunction _checkManualPopulation(arr, docs) {\n  const ref = arr == null ? null : get(arr[arraySchemaSymbol], 'caster.options.ref', null);\n  if (arr.length === 0 && docs.length > 0) {\n    if (_isAllSubdocs(docs, ref)) {\n      arr[arrayParentSymbol].populated(arr[arrayPathSymbol], [], {\n        [populateModelSymbol]: docs[0].constructor\n      });\n    }\n  }\n}\nmodule.exports = CoreMongooseArray;","map":{"version":3,"names":["Document","require","EmbeddedDocument","MongooseError","ObjectId","cleanModifiedSubpaths","get","internalToObjectOptions","utils","util","arrayAtomicsSymbol","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","populateModelSymbol","slicedSymbol","Symbol","_basePush","Array","prototype","push","validatorsSymbol","CoreMongooseArray","isMongooseArray","validators","v","$__getAtomics","ret","keys","Object","i","length","opts","assign","_isNested","toObject","op","val","isMongooseObject","isArray","call","$each","valueOf","$atomics","$parent","$path","$shift","_registerAtomic","_markModified","_shifted","shift","$pop","_popped","pop","$schema","_cast","value","populated","Model","undefined","options","Buffer","isBuffer","isObject","_id","isDisc","$__schema","discriminatorMapping","key","caster","applySetters","_mapCast","index","elem","parent","dirtyPath","arguments","endsWith","markModified","$set","atomics","_this","once","selector","concat","pullOp","apply","map","transform","virtuals","$in","$push","hasUserDefinedProperty","addToSet","_checkManualPopulation","values","added","type","Date","forEach","found","some","doc","equals","d","indexOf","hasAtomics","isPOJO","includes","obj","fromIndex","toString","len","inspect","JSON","stringify","nonAtomicPush","pull","cur","mem","splice","$__getValue","atomic","isOverwrite","skipDocumentArrayCast","$position","remove","set","sort","slice","vals","filter","toBSON","depopulate","clone","unshift","custom","_isAllSubdocs","docs","ref","arg","model","constructor","modelName","baseModelName","arr","module","exports"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/types/core_array.js"],"sourcesContent":["'use strict';\n\nconst Document = require('../document');\nconst EmbeddedDocument = require('./embedded');\nconst MongooseError = require('../error/mongooseError');\nconst ObjectId = require('./objectid');\nconst cleanModifiedSubpaths = require('../helpers/document/cleanModifiedSubpaths');\nconst get = require('../helpers/get');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\nconst utils = require('../utils');\nconst util = require('util');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\nconst slicedSymbol = Symbol('mongoose#Array#sliced');\n\nconst _basePush = Array.prototype.push;\n\nconst validatorsSymbol = Symbol('mongoose#MongooseCoreArray#validators');\n\n/*!\n * ignore\n */\n\nclass CoreMongooseArray extends Array {\n  get isMongooseArray() {\n    return true;\n  }\n\n  get validators() {\n    return this[validatorsSymbol];\n  }\n\n  set validators(v) {\n    this[validatorsSymbol] = v;\n  }\n\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @instance\n   * @api private\n   */\n\n  $__getAtomics() {\n    const ret = [];\n    const keys = Object.keys(this[arrayAtomicsSymbol] || {});\n    let i = keys.length;\n\n    const opts = Object.assign({}, internalToObjectOptions, { _isNested: true });\n\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject(opts)];\n      return ret;\n    }\n\n    while (i--) {\n      const op = keys[i];\n      let val = this[arrayAtomicsSymbol][op];\n\n      // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n      if (utils.isMongooseObject(val)) {\n        val = val.toObject(opts);\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, opts);\n      } else if (val != null && Array.isArray(val.$each)) {\n        val.$each = this.toObject.call(val.$each, opts);\n      } else if (val != null && typeof val.valueOf === 'function') {\n        val = val.valueOf();\n      }\n\n      if (op === '$addToSet') {\n        val = { $each: val };\n      }\n\n      ret.push([op, val]);\n    }\n\n    return ret;\n  }\n\n  /*!\n   * ignore\n   */\n\n  $atomics() {\n    return this[arrayAtomicsSymbol] || {};\n  }\n\n  /*!\n   * ignore\n   */\n\n  $parent() {\n    return this[arrayParentSymbol];\n  }\n\n  /*!\n   * ignore\n   */\n\n  $path() {\n    return this[arrayPathSymbol];\n  }\n\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * ####NOTE:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method $shift\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   */\n\n  $shift() {\n    this._registerAtomic('$pop', -1);\n    this._markModified();\n\n    // only allow shifting once\n    if (this._shifted) {\n      return;\n    }\n    this._shifted = true;\n\n    return [].shift.call(this);\n  }\n\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this mulitple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @instance\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   * @method $pop\n   * @memberOf MongooseArray\n   */\n\n  $pop() {\n    this._registerAtomic('$pop', 1);\n    this._markModified();\n\n    // only allow popping once\n    if (this._popped) {\n      return;\n    }\n    this._popped = true;\n\n    return [].pop.call(this);\n  }\n\n  /*!\n   * ignore\n   */\n\n  $schema() {\n    return this[arraySchemaSymbol];\n  }\n\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _cast(value) {\n    let populated = false;\n    let Model;\n\n    if (this[arrayParentSymbol]) {\n      populated = this[arrayParentSymbol].populated(this[arrayPathSymbol], true);\n    }\n\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options[populateModelSymbol];\n\n      // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n      if (Buffer.isBuffer(value) ||\n          value instanceof ObjectId || !utils.isObject(value)) {\n        value = { _id: value };\n      }\n\n      // gh-2399\n      // we should cast model only when it's not a discriminator\n      const isDisc = value.$__schema && value.$__schema.discriminatorMapping &&\n          value.$__schema.discriminatorMapping.key !== undefined;\n      if (!isDisc) {\n        value = new Model(value);\n      }\n      return this[arraySchemaSymbol].caster.applySetters(value, this[arrayParentSymbol], true);\n    }\n\n    return this[arraySchemaSymbol].caster.applySetters(value, this[arrayParentSymbol], false);\n  }\n\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @memberOf MongooseArray\n   */\n\n  _mapCast(val, index) {\n    return this._cast(val, this.length + index);\n  }\n\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {EmbeddedDocument} embeddedDoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the embeddedDoc\n   * @method _markModified\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _markModified(elem) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n\n      if (arguments.length) {\n        dirtyPath = dirtyPath + '.' + elem;\n      }\n\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n\n      parent.markModified(dirtyPath, arguments.length > 0 ? elem : parent);\n    }\n\n    return this;\n  }\n\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _registerAtomic(op, val) {\n    if (this[slicedSymbol]) {\n      return;\n    }\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this[arrayAtomicsSymbol] = { $set: val };\n      cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]);\n      this._markModified();\n      return this;\n    }\n\n    this[arrayAtomicsSymbol] || (this[arrayAtomicsSymbol] = {});\n\n    const atomics = this[arrayAtomicsSymbol];\n\n    // reset pop/shift after save\n    if (op === '$pop' && !('$pop' in atomics)) {\n      const _this = this;\n      this[arrayParentSymbol].once('save', function() {\n        _this._popped = _this._shifted = null;\n      });\n    }\n\n    // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n    if (this[arrayAtomicsSymbol].$set || Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this[arrayAtomicsSymbol] = { $set: this };\n      return this;\n    }\n\n    let selector;\n\n    if (op === '$pullAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      const pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n      if (val[0] instanceof EmbeddedDocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(function(v) {\n          return v.toObject({ transform: false, virtuals: false });\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = { $in: [] });\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else if (op === '$push') {\n      atomics.$push = atomics.$push || { $each: [] };\n      if (val != null && utils.hasUserDefinedProperty(val, '$each')) {\n        atomics.$push = val;\n      } else {\n        atomics.$push.$each = atomics.$push.$each.concat(val);\n      }\n    } else {\n      atomics[op] = val;\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds values to the array if not already present.\n   *\n   * ####Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     const added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {any} [args...]\n   * @return {Array} the values that were added\n   * @memberOf MongooseArray\n   * @api public\n   * @method addToSet\n   */\n\n  addToSet() {\n    _checkManualPopulation(this, arguments);\n\n    let values = [].map.call(arguments, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    const added = [];\n    let type = '';\n    if (values[0] instanceof EmbeddedDocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    }\n\n    values.forEach(function(v) {\n      let found;\n      const val = +v;\n      switch (type) {\n        case 'doc':\n          found = this.some(function(doc) {\n            return doc.equals(v);\n          });\n          break;\n        case 'date':\n          found = this.some(function(d) {\n            return +d === val;\n          });\n          break;\n        default:\n          found = ~this.indexOf(v);\n      }\n\n      if (!found) {\n        [].push.call(this, v);\n        this._registerAtomic('$addToSet', v);\n        this._markModified();\n        [].push.call(added, v);\n      }\n    }, this);\n\n    return added;\n  }\n\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @memberOf MongooseArray\n   */\n\n  hasAtomics() {\n    if (!utils.isPOJO(this[arrayAtomicsSymbol])) {\n      return 0;\n    }\n\n    return Object.keys(this[arrayAtomicsSymbol]).length;\n  }\n\n  /**\n   * Return whether or not the `obj` is included in the array.\n   *\n   * @param {Object} obj the item to check\n   * @return {Boolean}\n   * @api public\n   * @method includes\n   * @memberOf MongooseArray\n   */\n\n  includes(obj, fromIndex) {\n    const ret = this.indexOf(obj, fromIndex);\n    return ret !== -1;\n  }\n\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @memberOf MongooseArray\n   */\n\n  indexOf(obj, fromIndex) {\n    if (obj instanceof ObjectId) {\n      obj = obj.toString();\n    }\n\n    fromIndex = fromIndex == null ? 0 : fromIndex;\n    const len = this.length;\n    for (let i = fromIndex; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @memberOf MongooseArray\n   */\n\n  inspect() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {any} [args...]\n   * @api public\n   * @method nonAtomicPush\n   * @memberOf MongooseArray\n   */\n\n  nonAtomicPush() {\n    const values = [].map.call(arguments, this._mapCast, this);\n    const ret = [].push.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop #types_array_MongooseArray-%24pop\n   * @api public\n   * @method pop\n   * @memberOf MongooseArray\n   */\n\n  pop() {\n    const ret = [].pop.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  }\n\n  /**\n   * Pulls items from the array atomically. Equality is determined by casting\n   * the provided value to an embedded document and comparing using\n   * [the `Document.equals()` function.](./api.html#document_Document-equals)\n   *\n   * ####Examples:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\n   *\n   * @param {any} [args...]\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @method pull\n   * @memberOf MongooseArray\n   */\n\n  pull() {\n    const values = [].map.call(arguments, this._cast, this);\n    const cur = this[arrayParentSymbol].get(this[arrayPathSymbol]);\n    let i = cur.length;\n    let mem;\n\n    while (i--) {\n      mem = cur[i];\n      if (mem instanceof Document) {\n        const some = values.some(function(v) {\n          return mem.equals(v);\n        });\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n\n    if (values[0] instanceof EmbeddedDocument) {\n      this._registerAtomic('$pullDocs', values.map(function(v) {\n        return v.$__getValue('_id') || v;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n\n    this._markModified();\n\n    // Might have modified child paths and then pulled, like\n    // `doc.children[1].name = 'test';` followed by\n    // `doc.children.remove(doc.children[0]);`. In this case we fall back\n    // to a `$set` on the whole array. See #3511\n    if (cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]) > 0) {\n      this._registerAtomic('$set', this);\n    }\n\n    return this;\n  }\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     const schema = Schema({ nums: [Number] });\n   *     const Model = mongoose.model('Test', schema);\n   *\n   *     const doc = await Model.create({ nums: [3, 4] });\n   *     doc.nums.push(5); // Add 5 to the end of the array\n   *     await doc.save();\n   *\n   *     // You can also pass an object with `$each` as the\n   *     // first parameter to use MongoDB's `$position`\n   *     doc.nums.push({\n   *       $each: [1, 2],\n   *       $position: 0\n   *     });\n   *     doc.nums; // [1, 2, 3, 4, 5]\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseArray\n   */\n\n  push() {\n    let values = arguments;\n    let atomic = values;\n    const isOverwrite = values[0] != null &&\n      utils.hasUserDefinedProperty(values[0], '$each');\n    if (isOverwrite) {\n      atomic = values[0];\n      values = values[0].$each;\n    }\n\n    if (this[arraySchemaSymbol] == null) {\n      return _basePush.apply(this, values);\n    }\n\n    _checkManualPopulation(this, values);\n\n    const parent = this[arrayParentSymbol];\n    values = [].map.call(values, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, parent, undefined,\n      undefined, { skipDocumentArrayCast: true });\n    let ret;\n    const atomics = this[arrayAtomicsSymbol];\n\n    if (isOverwrite) {\n      atomic.$each = values;\n\n      if (get(atomics, '$push.$each.length', 0) > 0 &&\n          atomics.$push.$position != atomics.$position) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\n          'with different `$position`');\n      }\n\n      if (atomic.$position != null) {\n        [].splice.apply(this, [atomic.$position, 0].concat(values));\n        ret = this.length;\n      } else {\n        ret = [].push.apply(this, values);\n      }\n    } else {\n      if (get(atomics, '$push.$each.length', 0) > 0 &&\n          atomics.$push.$position != null) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\n          'with different `$position`');\n      }\n      atomic = values;\n      ret = [].push.apply(this, values);\n    }\n    this._registerAtomic('$push', atomic);\n    this._markModified();\n    return ret;\n  }\n\n  /**\n   * Alias of [pull](#mongoosearray_MongooseArray-pull)\n   *\n   * @see MongooseArray#pull #types_array_MongooseArray-pull\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method remove\n   */\n\n  remove() {\n    return this.pull.apply(this, arguments);\n  }\n\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * ####Example:\n   *\n   *     // given documents based on the following\n   *     const Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     const doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @memberOf MongooseArray\n   */\n\n  set(i, val) {\n    const value = this._cast(val, i);\n    this[i] = value;\n    this._markModified(i);\n    return this;\n  }\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     doc.array = [2,3];\n   *     const res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @memberOf MongooseArray\n   */\n\n  shift() {\n    const ret = [].shift.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-sort\n   */\n\n  sort() {\n    const ret = [].sort.apply(this, arguments);\n    this._registerAtomic('$set', this);\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-splice\n   */\n\n  splice() {\n    let ret;\n\n    _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));\n\n    if (arguments.length) {\n      let vals;\n      if (this[arraySchemaSymbol] == null) {\n        vals = arguments;\n      } else {\n        vals = [];\n        for (let i = 0; i < arguments.length; ++i) {\n          vals[i] = i < 2 ?\n            arguments[i] :\n            this._cast(arguments[i], arguments[0] + (i - 2));\n        }\n      }\n\n      ret = [].splice.apply(this, vals);\n      this._registerAtomic('$set', this);\n    }\n\n    return ret;\n  }\n\n  /*!\n   * ignore\n   */\n\n  slice() {\n    const ret = super.slice.apply(this, arguments);\n    ret[arrayParentSymbol] = this[arrayParentSymbol];\n    ret[arraySchemaSymbol] = this[arraySchemaSymbol];\n    ret[arrayAtomicsSymbol] = this[arrayAtomicsSymbol];\n    ret[arrayPathSymbol] = this[arrayPathSymbol];\n    ret[slicedSymbol] = true;\n    return ret;\n  }\n\n  /*!\n   * ignore\n   */\n\n  filter() {\n    const ret = super.filter.apply(this, arguments);\n    ret[arrayParentSymbol] = this[arrayParentSymbol];\n    ret[arraySchemaSymbol] = this[arraySchemaSymbol];\n    ret[arrayAtomicsSymbol] = this[arrayAtomicsSymbol];\n    ret[arrayPathSymbol] = this[arrayPathSymbol];\n    return ret;\n  }\n\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  }\n\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @memberOf MongooseArray\n   */\n\n  toObject(options) {\n    if (options && options.depopulate) {\n      options = utils.clone(options);\n      options._isNested = true;\n      // Ensure return value is a vanilla array, because in Node.js 6+ `map()`\n      // is smart enough to use the inherited array's constructor.\n      return [].concat(this).map(function(doc) {\n        return doc instanceof Document\n          ? doc.toObject(options)\n          : doc;\n      });\n    }\n\n    return [].concat(this);\n  }\n\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @memberOf MongooseArray\n   */\n\n  unshift() {\n    _checkManualPopulation(this, arguments);\n\n    let values;\n    if (this[arraySchemaSymbol] == null) {\n      values = arguments;\n    } else {\n      values = [].map.call(arguments, this._cast, this);\n      values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    }\n\n    [].unshift.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return this.length;\n  }\n}\n\nif (util.inspect.custom) {\n  CoreMongooseArray.prototype[util.inspect.custom] =\n    CoreMongooseArray.prototype.inspect;\n}\n\n/*!\n * ignore\n */\n\nfunction _isAllSubdocs(docs, ref) {\n  if (!ref) {\n    return false;\n  }\n\n  for (const arg of docs) {\n    if (arg == null) {\n      return false;\n    }\n    const model = arg.constructor;\n    if (!(arg instanceof Document) ||\n      (model.modelName !== ref && model.baseModelName !== ref)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/*!\n * ignore\n */\n\nfunction _checkManualPopulation(arr, docs) {\n  const ref = arr == null ?\n    null :\n    get(arr[arraySchemaSymbol], 'caster.options.ref', null);\n  if (arr.length === 0 &&\n      docs.length > 0) {\n    if (_isAllSubdocs(docs, ref)) {\n      arr[arrayParentSymbol].populated(arr[arrayPathSymbol], [], {\n        [populateModelSymbol]: docs[0].constructor\n      });\n    }\n  }\n}\n\nmodule.exports = CoreMongooseArray;\n"],"mappings":"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IAEA,OAAOV,GAAG;EACZ;;EAEA;AACF;AACA;;EAEEgB,QAAQ,GAAG;IACT,OAAO,IAAI,CAACjC,kBAAkB,CAAC,IAAI,CAAC,CAAC;EACvC;;EAEA;AACF;AACA;;EAEEkC,OAAO,GAAG;IACR,OAAO,IAAI,CAACjC,iBAAiB,CAAC;EAChC;;EAEA;AACF;AACA;;EAEEkC,KAAK,GAAG;IACN,OAAO,IAAI,CAACjC,eAAe,CAAC;EAC9B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEkC,MAAM,GAAG;IACP,IAAI,CAACC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAChC,IAAI,CAACC,aAAa,EAAE;;IAEpB;IACA,IAAI,IAAI,CAACC,QAAQ,EAAE;MACjB;IACF;IACA,IAAI,CAACA,QAAQ,GAAG,IAAI;IAEpB,OAAO,EAAE,CAACC,KAAK,CAACV,IAAI,CAAC,IAAI,CAAC;EAC5B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEW,IAAI,GAAG;IACL,IAAI,CAACJ,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;IAC/B,IAAI,CAACC,aAAa,EAAE;;IAEpB;IACA,IAAI,IAAI,CAACI,OAAO,EAAE;MAChB;IACF;IACA,IAAI,CAACA,OAAO,GAAG,IAAI;IAEnB,OAAO,EAAE,CAACC,GAAG,CAACb,IAAI,CAAC,IAAI,CAAC;EAC1B;;EAEA;AACF;AACA;;EAEEc,OAAO,GAAG;IACR,OAAO,IAAI,CAACzC,iBAAiB,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE0C,KAAK,CAACC,KAAK,EAAE;IACX,IAAIC,SAAS,GAAG,KAAK;IACrB,IAAIC,KAAK;IAET,IAAI,IAAI,CAAC/C,iBAAiB,CAAC,EAAE;MAC3B8C,SAAS,GAAG,IAAI,CAAC9C,iBAAiB,CAAC,CAAC8C,SAAS,CAAC,IAAI,CAAC7C,eAAe,CAAC,EAAE,IAAI,CAAC;IAC5E;IAEA,IAAI6C,SAAS,IAAID,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKG,SAAS,EAAE;MACtD;MACAD,KAAK,GAAGD,SAAS,CAACG,OAAO,CAAC9C,mBAAmB,CAAC;;MAE9C;MACA;MACA,IAAI+C,MAAM,CAACC,QAAQ,CAACN,KAAK,CAAC,IACtBA,KAAK,YAAYpD,QAAQ,IAAI,CAACI,KAAK,CAACuD,QAAQ,CAACP,KAAK,CAAC,EAAE;QACvDA,KAAK,GAAG;UAAEQ,GAAG,EAAER;QAAM,CAAC;MACxB;;MAEA;MACA;MACA,MAAMS,MAAM,GAAGT,KAAK,CAACU,SAAS,IAAIV,KAAK,CAACU,SAAS,CAACC,oBAAoB,IAClEX,KAAK,CAACU,SAAS,CAACC,oBAAoB,CAACC,GAAG,KAAKT,SAAS;MAC1D,IAAI,CAACM,MAAM,EAAE;QACXT,KAAK,GAAG,IAAIE,KAAK,CAACF,KAAK,CAAC;MAC1B;MACA,OAAO,IAAI,CAAC3C,iBAAiB,CAAC,CAACwD,MAAM,CAACC,YAAY,CAACd,KAAK,EAAE,IAAI,CAAC7C,iBAAiB,CAAC,EAAE,IAAI,CAAC;IAC1F;IAEA,OAAO,IAAI,CAACE,iBAAiB,CAAC,CAACwD,MAAM,CAACC,YAAY,CAACd,KAAK,EAAE,IAAI,CAAC7C,iBAAiB,CAAC,EAAE,KAAK,CAAC;EAC3F;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE4D,QAAQ,CAAClC,GAAG,EAAEmC,KAAK,EAAE;IACnB,OAAO,IAAI,CAACjB,KAAK,CAAClB,GAAG,EAAE,IAAI,CAACN,MAAM,GAAGyC,KAAK,CAAC;EAC7C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEExB,aAAa,CAACyB,IAAI,EAAE;IAClB,MAAMC,MAAM,GAAG,IAAI,CAAC/D,iBAAiB,CAAC;IACtC,IAAIgE,SAAS;IAEb,IAAID,MAAM,EAAE;MACVC,SAAS,GAAG,IAAI,CAAC/D,eAAe,CAAC;MAEjC,IAAIgE,SAAS,CAAC7C,MAAM,EAAE;QACpB4C,SAAS,GAAGA,SAAS,GAAG,GAAG,GAAGF,IAAI;MACpC;MAEA,IAAIE,SAAS,IAAI,IAAI,IAAIA,SAAS,CAACE,QAAQ,CAAC,IAAI,CAAC,EAAE;QACjD,OAAO,IAAI;MACb;MAEAH,MAAM,CAACI,YAAY,CAACH,SAAS,EAAEC,SAAS,CAAC7C,MAAM,GAAG,CAAC,GAAG0C,IAAI,GAAGC,MAAM,CAAC;IACtE;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE3B,eAAe,CAACX,EAAE,EAAEC,GAAG,EAAE;IACvB,IAAI,IAAI,CAACtB,YAAY,CAAC,EAAE;MACtB;IACF;IACA,IAAIqB,EAAE,KAAK,MAAM,EAAE;MACjB;MACA;MACA,IAAI,CAAC1B,kBAAkB,CAAC,GAAG;QAAEqE,IAAI,EAAE1C;MAAI,CAAC;MACxChC,qBAAqB,CAAC,IAAI,CAACM,iBAAiB,CAAC,EAAE,IAAI,CAACC,eAAe,CAAC,CAAC;MACrE,IAAI,CAACoC,aAAa,EAAE;MACpB,OAAO,IAAI;IACb;IAEA,IAAI,CAACtC,kBAAkB,CAAC,KAAK,IAAI,CAACA,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;IAE3D,MAAMsE,OAAO,GAAG,IAAI,CAACtE,kBAAkB,CAAC;;IAExC;IACA,IAAI0B,EAAE,KAAK,MAAM,IAAI,EAAE,MAAM,IAAI4C,OAAO,CAAC,EAAE;MACzC,MAAMC,KAAK,GAAG,IAAI;MAClB,IAAI,CAACtE,iBAAiB,CAAC,CAACuE,IAAI,CAAC,MAAM,EAAE,YAAW;QAC9CD,KAAK,CAAC7B,OAAO,GAAG6B,KAAK,CAAChC,QAAQ,GAAG,IAAI;MACvC,CAAC,CAAC;IACJ;;IAEA;IACA;IACA,IAAI,IAAI,CAACvC,kBAAkB,CAAC,CAACqE,IAAI,IAAIlD,MAAM,CAACD,IAAI,CAACoD,OAAO,CAAC,CAACjD,MAAM,IAAI,EAAEK,EAAE,IAAI4C,OAAO,CAAC,EAAE;MACpF;MACA;MACA,IAAI,CAACtE,kBAAkB,CAAC,GAAG;QAAEqE,IAAI,EAAE;MAAK,CAAC;MACzC,OAAO,IAAI;IACb;IAEA,IAAII,QAAQ;IAEZ,IAAI/C,EAAE,KAAK,UAAU,IAAIA,EAAE,KAAK,WAAW,EAAE;MAC3C4C,OAAO,CAAC5C,EAAE,CAAC,KAAK4C,OAAO,CAAC5C,EAAE,CAAC,GAAG,EAAE,CAAC;MACjC4C,OAAO,CAAC5C,EAAE,CAAC,GAAG4C,OAAO,CAAC5C,EAAE,CAAC,CAACgD,MAAM,CAAC/C,GAAG,CAAC;IACvC,CAAC,MAAM,IAAID,EAAE,KAAK,WAAW,EAAE;MAC7B,MAAMiD,MAAM,GAAGL,OAAO,CAAC,OAAO,CAAC,KAAKA,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;MAC1D,IAAI3C,GAAG,CAAC,CAAC,CAAC,YAAYnC,gBAAgB,EAAE;QACtCiF,QAAQ,GAAGE,MAAM,CAAC,KAAK,CAAC,KAAKA,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;QAChDnE,KAAK,CAACC,SAAS,CAACC,IAAI,CAACkE,KAAK,CAACH,QAAQ,EAAE9C,GAAG,CAACkD,GAAG,CAAC,UAAS9D,CAAC,EAAE;UACvD,OAAOA,CAAC,CAACU,QAAQ,CAAC;YAAEqD,SAAS,EAAE,KAAK;YAAEC,QAAQ,EAAE;UAAM,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;MACL,CAAC,MAAM;QACLN,QAAQ,GAAGE,MAAM,CAAC,KAAK,CAAC,KAAKA,MAAM,CAAC,KAAK,CAAC,GAAG;UAAEK,GAAG,EAAE;QAAG,CAAC,CAAC;QACzDP,QAAQ,CAAC,KAAK,CAAC,GAAGA,QAAQ,CAAC,KAAK,CAAC,CAACC,MAAM,CAAC/C,GAAG,CAAC;MAC/C;IACF,CAAC,MAAM,IAAID,EAAE,KAAK,OAAO,EAAE;MACzB4C,OAAO,CAACW,KAAK,GAAGX,OAAO,CAACW,KAAK,IAAI;QAAElD,KAAK,EAAE;MAAG,CAAC;MAC9C,IAAIJ,GAAG,IAAI,IAAI,IAAI7B,KAAK,CAACoF,sBAAsB,CAACvD,GAAG,EAAE,OAAO,CAAC,EAAE;QAC7D2C,OAAO,CAACW,KAAK,GAAGtD,GAAG;MACrB,CAAC,MAAM;QACL2C,OAAO,CAACW,KAAK,CAAClD,KAAK,GAAGuC,OAAO,CAACW,KAAK,CAAClD,KAAK,CAAC2C,MAAM,CAAC/C,GAAG,CAAC;MACvD;IACF,CAAC,MAAM;MACL2C,OAAO,CAAC5C,EAAE,CAAC,GAAGC,GAAG;IACnB;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEwD,QAAQ,GAAG;IACTC,sBAAsB,CAAC,IAAI,EAAElB,SAAS,CAAC;IAEvC,IAAImB,MAAM,GAAG,EAAE,CAACR,GAAG,CAAC/C,IAAI,CAACoC,SAAS,EAAE,IAAI,CAACL,QAAQ,EAAE,IAAI,CAAC;IACxDwB,MAAM,GAAG,IAAI,CAAClF,iBAAiB,CAAC,CAACyD,YAAY,CAACyB,MAAM,EAAE,IAAI,CAACpF,iBAAiB,CAAC,CAAC;IAC9E,MAAMqF,KAAK,GAAG,EAAE;IAChB,IAAIC,IAAI,GAAG,EAAE;IACb,IAAIF,MAAM,CAAC,CAAC,CAAC,YAAY7F,gBAAgB,EAAE;MACzC+F,IAAI,GAAG,KAAK;IACd,CAAC,MAAM,IAAIF,MAAM,CAAC,CAAC,CAAC,YAAYG,IAAI,EAAE;MACpCD,IAAI,GAAG,MAAM;IACf;IAEAF,MAAM,CAACI,OAAO,CAAC,UAAS1E,CAAC,EAAE;MACzB,IAAI2E,KAAK;MACT,MAAM/D,GAAG,GAAG,CAACZ,CAAC;MACd,QAAQwE,IAAI;QACV,KAAK,KAAK;UACRG,KAAK,GAAG,IAAI,CAACC,IAAI,CAAC,UAASC,GAAG,EAAE;YAC9B,OAAOA,GAAG,CAACC,MAAM,CAAC9E,CAAC,CAAC;UACtB,CAAC,CAAC;UACF;QACF,KAAK,MAAM;UACT2E,KAAK,GAAG,IAAI,CAACC,IAAI,CAAC,UAASG,CAAC,EAAE;YAC5B,OAAO,CAACA,CAAC,KAAKnE,GAAG;UACnB,CAAC,CAAC;UACF;QACF;UACE+D,KAAK,GAAG,CAAC,IAAI,CAACK,OAAO,CAAChF,CAAC,CAAC;MAAC;MAG7B,IAAI,CAAC2E,KAAK,EAAE;QACV,EAAE,CAAChF,IAAI,CAACoB,IAAI,CAAC,IAAI,EAAEf,CAAC,CAAC;QACrB,IAAI,CAACsB,eAAe,CAAC,WAAW,EAAEtB,CAAC,CAAC;QACpC,IAAI,CAACuB,aAAa,EAAE;QACpB,EAAE,CAAC5B,IAAI,CAACoB,IAAI,CAACwD,KAAK,EAAEvE,CAAC,CAAC;MACxB;IACF,CAAC,EAAE,IAAI,CAAC;IAER,OAAOuE,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEU,UAAU,GAAG;IACX,IAAI,CAAClG,KAAK,CAACmG,MAAM,CAAC,IAAI,CAACjG,kBAAkB,CAAC,CAAC,EAAE;MAC3C,OAAO,CAAC;IACV;IAEA,OAAOmB,MAAM,CAACD,IAAI,CAAC,IAAI,CAAClB,kBAAkB,CAAC,CAAC,CAACqB,MAAM;EACrD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE6E,QAAQ,CAACC,GAAG,EAAEC,SAAS,EAAE;IACvB,MAAMnF,GAAG,GAAG,IAAI,CAAC8E,OAAO,CAACI,GAAG,EAAEC,SAAS,CAAC;IACxC,OAAOnF,GAAG,KAAK,CAAC,CAAC;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE8E,OAAO,CAACI,GAAG,EAAEC,SAAS,EAAE;IACtB,IAAID,GAAG,YAAYzG,QAAQ,EAAE;MAC3ByG,GAAG,GAAGA,GAAG,CAACE,QAAQ,EAAE;IACtB;IAEAD,SAAS,GAAGA,SAAS,IAAI,IAAI,GAAG,CAAC,GAAGA,SAAS;IAC7C,MAAME,GAAG,GAAG,IAAI,CAACjF,MAAM;IACvB,KAAK,IAAID,CAAC,GAAGgF,SAAS,EAAEhF,CAAC,GAAGkF,GAAG,EAAE,EAAElF,CAAC,EAAE;MACpC,IAAI+E,GAAG,IAAI,IAAI,CAAC/E,CAAC,CAAC,EAAE;QAClB,OAAOA,CAAC;MACV;IACF;IACA,OAAO,CAAC,CAAC;EACX;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEEmF,OAAO,GAAG;IACR,OAAOC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEC,aAAa,GAAG;IACd,MAAMrB,MAAM,GAAG,EAAE,CAACR,GAAG,CAAC/C,IAAI,CAACoC,SAAS,EAAE,IAAI,CAACL,QAAQ,EAAE,IAAI,CAAC;IAC1D,MAAM5C,GAAG,GAAG,EAAE,CAACP,IAAI,CAACkE,KAAK,CAAC,IAAI,EAAES,MAAM,CAAC;IACvC,IAAI,CAAChD,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC;IAClC,IAAI,CAACC,aAAa,EAAE;IACpB,OAAOrB,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE0B,GAAG,GAAG;IACJ,MAAM1B,GAAG,GAAG,EAAE,CAAC0B,GAAG,CAACb,IAAI,CAAC,IAAI,CAAC;IAC7B,IAAI,CAACO,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC;IAClC,IAAI,CAACC,aAAa,EAAE;IACpB,OAAOrB,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE0F,IAAI,GAAG;IACL,MAAMtB,MAAM,GAAG,EAAE,CAACR,GAAG,CAAC/C,IAAI,CAACoC,SAAS,EAAE,IAAI,CAACrB,KAAK,EAAE,IAAI,CAAC;IACvD,MAAM+D,GAAG,GAAG,IAAI,CAAC3G,iBAAiB,CAAC,CAACL,GAAG,CAAC,IAAI,CAACM,eAAe,CAAC,CAAC;IAC9D,IAAIkB,CAAC,GAAGwF,GAAG,CAACvF,MAAM;IAClB,IAAIwF,GAAG;IAEP,OAAOzF,CAAC,EAAE,EAAE;MACVyF,GAAG,GAAGD,GAAG,CAACxF,CAAC,CAAC;MACZ,IAAIyF,GAAG,YAAYvH,QAAQ,EAAE;QAC3B,MAAMqG,IAAI,GAAGN,MAAM,CAACM,IAAI,CAAC,UAAS5E,CAAC,EAAE;UACnC,OAAO8F,GAAG,CAAChB,MAAM,CAAC9E,CAAC,CAAC;QACtB,CAAC,CAAC;QACF,IAAI4E,IAAI,EAAE;UACR,EAAE,CAACmB,MAAM,CAAChF,IAAI,CAAC8E,GAAG,EAAExF,CAAC,EAAE,CAAC,CAAC;QAC3B;MACF,CAAC,MAAM,IAAI,CAACwF,GAAG,CAACb,OAAO,CAACjE,IAAI,CAACuD,MAAM,EAAEwB,GAAG,CAAC,EAAE;QACzC,EAAE,CAACC,MAAM,CAAChF,IAAI,CAAC8E,GAAG,EAAExF,CAAC,EAAE,CAAC,CAAC;MAC3B;IACF;IAEA,IAAIiE,MAAM,CAAC,CAAC,CAAC,YAAY7F,gBAAgB,EAAE;MACzC,IAAI,CAAC6C,eAAe,CAAC,WAAW,EAAEgD,MAAM,CAACR,GAAG,CAAC,UAAS9D,CAAC,EAAE;QACvD,OAAOA,CAAC,CAACgG,WAAW,CAAC,KAAK,CAAC,IAAIhG,CAAC;MAClC,CAAC,CAAC,CAAC;IACL,CAAC,MAAM;MACL,IAAI,CAACsB,eAAe,CAAC,UAAU,EAAEgD,MAAM,CAAC;IAC1C;IAEA,IAAI,CAAC/C,aAAa,EAAE;;IAEpB;IACA;IACA;IACA;IACA,IAAI3C,qBAAqB,CAAC,IAAI,CAACM,iBAAiB,CAAC,EAAE,IAAI,CAACC,eAAe,CAAC,CAAC,GAAG,CAAC,EAAE;MAC7E,IAAI,CAACmC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC;IACpC;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE3B,IAAI,GAAG;IACL,IAAI2E,MAAM,GAAGnB,SAAS;IACtB,IAAI8C,MAAM,GAAG3B,MAAM;IACnB,MAAM4B,WAAW,GAAG5B,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,IACnCvF,KAAK,CAACoF,sBAAsB,CAACG,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;IAClD,IAAI4B,WAAW,EAAE;MACfD,MAAM,GAAG3B,MAAM,CAAC,CAAC,CAAC;MAClBA,MAAM,GAAGA,MAAM,CAAC,CAAC,CAAC,CAACtD,KAAK;IAC1B;IAEA,IAAI,IAAI,CAAC5B,iBAAiB,CAAC,IAAI,IAAI,EAAE;MACnC,OAAOI,SAAS,CAACqE,KAAK,CAAC,IAAI,EAAES,MAAM,CAAC;IACtC;IAEAD,sBAAsB,CAAC,IAAI,EAAEC,MAAM,CAAC;IAEpC,MAAMrB,MAAM,GAAG,IAAI,CAAC/D,iBAAiB,CAAC;IACtCoF,MAAM,GAAG,EAAE,CAACR,GAAG,CAAC/C,IAAI,CAACuD,MAAM,EAAE,IAAI,CAACxB,QAAQ,EAAE,IAAI,CAAC;IACjDwB,MAAM,GAAG,IAAI,CAAClF,iBAAiB,CAAC,CAACyD,YAAY,CAACyB,MAAM,EAAErB,MAAM,EAAEf,SAAS,EACrEA,SAAS,EAAE;MAAEiE,qBAAqB,EAAE;IAAK,CAAC,CAAC;IAC7C,IAAIjG,GAAG;IACP,MAAMqD,OAAO,GAAG,IAAI,CAACtE,kBAAkB,CAAC;IAExC,IAAIiH,WAAW,EAAE;MACfD,MAAM,CAACjF,KAAK,GAAGsD,MAAM;MAErB,IAAIzF,GAAG,CAAC0E,OAAO,EAAE,oBAAoB,EAAE,CAAC,CAAC,GAAG,CAAC,IACzCA,OAAO,CAACW,KAAK,CAACkC,SAAS,IAAI7C,OAAO,CAAC6C,SAAS,EAAE;QAChD,MAAM,IAAI1H,aAAa,CAAC,4CAA4C,GAClE,4BAA4B,CAAC;MACjC;MAEA,IAAIuH,MAAM,CAACG,SAAS,IAAI,IAAI,EAAE;QAC5B,EAAE,CAACL,MAAM,CAAClC,KAAK,CAAC,IAAI,EAAE,CAACoC,MAAM,CAACG,SAAS,EAAE,CAAC,CAAC,CAACzC,MAAM,CAACW,MAAM,CAAC,CAAC;QAC3DpE,GAAG,GAAG,IAAI,CAACI,MAAM;MACnB,CAAC,MAAM;QACLJ,GAAG,GAAG,EAAE,CAACP,IAAI,CAACkE,KAAK,CAAC,IAAI,EAAES,MAAM,CAAC;MACnC;IACF,CAAC,MAAM;MACL,IAAIzF,GAAG,CAAC0E,OAAO,EAAE,oBAAoB,EAAE,CAAC,CAAC,GAAG,CAAC,IACzCA,OAAO,CAACW,KAAK,CAACkC,SAAS,IAAI,IAAI,EAAE;QACnC,MAAM,IAAI1H,aAAa,CAAC,4CAA4C,GAClE,4BAA4B,CAAC;MACjC;MACAuH,MAAM,GAAG3B,MAAM;MACfpE,GAAG,GAAG,EAAE,CAACP,IAAI,CAACkE,KAAK,CAAC,IAAI,EAAES,MAAM,CAAC;IACnC;IACA,IAAI,CAAChD,eAAe,CAAC,OAAO,EAAE2E,MAAM,CAAC;IACrC,IAAI,CAAC1E,aAAa,EAAE;IACpB,OAAOrB,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEmG,MAAM,GAAG;IACP,OAAO,IAAI,CAACT,IAAI,CAAC/B,KAAK,CAAC,IAAI,EAAEV,SAAS,CAAC;EACzC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEmD,GAAG,CAACjG,CAAC,EAAEO,GAAG,EAAE;IACV,MAAMmB,KAAK,GAAG,IAAI,CAACD,KAAK,CAAClB,GAAG,EAAEP,CAAC,CAAC;IAChC,IAAI,CAACA,CAAC,CAAC,GAAG0B,KAAK;IACf,IAAI,CAACR,aAAa,CAAClB,CAAC,CAAC;IACrB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEoB,KAAK,GAAG;IACN,MAAMvB,GAAG,GAAG,EAAE,CAACuB,KAAK,CAACV,IAAI,CAAC,IAAI,CAAC;IAC/B,IAAI,CAACO,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC;IAClC,IAAI,CAACC,aAAa,EAAE;IACpB,OAAOrB,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEqG,IAAI,GAAG;IACL,MAAMrG,GAAG,GAAG,EAAE,CAACqG,IAAI,CAAC1C,KAAK,CAAC,IAAI,EAAEV,SAAS,CAAC;IAC1C,IAAI,CAAC7B,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC;IAClC,OAAOpB,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE6F,MAAM,GAAG;IACP,IAAI7F,GAAG;IAEPmE,sBAAsB,CAAC,IAAI,EAAE5E,KAAK,CAACC,SAAS,CAAC8G,KAAK,CAACzF,IAAI,CAACoC,SAAS,EAAE,CAAC,CAAC,CAAC;IAEtE,IAAIA,SAAS,CAAC7C,MAAM,EAAE;MACpB,IAAImG,IAAI;MACR,IAAI,IAAI,CAACrH,iBAAiB,CAAC,IAAI,IAAI,EAAE;QACnCqH,IAAI,GAAGtD,SAAS;MAClB,CAAC,MAAM;QACLsD,IAAI,GAAG,EAAE;QACT,KAAK,IAAIpG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8C,SAAS,CAAC7C,MAAM,EAAE,EAAED,CAAC,EAAE;UACzCoG,IAAI,CAACpG,CAAC,CAAC,GAAGA,CAAC,GAAG,CAAC,GACb8C,SAAS,CAAC9C,CAAC,CAAC,GACZ,IAAI,CAACyB,KAAK,CAACqB,SAAS,CAAC9C,CAAC,CAAC,EAAE8C,SAAS,CAAC,CAAC,CAAC,IAAI9C,CAAC,GAAG,CAAC,CAAC,CAAC;QACpD;MACF;MAEAH,GAAG,GAAG,EAAE,CAAC6F,MAAM,CAAClC,KAAK,CAAC,IAAI,EAAE4C,IAAI,CAAC;MACjC,IAAI,CAACnF,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC;IACpC;IAEA,OAAOpB,GAAG;EACZ;;EAEA;AACF;AACA;;EAEEsG,KAAK,GAAG;IACN,MAAMtG,GAAG,GAAG,KAAK,CAACsG,KAAK,CAAC3C,KAAK,CAAC,IAAI,EAAEV,SAAS,CAAC;IAC9CjD,GAAG,CAAChB,iBAAiB,CAAC,GAAG,IAAI,CAACA,iBAAiB,CAAC;IAChDgB,GAAG,CAACd,iBAAiB,CAAC,GAAG,IAAI,CAACA,iBAAiB,CAAC;IAChDc,GAAG,CAACjB,kBAAkB,CAAC,GAAG,IAAI,CAACA,kBAAkB,CAAC;IAClDiB,GAAG,CAACf,eAAe,CAAC,GAAG,IAAI,CAACA,eAAe,CAAC;IAC5Ce,GAAG,CAACZ,YAAY,CAAC,GAAG,IAAI;IACxB,OAAOY,GAAG;EACZ;;EAEA;AACF;AACA;;EAEEwG,MAAM,GAAG;IACP,MAAMxG,GAAG,GAAG,KAAK,CAACwG,MAAM,CAAC7C,KAAK,CAAC,IAAI,EAAEV,SAAS,CAAC;IAC/CjD,GAAG,CAAChB,iBAAiB,CAAC,GAAG,IAAI,CAACA,iBAAiB,CAAC;IAChDgB,GAAG,CAACd,iBAAiB,CAAC,GAAG,IAAI,CAACA,iBAAiB,CAAC;IAChDc,GAAG,CAACjB,kBAAkB,CAAC,GAAG,IAAI,CAACA,kBAAkB,CAAC;IAClDiB,GAAG,CAACf,eAAe,CAAC,GAAG,IAAI,CAACA,eAAe,CAAC;IAC5C,OAAOe,GAAG;EACZ;;EAEA;AACF;AACA;;EAEEyG,MAAM,GAAG;IACP,OAAO,IAAI,CAACjG,QAAQ,CAAC5B,uBAAuB,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE4B,QAAQ,CAACyB,OAAO,EAAE;IAChB,IAAIA,OAAO,IAAIA,OAAO,CAACyE,UAAU,EAAE;MACjCzE,OAAO,GAAGpD,KAAK,CAAC8H,KAAK,CAAC1E,OAAO,CAAC;MAC9BA,OAAO,CAAC1B,SAAS,GAAG,IAAI;MACxB;MACA;MACA,OAAO,EAAE,CAACkD,MAAM,CAAC,IAAI,CAAC,CAACG,GAAG,CAAC,UAASe,GAAG,EAAE;QACvC,OAAOA,GAAG,YAAYtG,QAAQ,GAC1BsG,GAAG,CAACnE,QAAQ,CAACyB,OAAO,CAAC,GACrB0C,GAAG;MACT,CAAC,CAAC;IACJ;IAEA,OAAO,EAAE,CAAClB,MAAM,CAAC,IAAI,CAAC;EACxB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEmD,OAAO,GAAG;IACRzC,sBAAsB,CAAC,IAAI,EAAElB,SAAS,CAAC;IAEvC,IAAImB,MAAM;IACV,IAAI,IAAI,CAAClF,iBAAiB,CAAC,IAAI,IAAI,EAAE;MACnCkF,MAAM,GAAGnB,SAAS;IACpB,CAAC,MAAM;MACLmB,MAAM,GAAG,EAAE,CAACR,GAAG,CAAC/C,IAAI,CAACoC,SAAS,EAAE,IAAI,CAACrB,KAAK,EAAE,IAAI,CAAC;MACjDwC,MAAM,GAAG,IAAI,CAAClF,iBAAiB,CAAC,CAACyD,YAAY,CAACyB,MAAM,EAAE,IAAI,CAACpF,iBAAiB,CAAC,CAAC;IAChF;IAEA,EAAE,CAAC4H,OAAO,CAACjD,KAAK,CAAC,IAAI,EAAES,MAAM,CAAC;IAC9B,IAAI,CAAChD,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC;IAClC,IAAI,CAACC,aAAa,EAAE;IACpB,OAAO,IAAI,CAACjB,MAAM;EACpB;AACF;AAEA,IAAItB,IAAI,CAACwG,OAAO,CAACuB,MAAM,EAAE;EACvBlH,iBAAiB,CAACH,SAAS,CAACV,IAAI,CAACwG,OAAO,CAACuB,MAAM,CAAC,GAC9ClH,iBAAiB,CAACH,SAAS,CAAC8F,OAAO;AACvC;;AAEA;AACA;AACA;;AAEA,SAASwB,aAAa,CAACC,IAAI,EAAEC,GAAG,EAAE;EAChC,IAAI,CAACA,GAAG,EAAE;IACR,OAAO,KAAK;EACd;EAEA,KAAK,MAAMC,GAAG,IAAIF,IAAI,EAAE;IACtB,IAAIE,GAAG,IAAI,IAAI,EAAE;MACf,OAAO,KAAK;IACd;IACA,MAAMC,KAAK,GAAGD,GAAG,CAACE,WAAW;IAC7B,IAAI,EAAEF,GAAG,YAAY5I,QAAQ,CAAC,IAC3B6I,KAAK,CAACE,SAAS,KAAKJ,GAAG,IAAIE,KAAK,CAACG,aAAa,KAAKL,GAAI,EAAE;MAC1D,OAAO,KAAK;IACd;EACF;EAEA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;;AAEA,SAAS7C,sBAAsB,CAACmD,GAAG,EAAEP,IAAI,EAAE;EACzC,MAAMC,GAAG,GAAGM,GAAG,IAAI,IAAI,GACrB,IAAI,GACJ3I,GAAG,CAAC2I,GAAG,CAACpI,iBAAiB,CAAC,EAAE,oBAAoB,EAAE,IAAI,CAAC;EACzD,IAAIoI,GAAG,CAAClH,MAAM,KAAK,CAAC,IAChB2G,IAAI,CAAC3G,MAAM,GAAG,CAAC,EAAE;IACnB,IAAI0G,aAAa,CAACC,IAAI,EAAEC,GAAG,CAAC,EAAE;MAC5BM,GAAG,CAACtI,iBAAiB,CAAC,CAAC8C,SAAS,CAACwF,GAAG,CAACrI,eAAe,CAAC,EAAE,EAAE,EAAE;QACzD,CAACE,mBAAmB,GAAG4H,IAAI,CAAC,CAAC,CAAC,CAACI;MACjC,CAAC,CAAC;IACJ;EACF;AACF;AAEAI,MAAM,CAACC,OAAO,GAAG7H,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}