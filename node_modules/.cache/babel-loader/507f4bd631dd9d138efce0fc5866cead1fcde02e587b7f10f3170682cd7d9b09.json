{"ast":null,"code":"/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseError = require('../error/mongooseError');\nconst Readable = require('stream').Readable;\nconst promiseOrCallback = require('../helpers/promiseOrCallback');\nconst eachAsync = require('../helpers/cursor/eachAsync');\nconst immediate = require('../helpers/immediate');\nconst util = require('util');\nconst utils = require('../../lib/utils');\n\n/**\n * An AggregationCursor is a concurrency primitive for processing aggregation\n * results one document at a time. It is analogous to QueryCursor.\n *\n * An AggregationCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * Creating an AggregationCursor executes the model's pre aggregate hooks,\n * but **not** the model's post aggregate hooks.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Aggregate#cursor()`](/docs/api.html#aggregate_Aggregate-cursor) instead.\n *\n * @param {Aggregate} agg\n * @param {Object} options\n * @inherits Readable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction AggregationCursor(agg) {\n  const streamOpts = {\n    objectMode: true\n  };\n  // for node < 12 we will emit 'close' event after 'end'\n  if (utils.nodeMajorVersion >= 12) {\n    // set autoDestroy=true because on node 12 it's by default false\n    // gh-10902 need autoDestroy to destroy correctly and emit 'close' event for node >= 12\n    streamOpts.autoDestroy = true;\n  }\n  Readable.call(this, streamOpts);\n  this.cursor = null;\n  this.agg = agg;\n  this._transforms = [];\n  const model = agg._model;\n  delete agg.options.cursor.useMongooseAggCursor;\n  this._mongooseOptions = {};\n  _init(model, this, agg);\n}\nutil.inherits(AggregationCursor, Readable);\n\n/*!\n * ignore\n */\n\nfunction _init(model, c, agg) {\n  if (!model.collection.buffer) {\n    model.hooks.execPre('aggregate', agg, function () {\n      c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n      c.emit('cursor', c.cursor);\n    });\n  } else {\n    model.collection.emitter.once('queue', function () {\n      model.hooks.execPre('aggregate', agg, function () {\n        c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n        c.emit('cursor', c.cursor);\n      });\n    });\n  }\n}\n\n/*!\n * Necessary to satisfy the Readable API\n */\n\nAggregationCursor.prototype._read = function () {\n  const _this = this;\n  _next(this, function (error, doc) {\n    if (error) {\n      return _this.emit('error', error);\n    }\n    if (!doc) {\n      _this.push(null);\n      _this.cursor.close(function (error) {\n        if (error) {\n          return _this.emit('error', error);\n        }\n        // for node >= 12 the autoDestroy will emit the 'close' event\n        if (utils.nodeMajorVersion < 12) {\n          _this.on('end', () => _this.emit('close'));\n        }\n      });\n      return;\n    }\n    _this.push(doc);\n  });\n};\nif (Symbol.asyncIterator != null) {\n  const msg = 'Mongoose does not support using async iterators with an ' + 'existing aggregation cursor. See http://bit.ly/mongoose-async-iterate-aggregation';\n  AggregationCursor.prototype[Symbol.asyncIterator] = function () {\n    throw new MongooseError(msg);\n  };\n}\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * ####Example\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {AggregationCursor}\n * @api public\n * @method map\n */\n\nAggregationCursor.prototype.map = function (fn) {\n  this._transforms.push(fn);\n  return this;\n};\n\n/*!\n * Marks this cursor as errored\n */\n\nAggregationCursor.prototype._markError = function (error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see MongoDB driver cursor#close http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n */\n\nAggregationCursor.prototype.close = function (callback) {\n  return promiseOrCallback(callback, cb => {\n    this.cursor.close(error => {\n      if (error) {\n        cb(error);\n        return this.listeners('error').length > 0 && this.emit('error', error);\n      }\n      this.emit('close');\n      cb(null);\n    });\n  });\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method next\n */\n\nAggregationCursor.prototype.next = function (callback) {\n  return promiseOrCallback(callback, cb => {\n    _next(this, cb);\n  });\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Function} [callback] executed when all docs have been processed\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nAggregationCursor.prototype.eachAsync = function (fn, opts, callback) {\n  const _this = this;\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  return eachAsync(function (cb) {\n    return _next(_this, cb);\n  }, fn, opts, callback);\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * ####Example\n *\n *     // Async iterator without explicitly calling `cursor()`. Mongoose still\n *     // creates an AggregationCursor instance internally.\n *     const agg = Model.aggregate([{ $match: { age: { $gte: 25 } } }]);\n *     for await (const doc of agg) {\n *       console.log(doc.name);\n *     }\n *\n *     // You can also use an AggregationCursor instance for async iteration\n *     const cursor = Model.aggregate([{ $match: { age: { $gte: 25 } } }]).cursor();\n *     for await (const doc of cursor) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not set if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf AggregationCursor\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  AggregationCursor.prototype[Symbol.asyncIterator] = function () {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nAggregationCursor.prototype._transformForAsyncIterator = function () {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nAggregationCursor.prototype.transformNull = function (val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? {\n    done: true\n  } : {\n    value: doc,\n    done: false\n  };\n}\n\n/**\n * Adds a [cursor flag](http://mongodb.github.io/node-mongodb-native/2.2/api/Cursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nAggregationCursor.prototype.addCursorFlag = function (flag, value) {\n  const _this = this;\n  _waitForCursor(this, function () {\n    _this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function () {\n    cb();\n  });\n}\n\n/*!\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function (err, doc) {\n      if (err || doc === null && !ctx._mongooseOptions.transformNull) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function (doc, fn) {\n        return fn(doc);\n      }, doc));\n    };\n  }\n  if (ctx._error) {\n    return immediate(function () {\n      callback(ctx._error);\n    });\n  }\n  if (ctx.cursor) {\n    return ctx.cursor.next(function (error, doc) {\n      if (error) {\n        return callback(error);\n      }\n      if (!doc) {\n        return callback(null, null);\n      }\n      callback(null, doc);\n    });\n  } else {\n    ctx.once('cursor', function () {\n      _next(ctx, cb);\n    });\n  }\n}\nmodule.exports = AggregationCursor;","map":{"version":3,"names":["MongooseError","require","Readable","promiseOrCallback","eachAsync","immediate","util","utils","AggregationCursor","agg","streamOpts","objectMode","nodeMajorVersion","autoDestroy","call","cursor","_transforms","model","_model","options","useMongooseAggCursor","_mongooseOptions","_init","inherits","c","collection","buffer","hooks","execPre","aggregate","_pipeline","emit","emitter","once","prototype","_read","_this","_next","error","doc","push","close","on","Symbol","asyncIterator","msg","map","fn","_markError","_error","callback","cb","listeners","length","next","opts","transformNull","_transformForAsyncIterator","indexOf","val","arguments","done","value","addCursorFlag","flag","_waitForCursor","ctx","err","reduce","module","exports"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/cursor/AggregationCursor.js"],"sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseError = require('../error/mongooseError');\nconst Readable = require('stream').Readable;\nconst promiseOrCallback = require('../helpers/promiseOrCallback');\nconst eachAsync = require('../helpers/cursor/eachAsync');\nconst immediate = require('../helpers/immediate');\nconst util = require('util');\nconst utils = require('../../lib/utils');\n\n/**\n * An AggregationCursor is a concurrency primitive for processing aggregation\n * results one document at a time. It is analogous to QueryCursor.\n *\n * An AggregationCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * Creating an AggregationCursor executes the model's pre aggregate hooks,\n * but **not** the model's post aggregate hooks.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Aggregate#cursor()`](/docs/api.html#aggregate_Aggregate-cursor) instead.\n *\n * @param {Aggregate} agg\n * @param {Object} options\n * @inherits Readable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction AggregationCursor(agg) {\n  const streamOpts = { objectMode: true };\n  // for node < 12 we will emit 'close' event after 'end'\n  if (utils.nodeMajorVersion >= 12) {\n    // set autoDestroy=true because on node 12 it's by default false\n    // gh-10902 need autoDestroy to destroy correctly and emit 'close' event for node >= 12\n    streamOpts.autoDestroy = true;\n  }\n  Readable.call(this, streamOpts);\n\n  this.cursor = null;\n  this.agg = agg;\n  this._transforms = [];\n  const model = agg._model;\n  delete agg.options.cursor.useMongooseAggCursor;\n  this._mongooseOptions = {};\n\n  _init(model, this, agg);\n}\n\nutil.inherits(AggregationCursor, Readable);\n\n/*!\n * ignore\n */\n\nfunction _init(model, c, agg) {\n  if (!model.collection.buffer) {\n    model.hooks.execPre('aggregate', agg, function() {\n      c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n      c.emit('cursor', c.cursor);\n    });\n  } else {\n    model.collection.emitter.once('queue', function() {\n      model.hooks.execPre('aggregate', agg, function() {\n        c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n        c.emit('cursor', c.cursor);\n      });\n    });\n  }\n}\n\n/*!\n * Necessary to satisfy the Readable API\n */\n\nAggregationCursor.prototype._read = function() {\n  const _this = this;\n  _next(this, function(error, doc) {\n    if (error) {\n      return _this.emit('error', error);\n    }\n    if (!doc) {\n      _this.push(null);\n      _this.cursor.close(function(error) {\n        if (error) {\n          return _this.emit('error', error);\n        }\n        // for node >= 12 the autoDestroy will emit the 'close' event\n        if (utils.nodeMajorVersion < 12) {\n          _this.on('end', () => _this.emit('close'));\n        }\n      });\n      return;\n    }\n    _this.push(doc);\n  });\n};\n\nif (Symbol.asyncIterator != null) {\n  const msg = 'Mongoose does not support using async iterators with an ' +\n    'existing aggregation cursor. See http://bit.ly/mongoose-async-iterate-aggregation';\n\n  AggregationCursor.prototype[Symbol.asyncIterator] = function() {\n    throw new MongooseError(msg);\n  };\n}\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * ####Example\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {AggregationCursor}\n * @api public\n * @method map\n */\n\nAggregationCursor.prototype.map = function(fn) {\n  this._transforms.push(fn);\n  return this;\n};\n\n/*!\n * Marks this cursor as errored\n */\n\nAggregationCursor.prototype._markError = function(error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see MongoDB driver cursor#close http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n */\n\nAggregationCursor.prototype.close = function(callback) {\n  return promiseOrCallback(callback, cb => {\n    this.cursor.close(error => {\n      if (error) {\n        cb(error);\n        return this.listeners('error').length > 0 && this.emit('error', error);\n      }\n      this.emit('close');\n      cb(null);\n    });\n  });\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method next\n */\n\nAggregationCursor.prototype.next = function(callback) {\n  return promiseOrCallback(callback, cb => {\n    _next(this, cb);\n  });\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Function} [callback] executed when all docs have been processed\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nAggregationCursor.prototype.eachAsync = function(fn, opts, callback) {\n  const _this = this;\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  return eachAsync(function(cb) { return _next(_this, cb); }, fn, opts, callback);\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * ####Example\n *\n *     // Async iterator without explicitly calling `cursor()`. Mongoose still\n *     // creates an AggregationCursor instance internally.\n *     const agg = Model.aggregate([{ $match: { age: { $gte: 25 } } }]);\n *     for await (const doc of agg) {\n *       console.log(doc.name);\n *     }\n *\n *     // You can also use an AggregationCursor instance for async iteration\n *     const cursor = Model.aggregate([{ $match: { age: { $gte: 25 } } }]).cursor();\n *     for await (const doc of cursor) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not set if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf AggregationCursor\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  AggregationCursor.prototype[Symbol.asyncIterator] = function() {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nAggregationCursor.prototype._transformForAsyncIterator = function() {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nAggregationCursor.prototype.transformNull = function(val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? { done: true } : { value: doc, done: false };\n}\n\n/**\n * Adds a [cursor flag](http://mongodb.github.io/node-mongodb-native/2.2/api/Cursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nAggregationCursor.prototype.addCursorFlag = function(flag, value) {\n  const _this = this;\n  _waitForCursor(this, function() {\n    _this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function() {\n    cb();\n  });\n}\n\n/*!\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function(err, doc) {\n      if (err || (doc === null && !ctx._mongooseOptions.transformNull)) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function(doc, fn) {\n        return fn(doc);\n      }, doc));\n    };\n  }\n\n  if (ctx._error) {\n    return immediate(function() {\n      callback(ctx._error);\n    });\n  }\n\n  if (ctx.cursor) {\n    return ctx.cursor.next(function(error, doc) {\n      if (error) {\n        return callback(error);\n      }\n      if (!doc) {\n        return callback(null, null);\n      }\n\n      callback(null, doc);\n    });\n  } else {\n    ctx.once('cursor', function() {\n      _next(ctx, cb);\n    });\n  }\n}\n\nmodule.exports = AggregationCursor;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}