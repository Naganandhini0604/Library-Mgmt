{"ast":null,"code":"'use strict';\n\nconst applyTimestampsToChildren = require('../update/applyTimestampsToChildren');\nconst applyTimestampsToUpdate = require('../update/applyTimestampsToUpdate');\nconst get = require('../get');\nconst handleTimestampOption = require('../schema/handleTimestampOption');\nconst symbols = require('../../schema/symbols');\nmodule.exports = function setupTimestamps(schema, timestamps) {\n  const childHasTimestamp = schema.childSchemas.find(withTimestamp);\n  function withTimestamp(s) {\n    const ts = s.schema.options.timestamps;\n    return !!ts;\n  }\n  if (!timestamps && !childHasTimestamp) {\n    return;\n  }\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  const currentTime = timestamps != null && timestamps.hasOwnProperty('currentTime') ? timestamps.currentTime : null;\n  const schemaAdditions = {};\n  schema.$timestamps = {\n    createdAt: createdAt,\n    updatedAt: updatedAt\n  };\n  if (updatedAt && !schema.paths[updatedAt]) {\n    schemaAdditions[updatedAt] = Date;\n  }\n  if (createdAt && !schema.paths[createdAt]) {\n    schemaAdditions[createdAt] = Date;\n  }\n  schema.add(schemaAdditions);\n  schema.pre('save', function (next) {\n    const timestampOption = get(this, '$__.saveOptions.timestamps');\n    if (timestampOption === false) {\n      return next();\n    }\n    const skipUpdatedAt = timestampOption != null && timestampOption.updatedAt === false;\n    const skipCreatedAt = timestampOption != null && timestampOption.createdAt === false;\n    const defaultTimestamp = currentTime != null ? currentTime() : (this.ownerDocument ? this.ownerDocument() : this).constructor.base.now();\n    const auto_id = this._id && this._id.auto;\n    if (!skipCreatedAt && this.isNew && createdAt && !this.get(createdAt) && this.$__isSelected(createdAt)) {\n      this.$set(createdAt, auto_id ? this._id.getTimestamp() : defaultTimestamp);\n    }\n    if (!skipUpdatedAt && updatedAt && (this.isNew || this.isModified())) {\n      let ts = defaultTimestamp;\n      if (this.isNew) {\n        if (createdAt != null) {\n          ts = this.$__getValue(createdAt);\n        } else if (auto_id) {\n          ts = this._id.getTimestamp();\n        }\n      }\n      this.$set(updatedAt, ts);\n    }\n    next();\n  });\n  schema.methods.initializeTimestamps = function () {\n    const ts = currentTime != null ? currentTime() : this.constructor.base.now();\n    if (createdAt && !this.get(createdAt)) {\n      this.$set(createdAt, ts);\n    }\n    if (updatedAt && !this.get(updatedAt)) {\n      this.$set(updatedAt, ts);\n    }\n    return this;\n  };\n  _setTimestampsOnUpdate[symbols.builtInMiddleware] = true;\n  const opts = {\n    query: true,\n    model: false\n  };\n  schema.pre('findOneAndReplace', opts, _setTimestampsOnUpdate);\n  schema.pre('findOneAndUpdate', opts, _setTimestampsOnUpdate);\n  schema.pre('replaceOne', opts, _setTimestampsOnUpdate);\n  schema.pre('update', opts, _setTimestampsOnUpdate);\n  schema.pre('updateOne', opts, _setTimestampsOnUpdate);\n  schema.pre('updateMany', opts, _setTimestampsOnUpdate);\n  function _setTimestampsOnUpdate(next) {\n    const now = currentTime != null ? currentTime() : this.model.base.now();\n\n    // Replacing with null update should still trigger timestamps\n    if (this.op === 'findOneAndReplace' && this.getUpdate() == null) {\n      this.setUpdate({});\n    }\n    applyTimestampsToUpdate(now, createdAt, updatedAt, this.getUpdate(), this.options, this.schema);\n    applyTimestampsToChildren(now, this.getUpdate(), this.model.schema);\n    next();\n  }\n};","map":{"version":3,"names":["applyTimestampsToChildren","require","applyTimestampsToUpdate","get","handleTimestampOption","symbols","module","exports","setupTimestamps","schema","timestamps","childHasTimestamp","childSchemas","find","withTimestamp","s","ts","options","createdAt","updatedAt","currentTime","hasOwnProperty","schemaAdditions","$timestamps","paths","Date","add","pre","next","timestampOption","skipUpdatedAt","skipCreatedAt","defaultTimestamp","ownerDocument","constructor","base","now","auto_id","_id","auto","isNew","$__isSelected","$set","getTimestamp","isModified","$__getValue","methods","initializeTimestamps","_setTimestampsOnUpdate","builtInMiddleware","opts","query","model","op","getUpdate","setUpdate"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/helpers/timestamps/setupTimestamps.js"],"sourcesContent":["'use strict';\n\nconst applyTimestampsToChildren = require('../update/applyTimestampsToChildren');\nconst applyTimestampsToUpdate = require('../update/applyTimestampsToUpdate');\nconst get = require('../get');\nconst handleTimestampOption = require('../schema/handleTimestampOption');\nconst symbols = require('../../schema/symbols');\n\nmodule.exports = function setupTimestamps(schema, timestamps) {\n  const childHasTimestamp = schema.childSchemas.find(withTimestamp);\n\n  function withTimestamp(s) {\n    const ts = s.schema.options.timestamps;\n    return !!ts;\n  }\n\n  if (!timestamps && !childHasTimestamp) {\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  const currentTime = timestamps != null && timestamps.hasOwnProperty('currentTime') ?\n    timestamps.currentTime :\n    null;\n  const schemaAdditions = {};\n\n  schema.$timestamps = { createdAt: createdAt, updatedAt: updatedAt };\n\n  if (updatedAt && !schema.paths[updatedAt]) {\n    schemaAdditions[updatedAt] = Date;\n  }\n\n  if (createdAt && !schema.paths[createdAt]) {\n    schemaAdditions[createdAt] = Date;\n  }\n\n  schema.add(schemaAdditions);\n\n  schema.pre('save', function(next) {\n    const timestampOption = get(this, '$__.saveOptions.timestamps');\n    if (timestampOption === false) {\n      return next();\n    }\n\n    const skipUpdatedAt = timestampOption != null && timestampOption.updatedAt === false;\n    const skipCreatedAt = timestampOption != null && timestampOption.createdAt === false;\n\n    const defaultTimestamp = currentTime != null ?\n      currentTime() :\n      (this.ownerDocument ? this.ownerDocument() : this).constructor.base.now();\n    const auto_id = this._id && this._id.auto;\n\n    if (!skipCreatedAt && this.isNew && createdAt && !this.get(createdAt) && this.$__isSelected(createdAt)) {\n      this.$set(createdAt, auto_id ? this._id.getTimestamp() : defaultTimestamp);\n    }\n\n    if (!skipUpdatedAt && updatedAt && (this.isNew || this.isModified())) {\n      let ts = defaultTimestamp;\n      if (this.isNew) {\n        if (createdAt != null) {\n          ts = this.$__getValue(createdAt);\n        } else if (auto_id) {\n          ts = this._id.getTimestamp();\n        }\n      }\n      this.$set(updatedAt, ts);\n    }\n\n    next();\n  });\n\n  schema.methods.initializeTimestamps = function() {\n    const ts = currentTime != null ?\n      currentTime() :\n      this.constructor.base.now();\n    if (createdAt && !this.get(createdAt)) {\n      this.$set(createdAt, ts);\n    }\n    if (updatedAt && !this.get(updatedAt)) {\n      this.$set(updatedAt, ts);\n    }\n    return this;\n  };\n\n  _setTimestampsOnUpdate[symbols.builtInMiddleware] = true;\n\n  const opts = { query: true, model: false };\n  schema.pre('findOneAndReplace', opts, _setTimestampsOnUpdate);\n  schema.pre('findOneAndUpdate', opts, _setTimestampsOnUpdate);\n  schema.pre('replaceOne', opts, _setTimestampsOnUpdate);\n  schema.pre('update', opts, _setTimestampsOnUpdate);\n  schema.pre('updateOne', opts, _setTimestampsOnUpdate);\n  schema.pre('updateMany', opts, _setTimestampsOnUpdate);\n\n  function _setTimestampsOnUpdate(next) {\n    const now = currentTime != null ?\n      currentTime() :\n      this.model.base.now();\n\n    // Replacing with null update should still trigger timestamps\n    if (this.op === 'findOneAndReplace' && this.getUpdate() == null) {\n      this.setUpdate({});\n    }\n\n    applyTimestampsToUpdate(now, createdAt, updatedAt, this.getUpdate(),\n      this.options, this.schema);\n    applyTimestampsToChildren(now, this.getUpdate(), this.model.schema);\n    next();\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}