{"ast":null,"code":"'use strict';\n\nconst Mixed = require('../../schema/mixed');\nconst defineKey = require('../document/compile').defineKey;\nconst get = require('../get');\nconst utils = require('../../utils');\nconst CUSTOMIZABLE_DISCRIMINATOR_OPTIONS = {\n  toJSON: true,\n  toObject: true,\n  _id: true,\n  id: true\n};\n\n/*!\n * ignore\n */\n\nmodule.exports = function discriminator(model, name, schema, tiedValue, applyPlugins) {\n  if (!(schema && schema.instanceOfSchema)) {\n    throw new Error('You must pass a valid discriminator Schema');\n  }\n  if (model.schema.discriminatorMapping && !model.schema.discriminatorMapping.isRoot) {\n    throw new Error('Discriminator \"' + name + '\" can only be a discriminator of the root model');\n  }\n  if (applyPlugins) {\n    const applyPluginsToDiscriminators = get(model.base, 'options.applyPluginsToDiscriminators', false);\n    // Even if `applyPluginsToDiscriminators` isn't set, we should still apply\n    // global plugins to schemas embedded in the discriminator schema (gh-7370)\n    model.base._applyPlugins(schema, {\n      skipTopLevel: !applyPluginsToDiscriminators\n    });\n  }\n  const key = model.schema.options.discriminatorKey;\n  const existingPath = model.schema.path(key);\n  if (existingPath != null) {\n    if (!utils.hasUserDefinedProperty(existingPath.options, 'select')) {\n      existingPath.options.select = true;\n    }\n    existingPath.options.$skipDiscriminatorCheck = true;\n  } else {\n    const baseSchemaAddition = {};\n    baseSchemaAddition[key] = {\n      default: void 0,\n      select: true,\n      $skipDiscriminatorCheck: true\n    };\n    baseSchemaAddition[key][model.schema.options.typeKey] = String;\n    model.schema.add(baseSchemaAddition);\n    defineKey(key, null, model.prototype, null, [key], model.schema.options);\n  }\n  if (schema.path(key) && schema.path(key).options.$skipDiscriminatorCheck !== true) {\n    throw new Error('Discriminator \"' + name + '\" cannot have field with name \"' + key + '\"');\n  }\n  let value = name;\n  if (typeof tiedValue === 'string' && tiedValue.length || tiedValue != null) {\n    value = tiedValue;\n  }\n  function merge(schema, baseSchema) {\n    // Retain original schema before merging base schema\n    schema._baseSchema = baseSchema;\n    if (baseSchema.paths._id && baseSchema.paths._id.options && !baseSchema.paths._id.options.auto) {\n      schema.remove('_id');\n    }\n\n    // Find conflicting paths: if something is a path in the base schema\n    // and a nested path in the child schema, overwrite the base schema path.\n    // See gh-6076\n    const baseSchemaPaths = Object.keys(baseSchema.paths);\n    const conflictingPaths = [];\n    for (const path of baseSchemaPaths) {\n      if (schema.nested[path]) {\n        conflictingPaths.push(path);\n        continue;\n      }\n      if (path.indexOf('.') === -1) {\n        continue;\n      }\n      const sp = path.split('.').slice(0, -1);\n      let cur = '';\n      for (const piece of sp) {\n        cur += (cur.length ? '.' : '') + piece;\n        if (schema.paths[cur] instanceof Mixed || schema.singleNestedPaths[cur] instanceof Mixed) {\n          conflictingPaths.push(path);\n        }\n      }\n    }\n    utils.merge(schema, baseSchema, {\n      isDiscriminatorSchemaMerge: true,\n      omit: {\n        discriminators: true,\n        base: true\n      },\n      omitNested: conflictingPaths.reduce((cur, path) => {\n        cur['tree.' + path] = true;\n        return cur;\n      }, {})\n    });\n\n    // Clean up conflicting paths _after_ merging re: gh-6076\n    for (const conflictingPath of conflictingPaths) {\n      delete schema.paths[conflictingPath];\n    }\n\n    // Rebuild schema models because schemas may have been merged re: #7884\n    schema.childSchemas.forEach(obj => {\n      obj.model.prototype.$__setSchema(obj.schema);\n    });\n    const obj = {};\n    obj[key] = {\n      default: value,\n      select: true,\n      set: function (newName) {\n        if (newName === value || Array.isArray(value) && utils.deepEqual(newName, value)) {\n          return value;\n        }\n        throw new Error('Can\\'t set discriminator key \"' + key + '\"');\n      },\n      $skipDiscriminatorCheck: true\n    };\n    obj[key][schema.options.typeKey] = existingPath ? existingPath.options[schema.options.typeKey] : String;\n    schema.add(obj);\n    schema.discriminatorMapping = {\n      key: key,\n      value: value,\n      isRoot: false\n    };\n    if (baseSchema.options.collection) {\n      schema.options.collection = baseSchema.options.collection;\n    }\n    const toJSON = schema.options.toJSON;\n    const toObject = schema.options.toObject;\n    const _id = schema.options._id;\n    const id = schema.options.id;\n    const keys = Object.keys(schema.options);\n    schema.options.discriminatorKey = baseSchema.options.discriminatorKey;\n    for (const _key of keys) {\n      if (!CUSTOMIZABLE_DISCRIMINATOR_OPTIONS[_key]) {\n        // Special case: compiling a model sets `pluralization = true` by default. Avoid throwing an error\n        // for that case. See gh-9238\n        if (_key === 'pluralization' && schema.options[_key] == true && baseSchema.options[_key] == null) {\n          continue;\n        }\n        if (!utils.deepEqual(schema.options[_key], baseSchema.options[_key])) {\n          throw new Error('Can\\'t customize discriminator option ' + _key + ' (can only modify ' + Object.keys(CUSTOMIZABLE_DISCRIMINATOR_OPTIONS).join(', ') + ')');\n        }\n      }\n    }\n    schema.options = utils.clone(baseSchema.options);\n    if (toJSON) schema.options.toJSON = toJSON;\n    if (toObject) schema.options.toObject = toObject;\n    if (typeof _id !== 'undefined') {\n      schema.options._id = _id;\n    }\n    schema.options.id = id;\n    schema.s.hooks = model.schema.s.hooks.merge(schema.s.hooks);\n    schema.plugins = Array.prototype.slice.call(baseSchema.plugins);\n    schema.callQueue = baseSchema.callQueue.concat(schema.callQueue);\n    delete schema._requiredpaths; // reset just in case Schema#requiredPaths() was called on either schema\n  }\n\n  // merges base schema into new discriminator schema and sets new type field.\n  merge(schema, model.schema);\n  if (!model.discriminators) {\n    model.discriminators = {};\n  }\n  if (!model.schema.discriminatorMapping) {\n    model.schema.discriminatorMapping = {\n      key: key,\n      value: null,\n      isRoot: true\n    };\n  }\n  if (!model.schema.discriminators) {\n    model.schema.discriminators = {};\n  }\n  model.schema.discriminators[name] = schema;\n  if (model.discriminators[name]) {\n    throw new Error('Discriminator with name \"' + name + '\" already exists');\n  }\n  return schema;\n};","map":{"version":3,"names":["Mixed","require","defineKey","get","utils","CUSTOMIZABLE_DISCRIMINATOR_OPTIONS","toJSON","toObject","_id","id","module","exports","discriminator","model","name","schema","tiedValue","applyPlugins","instanceOfSchema","Error","discriminatorMapping","isRoot","applyPluginsToDiscriminators","base","_applyPlugins","skipTopLevel","key","options","discriminatorKey","existingPath","path","hasUserDefinedProperty","select","$skipDiscriminatorCheck","baseSchemaAddition","default","typeKey","String","add","prototype","value","length","merge","baseSchema","_baseSchema","paths","auto","remove","baseSchemaPaths","Object","keys","conflictingPaths","nested","push","indexOf","sp","split","slice","cur","piece","singleNestedPaths","isDiscriminatorSchemaMerge","omit","discriminators","omitNested","reduce","conflictingPath","childSchemas","forEach","obj","$__setSchema","set","newName","Array","isArray","deepEqual","collection","_key","join","clone","s","hooks","plugins","call","callQueue","concat","_requiredpaths"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/helpers/model/discriminator.js"],"sourcesContent":["'use strict';\n\nconst Mixed = require('../../schema/mixed');\nconst defineKey = require('../document/compile').defineKey;\nconst get = require('../get');\nconst utils = require('../../utils');\n\nconst CUSTOMIZABLE_DISCRIMINATOR_OPTIONS = {\n  toJSON: true,\n  toObject: true,\n  _id: true,\n  id: true\n};\n\n/*!\n * ignore\n */\n\nmodule.exports = function discriminator(model, name, schema, tiedValue, applyPlugins) {\n  if (!(schema && schema.instanceOfSchema)) {\n    throw new Error('You must pass a valid discriminator Schema');\n  }\n\n  if (model.schema.discriminatorMapping &&\n      !model.schema.discriminatorMapping.isRoot) {\n    throw new Error('Discriminator \"' + name +\n        '\" can only be a discriminator of the root model');\n  }\n\n  if (applyPlugins) {\n    const applyPluginsToDiscriminators = get(model.base,\n      'options.applyPluginsToDiscriminators', false);\n    // Even if `applyPluginsToDiscriminators` isn't set, we should still apply\n    // global plugins to schemas embedded in the discriminator schema (gh-7370)\n    model.base._applyPlugins(schema, {\n      skipTopLevel: !applyPluginsToDiscriminators\n    });\n  }\n\n  const key = model.schema.options.discriminatorKey;\n\n  const existingPath = model.schema.path(key);\n  if (existingPath != null) {\n    if (!utils.hasUserDefinedProperty(existingPath.options, 'select')) {\n      existingPath.options.select = true;\n    }\n    existingPath.options.$skipDiscriminatorCheck = true;\n  } else {\n    const baseSchemaAddition = {};\n    baseSchemaAddition[key] = {\n      default: void 0,\n      select: true,\n      $skipDiscriminatorCheck: true\n    };\n    baseSchemaAddition[key][model.schema.options.typeKey] = String;\n    model.schema.add(baseSchemaAddition);\n    defineKey(key, null, model.prototype, null, [key], model.schema.options);\n  }\n\n  if (schema.path(key) && schema.path(key).options.$skipDiscriminatorCheck !== true) {\n    throw new Error('Discriminator \"' + name +\n        '\" cannot have field with name \"' + key + '\"');\n  }\n\n  let value = name;\n  if ((typeof tiedValue === 'string' && tiedValue.length) || tiedValue != null) {\n    value = tiedValue;\n  }\n\n  function merge(schema, baseSchema) {\n    // Retain original schema before merging base schema\n    schema._baseSchema = baseSchema;\n    if (baseSchema.paths._id &&\n        baseSchema.paths._id.options &&\n        !baseSchema.paths._id.options.auto) {\n      schema.remove('_id');\n    }\n\n    // Find conflicting paths: if something is a path in the base schema\n    // and a nested path in the child schema, overwrite the base schema path.\n    // See gh-6076\n    const baseSchemaPaths = Object.keys(baseSchema.paths);\n    const conflictingPaths = [];\n\n    for (const path of baseSchemaPaths) {\n      if (schema.nested[path]) {\n        conflictingPaths.push(path);\n        continue;\n      }\n\n      if (path.indexOf('.') === -1) {\n        continue;\n      }\n      const sp = path.split('.').slice(0, -1);\n      let cur = '';\n      for (const piece of sp) {\n        cur += (cur.length ? '.' : '') + piece;\n        if (schema.paths[cur] instanceof Mixed ||\n            schema.singleNestedPaths[cur] instanceof Mixed) {\n          conflictingPaths.push(path);\n        }\n      }\n    }\n\n    utils.merge(schema, baseSchema, {\n      isDiscriminatorSchemaMerge: true,\n      omit: { discriminators: true, base: true },\n      omitNested: conflictingPaths.reduce((cur, path) => {\n        cur['tree.' + path] = true;\n        return cur;\n      }, {})\n    });\n\n    // Clean up conflicting paths _after_ merging re: gh-6076\n    for (const conflictingPath of conflictingPaths) {\n      delete schema.paths[conflictingPath];\n    }\n\n    // Rebuild schema models because schemas may have been merged re: #7884\n    schema.childSchemas.forEach(obj => {\n      obj.model.prototype.$__setSchema(obj.schema);\n    });\n\n    const obj = {};\n    obj[key] = {\n      default: value,\n      select: true,\n      set: function(newName) {\n        if (newName === value || (Array.isArray(value) && utils.deepEqual(newName, value))) {\n          return value;\n        }\n        throw new Error('Can\\'t set discriminator key \"' + key + '\"');\n      },\n      $skipDiscriminatorCheck: true\n    };\n    obj[key][schema.options.typeKey] = existingPath ? existingPath.options[schema.options.typeKey] : String;\n    schema.add(obj);\n\n\n    schema.discriminatorMapping = { key: key, value: value, isRoot: false };\n\n    if (baseSchema.options.collection) {\n      schema.options.collection = baseSchema.options.collection;\n    }\n\n    const toJSON = schema.options.toJSON;\n    const toObject = schema.options.toObject;\n    const _id = schema.options._id;\n    const id = schema.options.id;\n\n    const keys = Object.keys(schema.options);\n    schema.options.discriminatorKey = baseSchema.options.discriminatorKey;\n\n    for (const _key of keys) {\n      if (!CUSTOMIZABLE_DISCRIMINATOR_OPTIONS[_key]) {\n        // Special case: compiling a model sets `pluralization = true` by default. Avoid throwing an error\n        // for that case. See gh-9238\n        if (_key === 'pluralization' && schema.options[_key] == true && baseSchema.options[_key] == null) {\n          continue;\n        }\n\n        if (!utils.deepEqual(schema.options[_key], baseSchema.options[_key])) {\n          throw new Error('Can\\'t customize discriminator option ' + _key +\n            ' (can only modify ' +\n            Object.keys(CUSTOMIZABLE_DISCRIMINATOR_OPTIONS).join(', ') +\n            ')');\n        }\n      }\n    }\n    schema.options = utils.clone(baseSchema.options);\n    if (toJSON) schema.options.toJSON = toJSON;\n    if (toObject) schema.options.toObject = toObject;\n    if (typeof _id !== 'undefined') {\n      schema.options._id = _id;\n    }\n    schema.options.id = id;\n    schema.s.hooks = model.schema.s.hooks.merge(schema.s.hooks);\n\n    schema.plugins = Array.prototype.slice.call(baseSchema.plugins);\n    schema.callQueue = baseSchema.callQueue.concat(schema.callQueue);\n    delete schema._requiredpaths; // reset just in case Schema#requiredPaths() was called on either schema\n  }\n\n  // merges base schema into new discriminator schema and sets new type field.\n  merge(schema, model.schema);\n\n  if (!model.discriminators) {\n    model.discriminators = {};\n  }\n\n  if (!model.schema.discriminatorMapping) {\n    model.schema.discriminatorMapping = { key: key, value: null, isRoot: true };\n  }\n  if (!model.schema.discriminators) {\n    model.schema.discriminators = {};\n  }\n\n  model.schema.discriminators[name] = schema;\n\n  if (model.discriminators[name]) {\n    throw new Error('Discriminator with name \"' + name + '\" already exists');\n  }\n\n  return schema;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}