{"ast":null,"code":"/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst Readable = require('stream').Readable;\nconst promiseOrCallback = require('../helpers/promiseOrCallback');\nconst eachAsync = require('../helpers/cursor/eachAsync');\nconst helpers = require('../queryhelpers');\nconst immediate = require('../helpers/immediate');\nconst util = require('util');\nconst utils = require('../../lib/utils');\n\n/**\n * A QueryCursor is a concurrency primitive for processing query results\n * one document at a time. A QueryCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * QueryCursors execute the model's pre `find` hooks before loading any documents\n * from MongoDB, and the model's post `find` hooks after loading each document.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Query#cursor()`](/docs/api.html#query_Query-cursor) instead.\n *\n * @param {Query} query\n * @param {Object} options query options passed to `.find()`\n * @inherits Readable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction QueryCursor(query, options) {\n  const streamOpts = {\n    objectMode: true\n  };\n  // for node < 12 we will emit 'close' event after 'end'\n  if (utils.nodeMajorVersion >= 12) {\n    // set autoDestroy=true because on node 12 it's by default false\n    // gh-10902 need autoDestroy to destroy correctly and emit 'close' event for node >= 12\n    streamOpts.autoDestroy = true;\n  }\n  Readable.call(this, streamOpts);\n  this.cursor = null;\n  this.query = query;\n  const _this = this;\n  const model = query.model;\n  this._mongooseOptions = {};\n  this._transforms = [];\n  this.model = model;\n  this.options = options || {};\n  model.hooks.execPre('find', query, () => {\n    this._transforms = this._transforms.concat(query._transforms.slice());\n    if (this.options.transform) {\n      this._transforms.push(options.transform);\n    }\n    // Re: gh-8039, you need to set the `cursor.batchSize` option, top-level\n    // `batchSize` option doesn't work.\n    if (this.options.batchSize) {\n      this.options.cursor = options.cursor || {};\n      this.options.cursor.batchSize = options.batchSize;\n\n      // Max out the number of documents we'll populate in parallel at 5000.\n      this.options._populateBatchSize = Math.min(this.options.batchSize, 5000);\n    }\n    model.collection.find(query._conditions, this.options, function (err, cursor) {\n      if (_this._error) {\n        if (cursor != null) {\n          cursor.close(function () {});\n        }\n        _this.emit('cursor', null);\n        _this.listeners('error').length > 0 && _this.emit('error', _this._error);\n        return;\n      }\n      if (err) {\n        return _this.emit('error', err);\n      }\n      _this.cursor = cursor;\n      _this.emit('cursor', cursor);\n    });\n  });\n}\nutil.inherits(QueryCursor, Readable);\n\n/*!\n * Necessary to satisfy the Readable API\n */\n\nQueryCursor.prototype._read = function () {\n  const _this = this;\n  _next(this, function (error, doc) {\n    if (error) {\n      return _this.emit('error', error);\n    }\n    if (!doc) {\n      _this.push(null);\n      _this.cursor.close(function (error) {\n        if (error) {\n          return _this.emit('error', error);\n        }\n        // for node >= 12 the autoDestroy will emit the 'close' event\n        if (utils.nodeMajorVersion < 12) {\n          _this.on('end', () => _this.emit('close'));\n        }\n      });\n      return;\n    }\n    _this.push(doc);\n  });\n};\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * ####Example\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {QueryCursor}\n * @api public\n * @method map\n */\n\nQueryCursor.prototype.map = function (fn) {\n  this._transforms.push(fn);\n  return this;\n};\n\n/*!\n * Marks this cursor as errored\n */\n\nQueryCursor.prototype._markError = function (error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see MongoDB driver cursor#close http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n */\n\nQueryCursor.prototype.close = function (callback) {\n  return promiseOrCallback(callback, cb => {\n    this.cursor.close(error => {\n      if (error) {\n        cb(error);\n        return this.listeners('error').length > 0 && this.emit('error', error);\n      }\n      this.emit('close');\n      cb(null);\n    });\n  }, this.model.events);\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method next\n */\n\nQueryCursor.prototype.next = function (callback) {\n  return promiseOrCallback(callback, cb => {\n    _next(this, function (error, doc) {\n      if (error) {\n        return cb(error);\n      }\n      cb(null, doc);\n    });\n  }, this.model.events);\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * ####Example\n *\n *     // Iterate over documents asynchronously\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       eachAsync(async function (doc, i) {\n *         doc.foo = doc.bar + i;\n *         await doc.save();\n *       })\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Function} [callback] executed when all docs have been processed\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nQueryCursor.prototype.eachAsync = function (fn, opts, callback) {\n  const _this = this;\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  return eachAsync(function (cb) {\n    return _next(_this, cb);\n  }, fn, opts, callback);\n};\n\n/**\n * The `options` passed in to the `QueryCursor` constructor.\n *\n * @api public\n * @property options\n */\n\nQueryCursor.prototype.options;\n\n/**\n * Adds a [cursor flag](http://mongodb.github.io/node-mongodb-native/2.2/api/Cursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nQueryCursor.prototype.addCursorFlag = function (flag, value) {\n  const _this = this;\n  _waitForCursor(this, function () {\n    _this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype.transformNull = function (val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype._transformForAsyncIterator = function () {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js).\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * ####Example\n *\n *     // Works without using `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n *     // Can also use `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }]).cursor()) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf Query\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  QueryCursor.prototype[Symbol.asyncIterator] = function () {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? {\n    done: true\n  } : {\n    value: doc,\n    done: false\n  };\n}\n\n/*!\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function (err, doc) {\n      if (err || doc === null && !ctx._mongooseOptions.transformNull) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function (doc, fn) {\n        return fn.call(ctx, doc);\n      }, doc));\n    };\n  }\n  if (ctx._error) {\n    return immediate(function () {\n      callback(ctx._error);\n    });\n  }\n  if (ctx.cursor) {\n    if (ctx.query._mongooseOptions.populate && !ctx._pop) {\n      ctx._pop = helpers.preparePopulationOptionsMQ(ctx.query, ctx.query._mongooseOptions);\n      ctx._pop.__noPromise = true;\n    }\n    if (ctx.query._mongooseOptions.populate && ctx.options._populateBatchSize > 1) {\n      if (ctx._batchDocs && ctx._batchDocs.length) {\n        // Return a cached populated doc\n        return _nextDoc(ctx, ctx._batchDocs.shift(), ctx._pop, callback);\n      } else if (ctx._batchExhausted) {\n        // Internal cursor reported no more docs. Act the same here\n        return callback(null, null);\n      } else {\n        // Request as many docs as batchSize, to populate them also in batch\n        ctx._batchDocs = [];\n        return ctx.cursor.next(_onNext.bind({\n          ctx,\n          callback\n        }));\n      }\n    } else {\n      return ctx.cursor.next(function (error, doc) {\n        if (error) {\n          return callback(error);\n        }\n        if (!doc) {\n          return callback(null, null);\n        }\n        if (!ctx.query._mongooseOptions.populate) {\n          return _nextDoc(ctx, doc, null, callback);\n        }\n        ctx.query.model.populate(doc, ctx._pop, function (err, doc) {\n          if (err) {\n            return callback(err);\n          }\n          return _nextDoc(ctx, doc, ctx._pop, callback);\n        });\n      });\n    }\n  } else {\n    ctx.once('cursor', function (cursor) {\n      if (cursor == null) {\n        return;\n      }\n      _next(ctx, cb);\n    });\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _onNext(error, doc) {\n  if (error) {\n    return this.callback(error);\n  }\n  if (!doc) {\n    this.ctx._batchExhausted = true;\n    return _populateBatch.call(this);\n  }\n  this.ctx._batchDocs.push(doc);\n  if (this.ctx._batchDocs.length < this.ctx.options._populateBatchSize) {\n    // If both `batchSize` and `_populateBatchSize` are huge, calling `next()` repeatedly may\n    // cause a stack overflow. So make sure we clear the stack regularly.\n    if (this.ctx._batchDocs.length > 0 && this.ctx._batchDocs.length % 1000 === 0) {\n      return immediate(() => this.ctx.cursor.next(_onNext.bind(this)));\n    }\n    this.ctx.cursor.next(_onNext.bind(this));\n  } else {\n    _populateBatch.call(this);\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _populateBatch() {\n  if (!this.ctx._batchDocs.length) {\n    return this.callback(null, null);\n  }\n  const _this = this;\n  this.ctx.query.model.populate(this.ctx._batchDocs, this.ctx._pop, function (err) {\n    if (err) {\n      return _this.callback(err);\n    }\n    _nextDoc(_this.ctx, _this.ctx._batchDocs.shift(), _this.ctx._pop, _this.callback);\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _nextDoc(ctx, doc, pop, callback) {\n  if (ctx.query._mongooseOptions.lean) {\n    return ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  }\n  _create(ctx, doc, pop, (err, doc) => {\n    if (err != null) {\n      return callback(err);\n    }\n    ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function (cursor) {\n    if (cursor == null) {\n      return;\n    }\n    cb();\n  });\n}\n\n/*!\n * Convert a raw doc into a full mongoose doc.\n */\n\nfunction _create(ctx, doc, populatedIds, cb) {\n  const instance = helpers.createModel(ctx.query.model, doc, ctx.query._fields);\n  const opts = populatedIds ? {\n    populated: populatedIds\n  } : undefined;\n  instance.init(doc, opts, function (err) {\n    if (err) {\n      return cb(err);\n    }\n    cb(null, instance);\n  });\n}\nmodule.exports = QueryCursor;","map":{"version":3,"names":["Readable","require","promiseOrCallback","eachAsync","helpers","immediate","util","utils","QueryCursor","query","options","streamOpts","objectMode","nodeMajorVersion","autoDestroy","call","cursor","_this","model","_mongooseOptions","_transforms","hooks","execPre","concat","slice","transform","push","batchSize","_populateBatchSize","Math","min","collection","find","_conditions","err","_error","close","emit","listeners","length","inherits","prototype","_read","_next","error","doc","on","map","fn","_markError","callback","cb","events","next","opts","addCursorFlag","flag","value","_waitForCursor","transformNull","val","arguments","_transformForAsyncIterator","indexOf","Symbol","asyncIterator","done","ctx","reduce","populate","_pop","preparePopulationOptionsMQ","__noPromise","_batchDocs","_nextDoc","shift","_batchExhausted","_onNext","bind","once","_populateBatch","pop","lean","execPost","_create","populatedIds","instance","createModel","_fields","populated","undefined","init","module","exports"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/cursor/QueryCursor.js"],"sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst Readable = require('stream').Readable;\nconst promiseOrCallback = require('../helpers/promiseOrCallback');\nconst eachAsync = require('../helpers/cursor/eachAsync');\nconst helpers = require('../queryhelpers');\nconst immediate = require('../helpers/immediate');\nconst util = require('util');\nconst utils = require('../../lib/utils');\n\n/**\n * A QueryCursor is a concurrency primitive for processing query results\n * one document at a time. A QueryCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * QueryCursors execute the model's pre `find` hooks before loading any documents\n * from MongoDB, and the model's post `find` hooks after loading each document.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Query#cursor()`](/docs/api.html#query_Query-cursor) instead.\n *\n * @param {Query} query\n * @param {Object} options query options passed to `.find()`\n * @inherits Readable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction QueryCursor(query, options) {\n  const streamOpts = { objectMode: true };\n  // for node < 12 we will emit 'close' event after 'end'\n  if (utils.nodeMajorVersion >= 12) {\n    // set autoDestroy=true because on node 12 it's by default false\n    // gh-10902 need autoDestroy to destroy correctly and emit 'close' event for node >= 12\n    streamOpts.autoDestroy = true;\n  }\n  Readable.call(this, streamOpts);\n\n  this.cursor = null;\n  this.query = query;\n  const _this = this;\n  const model = query.model;\n  this._mongooseOptions = {};\n  this._transforms = [];\n  this.model = model;\n  this.options = options || {};\n\n  model.hooks.execPre('find', query, () => {\n    this._transforms = this._transforms.concat(query._transforms.slice());\n    if (this.options.transform) {\n      this._transforms.push(options.transform);\n    }\n    // Re: gh-8039, you need to set the `cursor.batchSize` option, top-level\n    // `batchSize` option doesn't work.\n    if (this.options.batchSize) {\n      this.options.cursor = options.cursor || {};\n      this.options.cursor.batchSize = options.batchSize;\n\n      // Max out the number of documents we'll populate in parallel at 5000.\n      this.options._populateBatchSize = Math.min(this.options.batchSize, 5000);\n    }\n    model.collection.find(query._conditions, this.options, function(err, cursor) {\n      if (_this._error) {\n        if (cursor != null) {\n          cursor.close(function() {});\n        }\n        _this.emit('cursor', null);\n        _this.listeners('error').length > 0 && _this.emit('error', _this._error);\n        return;\n      }\n      if (err) {\n        return _this.emit('error', err);\n      }\n      _this.cursor = cursor;\n      _this.emit('cursor', cursor);\n    });\n  });\n}\n\nutil.inherits(QueryCursor, Readable);\n\n/*!\n * Necessary to satisfy the Readable API\n */\n\nQueryCursor.prototype._read = function() {\n  const _this = this;\n  _next(this, function(error, doc) {\n    if (error) {\n      return _this.emit('error', error);\n    }\n    if (!doc) {\n      _this.push(null);\n      _this.cursor.close(function(error) {\n        if (error) {\n          return _this.emit('error', error);\n        }\n        // for node >= 12 the autoDestroy will emit the 'close' event\n        if (utils.nodeMajorVersion < 12) {\n          _this.on('end', () => _this.emit('close'));\n        }\n      });\n      return;\n    }\n    _this.push(doc);\n  });\n};\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * ####Example\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {QueryCursor}\n * @api public\n * @method map\n */\n\nQueryCursor.prototype.map = function(fn) {\n  this._transforms.push(fn);\n  return this;\n};\n\n/*!\n * Marks this cursor as errored\n */\n\nQueryCursor.prototype._markError = function(error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see MongoDB driver cursor#close http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n */\n\nQueryCursor.prototype.close = function(callback) {\n  return promiseOrCallback(callback, cb => {\n    this.cursor.close(error => {\n      if (error) {\n        cb(error);\n        return this.listeners('error').length > 0 && this.emit('error', error);\n      }\n      this.emit('close');\n      cb(null);\n    });\n  }, this.model.events);\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method next\n */\n\nQueryCursor.prototype.next = function(callback) {\n  return promiseOrCallback(callback, cb => {\n    _next(this, function(error, doc) {\n      if (error) {\n        return cb(error);\n      }\n      cb(null, doc);\n    });\n  }, this.model.events);\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * ####Example\n *\n *     // Iterate over documents asynchronously\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       eachAsync(async function (doc, i) {\n *         doc.foo = doc.bar + i;\n *         await doc.save();\n *       })\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Function} [callback] executed when all docs have been processed\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nQueryCursor.prototype.eachAsync = function(fn, opts, callback) {\n  const _this = this;\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  return eachAsync(function(cb) { return _next(_this, cb); }, fn, opts, callback);\n};\n\n/**\n * The `options` passed in to the `QueryCursor` constructor.\n *\n * @api public\n * @property options\n */\n\nQueryCursor.prototype.options;\n\n/**\n * Adds a [cursor flag](http://mongodb.github.io/node-mongodb-native/2.2/api/Cursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nQueryCursor.prototype.addCursorFlag = function(flag, value) {\n  const _this = this;\n  _waitForCursor(this, function() {\n    _this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype.transformNull = function(val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype._transformForAsyncIterator = function() {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js).\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * ####Example\n *\n *     // Works without using `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n *     // Can also use `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }]).cursor()) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf Query\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  QueryCursor.prototype[Symbol.asyncIterator] = function() {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? { done: true } : { value: doc, done: false };\n}\n\n/*!\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function(err, doc) {\n      if (err || (doc === null && !ctx._mongooseOptions.transformNull)) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function(doc, fn) {\n        return fn.call(ctx, doc);\n      }, doc));\n    };\n  }\n\n  if (ctx._error) {\n    return immediate(function() {\n      callback(ctx._error);\n    });\n  }\n\n  if (ctx.cursor) {\n    if (ctx.query._mongooseOptions.populate && !ctx._pop) {\n      ctx._pop = helpers.preparePopulationOptionsMQ(ctx.query,\n        ctx.query._mongooseOptions);\n      ctx._pop.__noPromise = true;\n    }\n    if (ctx.query._mongooseOptions.populate && ctx.options._populateBatchSize > 1) {\n      if (ctx._batchDocs && ctx._batchDocs.length) {\n        // Return a cached populated doc\n        return _nextDoc(ctx, ctx._batchDocs.shift(), ctx._pop, callback);\n      } else if (ctx._batchExhausted) {\n        // Internal cursor reported no more docs. Act the same here\n        return callback(null, null);\n      } else {\n        // Request as many docs as batchSize, to populate them also in batch\n        ctx._batchDocs = [];\n        return ctx.cursor.next(_onNext.bind({ ctx, callback }));\n      }\n    } else {\n      return ctx.cursor.next(function(error, doc) {\n        if (error) {\n          return callback(error);\n        }\n        if (!doc) {\n          return callback(null, null);\n        }\n\n        if (!ctx.query._mongooseOptions.populate) {\n          return _nextDoc(ctx, doc, null, callback);\n        }\n\n        ctx.query.model.populate(doc, ctx._pop, function(err, doc) {\n          if (err) {\n            return callback(err);\n          }\n          return _nextDoc(ctx, doc, ctx._pop, callback);\n        });\n      });\n    }\n  } else {\n    ctx.once('cursor', function(cursor) {\n      if (cursor == null) {\n        return;\n      }\n      _next(ctx, cb);\n    });\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _onNext(error, doc) {\n  if (error) {\n    return this.callback(error);\n  }\n  if (!doc) {\n    this.ctx._batchExhausted = true;\n    return _populateBatch.call(this);\n  }\n\n  this.ctx._batchDocs.push(doc);\n\n  if (this.ctx._batchDocs.length < this.ctx.options._populateBatchSize) {\n    // If both `batchSize` and `_populateBatchSize` are huge, calling `next()` repeatedly may\n    // cause a stack overflow. So make sure we clear the stack regularly.\n    if (this.ctx._batchDocs.length > 0 && this.ctx._batchDocs.length % 1000 === 0) {\n      return immediate(() => this.ctx.cursor.next(_onNext.bind(this)));\n    }\n    this.ctx.cursor.next(_onNext.bind(this));\n  } else {\n    _populateBatch.call(this);\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _populateBatch() {\n  if (!this.ctx._batchDocs.length) {\n    return this.callback(null, null);\n  }\n  const _this = this;\n  this.ctx.query.model.populate(this.ctx._batchDocs, this.ctx._pop, function(err) {\n    if (err) {\n      return _this.callback(err);\n    }\n\n    _nextDoc(_this.ctx, _this.ctx._batchDocs.shift(), _this.ctx._pop, _this.callback);\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _nextDoc(ctx, doc, pop, callback) {\n  if (ctx.query._mongooseOptions.lean) {\n    return ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  }\n\n  _create(ctx, doc, pop, (err, doc) => {\n    if (err != null) {\n      return callback(err);\n    }\n    ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function(cursor) {\n    if (cursor == null) {\n      return;\n    }\n    cb();\n  });\n}\n\n/*!\n * Convert a raw doc into a full mongoose doc.\n */\n\nfunction _create(ctx, doc, populatedIds, cb) {\n  const instance = helpers.createModel(ctx.query.model, doc, ctx.query._fields);\n  const opts = populatedIds ?\n    { populated: populatedIds } :\n    undefined;\n\n  instance.init(doc, opts, function(err) {\n    if (err) {\n      return cb(err);\n    }\n    cb(null, instance);\n  });\n}\n\nmodule.exports = QueryCursor;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}