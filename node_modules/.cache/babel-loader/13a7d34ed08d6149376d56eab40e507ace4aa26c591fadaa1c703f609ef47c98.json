{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst EventEmitter = require('events').EventEmitter;\nconst Kareem = require('kareem');\nconst MongooseError = require('./error/mongooseError');\nconst SchemaType = require('./schematype');\nconst SchemaTypeOptions = require('./options/SchemaTypeOptions');\nconst VirtualOptions = require('./options/VirtualOptions');\nconst VirtualType = require('./virtualtype');\nconst addAutoId = require('./helpers/schema/addAutoId');\nconst arrayParentSymbol = require('./helpers/symbols').arrayParentSymbol;\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getIndexes = require('./helpers/schema/getIndexes');\nconst merge = require('./helpers/schema/merge');\nconst mpath = require('mpath');\nconst readPref = require('./driver').get().ReadPreference;\nconst setupTimestamps = require('./helpers/timestamps/setupTimestamps');\nconst util = require('util');\nconst utils = require('./utils');\nconst validateRef = require('./helpers/populate/validateRef');\nlet MongooseTypes;\nconst queryHooks = require('./helpers/query/applyQueryMiddleware').middlewareFunctions;\nconst documentHooks = require('./helpers/model/applyHooks').middlewareFunctions;\nconst hookNames = queryHooks.concat(documentHooks).reduce((s, hook) => s.add(hook), new Set());\nlet id = 0;\n\n/**\n * Schema constructor.\n *\n * ####Example:\n *\n *     const child = new Schema({ name: String });\n *     const schema = new Schema({ name: String, age: Number, children: [child] });\n *     const Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { _id: false, autoIndex: false })\n *\n * ####Options:\n *\n * - [autoIndex](/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [autoCreate](/docs/guide.html#autoCreate): bool - defaults to null (which means use the connection's autoCreate option)\n * - [bufferCommands](/docs/guide.html#bufferCommands): bool - defaults to true\n * - [bufferTimeoutMS](/docs/guide.html#bufferTimeoutMS): number - defaults to 10000 (10 seconds). If `bufferCommands` is enabled, the amount of time Mongoose will wait for connectivity to be restablished before erroring out.\n * - [capped](/docs/guide.html#capped): bool - defaults to false\n * - [collection](/docs/guide.html#collection): string - no default\n * - [discriminatorKey](/docs/guide.html#discriminatorKey): string - defaults to `__t`\n * - [id](/docs/guide.html#id): bool - defaults to true\n * - [_id](/docs/guide.html#_id): bool - defaults to true\n * - [minimize](/docs/guide.html#minimize): bool - controls [document#toObject](#document_Document-toObject) behavior when called manually - defaults to true\n * - [read](/docs/guide.html#read): string\n * - [writeConcern](/docs/guide.html#writeConcern): object - defaults to null, use to override [the MongoDB server's default write concern settings](https://docs.mongodb.com/manual/reference/write-concern/)\n * - [shardKey](/docs/guide.html#shardKey): object - defaults to `null`\n * - [strict](/docs/guide.html#strict): bool - defaults to true\n * - [strictQuery](/docs/guide.html#strictQuery): bool - defaults to false\n * - [toJSON](/docs/guide.html#toJSON) - object - no default\n * - [toObject](/docs/guide.html#toObject) - object - no default\n * - [typeKey](/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [typePojoToMixed](/docs/guide.html#typePojoToMixed) - boolean - defaults to true. Determines whether a type set to a POJO becomes a Mixed path or a Subdocument\n * - [useNestedStrict](/docs/guide.html#useNestedStrict) - boolean - defaults to false\n * - [validateBeforeSave](/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [versionKey](/docs/guide.html#versionKey): string or object - defaults to \"__v\"\n * - [optimisticConcurrency](/docs/guide.html#optimisticConcurrency): bool - defaults to false. Set to true to enable [optimistic concurrency](https://thecodebarbarian.com/whats-new-in-mongoose-5-10-optimistic-concurrency.html).\n * - [collation](/docs/guide.html#collation): object - defaults to null (which means use no collation)\n * - [selectPopulatedPaths](/docs/guide.html#selectPopulatedPaths): boolean - defaults to `true`\n * - [skipVersioning](/docs/guide.html#skipVersioning): object - paths to exclude from versioning\n * - [timestamps](/docs/guide.html#timestamps): object or boolean - defaults to `false`. If true, Mongoose adds `createdAt` and `updatedAt` properties to your schema and manages those properties for you.\n * - [storeSubdocValidationError](/docs/guide.html#storeSubdocValidationError): boolean - Defaults to true. If false, Mongoose will wrap validation errors in single nested document subpaths into a single validation error on the single nested subdoc's path.\n *\n * ####Options for Nested Schemas:\n * - `excludeIndexes`: bool - defaults to `false`. If `true`, skip building indexes on this schema's paths.\n *\n * ####Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object|Schema|Array} [definition] Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n  this.obj = obj;\n  this.paths = {};\n  this.aliases = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this.methods = {};\n  this.methodOptions = {};\n  this.statics = {};\n  this.tree = {};\n  this.query = {};\n  this.childSchemas = [];\n  this.plugins = [];\n  // For internal debugging. Do not use this to try to save a schema in MDB.\n  this.$id = ++id;\n  this.mapPaths = [];\n  this.s = {\n    hooks: new Kareem()\n  };\n  this.options = this.defaultOptions(options);\n\n  // build paths\n  if (Array.isArray(obj)) {\n    for (const definition of obj) {\n      this.add(definition);\n    }\n  } else if (obj) {\n    this.add(obj);\n  }\n\n  // check if _id's value is a subdocument (gh-2276)\n  const _idSubDoc = obj && obj._id && utils.isObject(obj._id);\n\n  // ensure the documents get an auto _id unless disabled\n  const auto_id = !this.paths['_id'] && !this.options.noId && this.options._id && !_idSubDoc;\n  if (auto_id) {\n    addAutoId(this);\n  }\n  this.setupTimestamp(this.options.timestamps);\n}\n\n/*!\n * Create virtual properties with alias field\n */\nfunction aliasFields(schema, paths) {\n  paths = paths || Object.keys(schema.paths);\n  for (const path of paths) {\n    const options = get(schema.paths[path], 'options');\n    if (options == null) {\n      continue;\n    }\n    const prop = schema.paths[path].path;\n    const alias = options.alias;\n    if (!alias) {\n      continue;\n    }\n    if (typeof alias !== 'string') {\n      throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\n    }\n    schema.aliases[alias] = prop;\n    schema.virtual(alias).get(function (p) {\n      return function () {\n        if (typeof this.get === 'function') {\n          return this.get(p);\n        }\n        return this[p];\n      };\n    }(prop)).set(function (p) {\n      return function (v) {\n        return this.$set(p, v);\n      };\n    }(prop));\n  }\n}\n\n/*!\n * Inherit from EventEmitter.\n */\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n\n/*!\n * ignore\n */\n\nObject.defineProperty(Schema.prototype, '$schemaType', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * Array of child schemas (from document arrays and single nested subdocs)\n * and their corresponding compiled models. Each element of the array is\n * an object with 2 properties: `schema` and `model`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * @api public\n * @property childSchemas\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'childSchemas', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The original object passed to the schema constructor\n *\n * ####Example:\n *\n *     const schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.obj;\n\n/**\n * The paths defined on this schema. The keys are the top-level paths\n * in this schema, and the values are instances of the SchemaType class.\n *\n * ####Example:\n *     const schema = new Schema({ name: String }, { _id: false });\n *     schema.paths; // { name: SchemaString { ... } }\n *\n *     schema.add({ age: Number });\n *     schema.paths; // { name: SchemaString { ... }, age: SchemaNumber { ... } }\n *\n * @api public\n * @property paths\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.paths;\n\n/**\n * Schema as a tree\n *\n * ####Example:\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.tree;\n\n/**\n * Returns a deep copy of the schema\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     const clone = schema.clone();\n *     clone === schema; // false\n *     clone.path('name'); // SchemaString { ... }\n *\n * @return {Schema} the cloned schema\n * @api public\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.clone = function () {\n  const Constructor = this.base == null ? Schema : this.base.Schema;\n  const s = new Constructor({}, this._userProvidedOptions);\n  s.base = this.base;\n  s.obj = this.obj;\n  s.options = utils.clone(this.options);\n  s.callQueue = this.callQueue.map(function (f) {\n    return f;\n  });\n  s.methods = utils.clone(this.methods);\n  s.methodOptions = utils.clone(this.methodOptions);\n  s.statics = utils.clone(this.statics);\n  s.query = utils.clone(this.query);\n  s.plugins = Array.prototype.slice.call(this.plugins);\n  s._indexes = utils.clone(this._indexes);\n  s.s.hooks = this.s.hooks.clone();\n  s.tree = utils.clone(this.tree);\n  s.paths = utils.clone(this.paths);\n  s.nested = utils.clone(this.nested);\n  s.subpaths = utils.clone(this.subpaths);\n  s.singleNestedPaths = utils.clone(this.singleNestedPaths);\n  s.childSchemas = gatherChildSchemas(s);\n  s.virtuals = utils.clone(this.virtuals);\n  s.$globalPluginsApplied = this.$globalPluginsApplied;\n  s.$isRootDiscriminator = this.$isRootDiscriminator;\n  s.$implicitlyCreated = this.$implicitlyCreated;\n  s.mapPaths = [].concat(this.mapPaths);\n  if (this.discriminatorMapping != null) {\n    s.discriminatorMapping = Object.assign({}, this.discriminatorMapping);\n  }\n  if (this.discriminators != null) {\n    s.discriminators = Object.assign({}, this.discriminators);\n  }\n  s.aliases = Object.assign({}, this.aliases);\n\n  // Bubble up `init` for backwards compat\n  s.on('init', v => this.emit('init', v));\n  return s;\n};\n\n/**\n * Returns a new schema that has the picked `paths` from this schema.\n *\n * This method is analagous to [Lodash's `pick()` function](https://lodash.com/docs/4.17.15#pick) for Mongoose schemas.\n *\n * ####Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema with the same `name` path as `schema`,\n *     // but no `age` path.\n *     const newSchema = schema.pick(['name']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {Array} paths list of paths to pick\n * @param {Object} [options] options to pass to the schema constructor. Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.pick = function (paths, options) {\n  const newSchema = new Schema({}, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#pick() only accepts an array argument, ' + 'got \"' + typeof paths + '\"');\n  }\n  for (const path of paths) {\n    if (this.nested[path]) {\n      newSchema.add({\n        [path]: get(this.tree, path)\n      });\n    } else {\n      const schematype = this.path(path);\n      if (schematype == null) {\n        throw new MongooseError('Path `' + path + '` is not in the schema');\n      }\n      newSchema.add({\n        [path]: schematype\n      });\n    }\n  }\n  return newSchema;\n};\n\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nSchema.prototype.defaultOptions = function (options) {\n  if (options && options.safe === false) {\n    options.safe = {\n      w: 0\n    };\n  }\n  if (options && options.safe && options.safe.w === 0) {\n    // if you turn off safe writes, then versioning goes off as well\n    options.versionKey = false;\n  }\n  this._userProvidedOptions = options == null ? {} : utils.clone(options);\n  const baseOptions = get(this, 'base.options', {});\n  options = utils.options({\n    strict: 'strict' in baseOptions ? baseOptions.strict : true,\n    strictQuery: 'strictQuery' in baseOptions ? baseOptions.strictQuery : false,\n    bufferCommands: true,\n    capped: false,\n    // { size, max, autoIndexId }\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    discriminatorKey: '__t',\n    minimize: true,\n    autoIndex: null,\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    // the following are only applied at construction time\n    noId: false,\n    // deprecated, use { _id: false }\n    _id: true,\n    noVirtualId: false,\n    // deprecated, use { id: false }\n    id: true,\n    typeKey: 'type',\n    typePojoToMixed: 'typePojoToMixed' in baseOptions ? baseOptions.typePojoToMixed : true\n  }, utils.clone(options));\n  if (options.read) {\n    options.read = readPref(options.read);\n  }\n  if (options.optimisticConcurrency && !options.versionKey) {\n    throw new MongooseError('Must set `versionKey` if using `optimisticConcurrency`');\n  }\n  return options;\n};\n\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * ####Example:\n *\n *     const ToySchema = new Schema();\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n *     const TurboManSchema = new Schema();\n *     // You can also `add()` another schema and copy over all paths, virtuals,\n *     // getters, setters, indexes, methods, and statics.\n *     TurboManSchema.add(ToySchema).add({ year: Number });\n *\n * @param {Object|Schema} obj plain object with paths to add, or another schema\n * @param {String} [prefix] path to prefix the newly added paths with\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.add = function add(obj, prefix) {\n  if (obj instanceof Schema || obj != null && obj.instanceOfSchema) {\n    merge(this, obj);\n    return this;\n  }\n\n  // Special case: setting top-level `_id` to false should convert to disabling\n  // the `_id` option. This behavior never worked before 5.4.11 but numerous\n  // codebases use it (see gh-7516, gh-7512).\n  if (obj._id === false && prefix == null) {\n    this.options._id = false;\n  }\n  prefix = prefix || '';\n  // avoid prototype pollution\n  if (prefix === '__proto__.' || prefix === 'constructor.' || prefix === 'prototype.') {\n    return this;\n  }\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    if (utils.specialProperties.has(key)) {\n      continue;\n    }\n    const fullPath = prefix + key;\n    if (obj[key] == null) {\n      throw new TypeError('Invalid value for schema path `' + fullPath + '`, got value \"' + obj[key] + '\"');\n    }\n    // Retain `_id: false` but don't set it as a path, re: gh-8274.\n    if (key === '_id' && obj[key] === false) {\n      continue;\n    }\n    if (obj[key] instanceof VirtualType || get(obj[key], 'constructor.name', null) === 'VirtualType') {\n      this.virtual(obj[key]);\n      continue;\n    }\n    if (Array.isArray(obj[key]) && obj[key].length === 1 && obj[key][0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + fullPath + '`, got value \"' + obj[key][0] + '\"');\n    }\n    if (!(utils.isPOJO(obj[key]) || obj[key] instanceof SchemaTypeOptions)) {\n      // Special-case: Non-options definitely a path so leaf at this node\n      // Examples: Schema instances, SchemaType instances\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n      this.path(prefix + key, obj[key]);\n    } else if (Object.keys(obj[key]).length < 1) {\n      // Special-case: {} always interpreted as Mixed path so leaf at this node\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n      this.path(fullPath, obj[key]); // mixed type\n    } else if (!obj[key][this.options.typeKey] || this.options.typeKey === 'type' && obj[key].type.type) {\n      // Special-case: POJO with no bona-fide type key - interpret as tree of deep paths so recurse\n      // nested object { last: { name: String }}\n      this.nested[fullPath] = true;\n      this.add(obj[key], fullPath + '.');\n    } else {\n      // There IS a bona-fide type key that may also be a POJO\n      if (!this.options.typePojoToMixed && utils.isPOJO(obj[key][this.options.typeKey])) {\n        // If a POJO is the value of a type key, make it a subdocument\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n        // Propage `typePojoToMixed` to implicitly created schemas\n        const opts = {\n          typePojoToMixed: false\n        };\n        const _schema = new Schema(obj[key][this.options.typeKey], opts);\n        const schemaWrappedPath = Object.assign({}, obj[key], {\n          [this.options.typeKey]: _schema\n        });\n        this.path(prefix + key, schemaWrappedPath);\n      } else {\n        // Either the type is non-POJO or we interpret it as Mixed anyway\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n        this.path(prefix + key, obj[key]);\n      }\n    }\n  }\n  const addedKeys = Object.keys(obj).map(key => prefix ? prefix + key : key);\n  aliasFields(this, addedKeys);\n  return this;\n};\n\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are rejected in schema declarations\n * because they conflict with Mongoose functionality. If you create a schema\n * using `new Schema()` with one of these property names, Mongoose will throw\n * an error.\n *\n * - _posts\n * - _pres\n * - collection\n * - emit\n * - errors\n * - get\n * - init\n * - isModified\n * - isNew\n * - listeners\n * - modelName\n * - on\n * - once\n * - populated\n * - prototype\n * - remove\n * - removeListener\n * - save\n * - schema\n * - toObject\n * - validate\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      const schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n */\n\nSchema.reserved = Object.create(null);\nSchema.prototype.reserved = Schema.reserved;\nconst reserved = Schema.reserved;\n// Core object\nreserved['prototype'] =\n// EventEmitter\nreserved.emit = reserved.listeners = reserved.on = reserved.removeListener =\n// document properties and functions\nreserved.collection = reserved.errors = reserved.get = reserved.init = reserved.isModified = reserved.isNew = reserved.populated = reserved.remove = reserved.save = reserved.toObject = reserved.validate = 1;\n\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * ####Example\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path\n * @param {Object} constructor\n * @api public\n */\n\nSchema.prototype.path = function (path, obj) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n  if (obj === undefined) {\n    let schematype = _getPath(this, path, cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // Look for maps\n    const mapPath = getMapPath(this, path);\n    if (mapPath != null) {\n      return mapPath;\n    }\n\n    // Look if a parent of this path is mixed\n    schematype = this.hasMixedParent(cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // subpaths?\n    return /\\.\\d+\\.?.*$/.test(path) ? getPositionalPath(this, path) : undefined;\n  }\n\n  // some path names conflict with document methods\n  const firstPieceOfPath = path.split('.')[0];\n  if (reserved[firstPieceOfPath]) {\n    throw new Error('`' + firstPieceOfPath + '` may not be used as a schema pathname');\n  }\n  if (typeof obj === 'object' && utils.hasUserDefinedProperty(obj, 'ref')) {\n    validateRef(obj.ref, path);\n  }\n\n  // update the tree\n  const subpaths = path.split(/\\./);\n  const last = subpaths.pop();\n  let branch = this.tree;\n  let fullPath = '';\n  for (const sub of subpaths) {\n    if (utils.specialProperties.has(sub)) {\n      throw new Error('Cannot set special property `' + sub + '` on a schema');\n    }\n    fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;\n    if (!branch[sub]) {\n      this.nested[fullPath] = true;\n      branch[sub] = {};\n    }\n    if (typeof branch[sub] !== 'object') {\n      const msg = 'Cannot set nested path `' + path + '`. ' + 'Parent path `' + fullPath + '` already set to type ' + branch[sub].name + '.';\n      throw new Error(msg);\n    }\n    branch = branch[sub];\n  }\n  branch[last] = utils.clone(obj);\n  this.paths[path] = this.interpretAsType(path, obj, this.options);\n  const schemaType = this.paths[path];\n  if (schemaType.$isSchemaMap) {\n    // Maps can have arbitrary keys, so `$*` is internal shorthand for \"any key\"\n    // The '$' is to imply this path should never be stored in MongoDB so we\n    // can easily build a regexp out of this path, and '*' to imply \"any key.\"\n    const mapPath = path + '.$*';\n    let _mapType = {\n      type: {}\n    };\n    if (utils.hasUserDefinedProperty(obj, 'of')) {\n      const isInlineSchema = utils.isPOJO(obj.of) && Object.keys(obj.of).length > 0 && !utils.hasUserDefinedProperty(obj.of, this.options.typeKey);\n      _mapType = isInlineSchema ? new Schema(obj.of) : obj.of;\n    }\n    if (utils.hasUserDefinedProperty(obj, 'ref')) {\n      _mapType = {\n        type: _mapType,\n        ref: obj.ref\n      };\n    }\n    this.paths[mapPath] = this.interpretAsType(mapPath, _mapType, this.options);\n    this.mapPaths.push(this.paths[mapPath]);\n    schemaType.$__schemaType = this.paths[mapPath];\n  }\n  if (schemaType.$isSingleNested) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.singleNestedPaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.subpaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.nested)) {\n      this.singleNestedPaths[path + '.' + key] = 'nested';\n    }\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n    schemaType.caster.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.caster\n    });\n  } else if (schemaType.$isMongooseDocumentArray) {\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n    schemaType.casterConstructor.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.casterConstructor\n    });\n  }\n  if (schemaType.$isMongooseArray && schemaType.caster instanceof SchemaType) {\n    let arrayPath = path;\n    let _schemaType = schemaType;\n    const toAdd = [];\n    while (_schemaType.$isMongooseArray) {\n      arrayPath = arrayPath + '.$';\n\n      // Skip arrays of document arrays\n      if (_schemaType.$isMongooseDocumentArray) {\n        _schemaType.$embeddedSchemaType._arrayPath = arrayPath;\n        _schemaType.$embeddedSchemaType._arrayParentPath = path;\n        _schemaType = _schemaType.$embeddedSchemaType.clone();\n      } else {\n        _schemaType.caster._arrayPath = arrayPath;\n        _schemaType.caster._arrayParentPath = path;\n        _schemaType = _schemaType.caster.clone();\n      }\n      _schemaType.path = arrayPath;\n      toAdd.push(_schemaType);\n    }\n    for (const _schemaType of toAdd) {\n      this.subpaths[_schemaType.path] = _schemaType;\n    }\n  }\n  if (schemaType.$isMongooseDocumentArray) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      const _schemaType = schemaType.schema.paths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      const _schemaType = schemaType.schema.subpaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      const _schemaType = schemaType.schema.singleNestedPaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction gatherChildSchemas(schema) {\n  const childSchemas = [];\n  for (const path of Object.keys(schema.paths)) {\n    const schematype = schema.paths[path];\n    if (schematype.$isMongooseDocumentArray || schematype.$isSingleNested) {\n      childSchemas.push({\n        schema: schematype.schema,\n        model: schematype.caster\n      });\n    }\n  }\n  return childSchemas;\n}\n\n/*!\n * ignore\n */\n\nfunction _getPath(schema, path, cleanPath) {\n  if (schema.paths.hasOwnProperty(path)) {\n    return schema.paths[path];\n  }\n  if (schema.subpaths.hasOwnProperty(cleanPath)) {\n    return schema.subpaths[cleanPath];\n  }\n  if (schema.singleNestedPaths.hasOwnProperty(cleanPath) && typeof schema.singleNestedPaths[cleanPath] === 'object') {\n    return schema.singleNestedPaths[cleanPath];\n  }\n  return null;\n}\n\n/*!\n * ignore\n */\n\nfunction _pathToPositionalSyntax(path) {\n  if (!/\\.\\d+/.test(path)) {\n    return path;\n  }\n  return path.replace(/\\.\\d+\\./g, '.$.').replace(/\\.\\d+$/, '.$');\n}\n\n/*!\n * ignore\n */\n\nfunction getMapPath(schema, path) {\n  if (schema.mapPaths.length === 0) {\n    return null;\n  }\n  for (const val of schema.mapPaths) {\n    const _path = val.path;\n    const re = new RegExp('^' + _path.replace(/\\.\\$\\*/g, '\\\\.[^.]+') + '$');\n    if (re.test(path)) {\n      return schema.paths[_path];\n    }\n  }\n  return null;\n}\n\n/**\n * The Mongoose instance this schema is associated with\n *\n * @property base\n * @api private\n */\n\nObject.defineProperty(Schema.prototype, 'base', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: null\n});\n\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @api private\n */\n\nSchema.prototype.interpretAsType = function (path, obj, options) {\n  if (obj instanceof SchemaType) {\n    if (obj.path === path) {\n      return obj;\n    }\n    const clone = obj.clone();\n    clone.path = path;\n    return clone;\n  }\n\n  // If this schema has an associated Mongoose object, use the Mongoose object's\n  // copy of SchemaTypes re: gh-7158 gh-6933\n  const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n  if (!utils.isPOJO(obj) && !(obj instanceof SchemaTypeOptions)) {\n    const constructorName = utils.getFunctionName(obj.constructor);\n    if (constructorName !== 'Object') {\n      const oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  }\n\n  // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n  let type = obj[options.typeKey] && (options.typeKey !== 'type' || !obj.type.type) ? obj[options.typeKey] : {};\n  let name;\n  if (utils.isPOJO(type) || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n  if (Array.isArray(type) || type === Array || type === 'array' || type === MongooseTypes.Array) {\n    // if it was specified through { type } look for `cast`\n    let cast = type === Array || type === 'array' ? obj.cast || obj.of : type[0];\n    if (cast && cast.instanceOfSchema) {\n      if (!(cast instanceof Schema)) {\n        throw new TypeError('Schema for array path `' + path + '` is from a different copy of the Mongoose module. Please make sure you\\'re using the same version ' + 'of Mongoose everywhere with `npm list mongoose`.');\n      }\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n    if (cast && cast[options.typeKey] && cast[options.typeKey].instanceOfSchema) {\n      if (!(cast[options.typeKey] instanceof Schema)) {\n        throw new TypeError('Schema for array path `' + path + '` is from a different copy of the Mongoose module. Please make sure you\\'re using the same version ' + 'of Mongoose everywhere with `npm list mongoose`.');\n      }\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], obj, cast);\n    }\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, this.interpretAsType(path, cast, options), obj);\n    }\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (cast && (!cast[options.typeKey] || options.typeKey === 'type' && cast.type.type) && utils.isPOJO(cast)) {\n      if (Object.keys(cast).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        const childSchemaOptions = {\n          minimize: options.minimize\n        };\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (options.hasOwnProperty('strict')) {\n          childSchemaOptions.strict = options.strict;\n        }\n        if (options.hasOwnProperty('typePojoToMixed')) {\n          childSchemaOptions.typePojoToMixed = options.typePojoToMixed;\n        }\n        if (this._userProvidedOptions.hasOwnProperty('_id')) {\n          childSchemaOptions._id = this._userProvidedOptions._id;\n        } else if (Schema.Types.DocumentArray.defaultOptions && Schema.Types.DocumentArray.defaultOptions._id != null) {\n          childSchemaOptions._id = Schema.Types.DocumentArray.defaultOptions._id;\n        }\n        const childSchema = new Schema(cast, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type) ? cast[options.typeKey] : cast;\n      name = typeof type === 'string' ? type : type.schemaName || utils.getFunctionName(type);\n\n      // For Jest 26+, see #10296\n      if (name === 'ClockDate') {\n        name = 'Date';\n      }\n      if (!MongooseTypes.hasOwnProperty(name)) {\n        throw new TypeError('Invalid schema configuration: ' + `\\`${name}\\` is not a valid type within the array \\`${path}\\`.` + 'See http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n      }\n    }\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Embedded(type, path, obj);\n  }\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else if (typeof type === 'function' || typeof type === 'object') {\n    name = type.schemaName || utils.getFunctionName(type);\n  } else {\n    name = type == null ? '' + type : type.toString();\n  }\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  }\n  // Special case re: gh-7049 because the bson `ObjectID` class' capitalization\n  // doesn't line up with Mongoose's.\n  if (name === 'ObjectID') {\n    name = 'ObjectId';\n  }\n  // For Jest 26+, see #10296\n  if (name === 'ClockDate') {\n    name = 'Date';\n  }\n  if (MongooseTypes[name] == null) {\n    throw new TypeError(`Invalid schema configuration: \\`${name}\\` is not ` + `a valid type at path \\`${path}\\`. See ` + 'http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n  }\n  return new MongooseTypes[name](path, obj);\n};\n\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and the schemaType instance.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({ name: String, registeredAt: Date });\n *     userSchema.eachPath((pathname, schematype) => {\n *       // Prints twice:\n *       // name SchemaString { ... }\n *       // registeredAt SchemaDate { ... }\n *       console.log(pathname, schematype);\n *     });\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\nSchema.prototype.eachPath = function (fn) {\n  const keys = Object.keys(this.paths);\n  const len = keys.length;\n  for (let i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n  return this;\n};\n\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * ####Example:\n *     const s = new Schema({\n *       name: { type: String, required: true },\n *       age: { type: String, required: true },\n *       notes: String\n *     });\n *     s.requiredPaths(); // [ 'age', 'name' ]\n *\n * @api public\n * @param {Boolean} invalidate refresh the cache\n * @return {Array}\n */\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n  const paths = Object.keys(this.paths);\n  let i = paths.length;\n  const ret = [];\n  while (i--) {\n    const path = paths[i];\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * ####Example:\n *     const s = new Schema({ name: String, nested: { foo: String } });\n *     s.virtual('foo').get(() => 42);\n *     s.pathType('name'); // \"real\"\n *     s.pathType('nested'); // \"nested\"\n *     s.pathType('foo'); // \"virtual\"\n *     s.pathType('fail'); // \"adhocOrUndefined\"\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\nSchema.prototype.pathType = function (path) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n  if (this.paths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  if (this.virtuals.hasOwnProperty(path)) {\n    return 'virtual';\n  }\n  if (this.nested.hasOwnProperty(path)) {\n    return 'nested';\n  }\n  if (this.subpaths.hasOwnProperty(cleanPath) || this.subpaths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  const singleNestedPath = this.singleNestedPaths.hasOwnProperty(cleanPath) || this.singleNestedPaths.hasOwnProperty(path);\n  if (singleNestedPath) {\n    return singleNestedPath === 'nested' ? 'nested' : 'real';\n  }\n\n  // Look for maps\n  const mapPath = getMapPath(this, path);\n  if (mapPath != null) {\n    return 'real';\n  }\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path);\n  }\n  return 'adhocOrUndefined';\n};\n\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nSchema.prototype.hasMixedParent = function (path) {\n  const subpaths = path.split(/\\./g);\n  path = '';\n  for (let i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n    if (this.paths.hasOwnProperty(path) && this.paths[path] instanceof MongooseTypes.Mixed) {\n      return this.paths[path];\n    }\n  }\n  return null;\n};\n\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\nSchema.prototype.setupTimestamp = function (timestamps) {\n  return setupTimestamps(this, timestamps);\n};\n\n/*!\n * ignore. Deprecated re: #6405\n */\n\nfunction getPositionalPathType(self, path) {\n  const subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n  if (subpaths.length < 2) {\n    return self.paths.hasOwnProperty(subpaths[0]) ? self.paths[subpaths[0]] : 'adhocOrUndefined';\n  }\n  let val = self.path(subpaths[0]);\n  let isNested = false;\n  if (!val) {\n    return 'adhocOrUndefined';\n  }\n  const last = subpaths.length - 1;\n  for (let i = 1; i < subpaths.length; ++i) {\n    isNested = false;\n    const subpath = subpaths[i];\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        val = val.$embeddedSchemaType;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n      break;\n    }\n\n    // ignore if its just a position segment: path.0.subpath\n    if (!/\\D/.test(subpath)) {\n      // Nested array\n      if (val instanceof MongooseTypes.Array && i !== last) {\n        val = val.caster;\n      }\n      continue;\n    }\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n    const type = val.schema.pathType(subpath);\n    isNested = type === 'nested';\n    val = val.schema.path(subpath);\n  }\n  self.subpaths[path] = val;\n  if (val) {\n    return 'real';\n  }\n  if (isNested) {\n    return 'nested';\n  }\n  return 'adhocOrUndefined';\n}\n\n/*!\n * ignore\n */\n\nfunction getPositionalPath(self, path) {\n  getPositionalPathType(self, path);\n  return self.subpaths[path];\n}\n\n/**\n * Adds a method call to the queue.\n *\n * ####Example:\n *\n *     schema.methods.print = function() { console.log(this); };\n *     schema.queue('print', []); // Print the doc every one is instantiated\n *\n *     const Model = mongoose.model('Test', schema);\n *     new Model({ name: 'test' }); // Prints '{\"_id\": ..., \"name\": \"test\" }'\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\nSchema.prototype.queue = function (name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n\n/**\n * Defines a pre hook for the model.\n *\n * ####Example\n *\n *     const toySchema = new Schema({ name: String, created: Date });\n *\n *     toySchema.pre('save', function(next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     });\n *\n *     toySchema.pre('validate', function(next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     });\n *\n *     // Equivalent to calling `pre()` on `find`, `findOne`, `findOneAndUpdate`.\n *     toySchema.pre(/^find/, function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     // Equivalent to calling `pre()` on `updateOne`, `findOneAndUpdate`.\n *     toySchema.pre(['updateOne', 'findOneAndUpdate'], function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     toySchema.pre('deleteOne', function() {\n *       // Runs when you call `Toy.deleteOne()`\n *     });\n *\n *     toySchema.pre('deleteOne', { document: true }, function() {\n *       // Runs when you call `doc.deleteOne()`\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware. For example, set `options.document` to `true` to apply this hook to `Document#deleteOne()` rather than `Query#deleteOne()`.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} callback\n * @api public\n */\n\nSchema.prototype.pre = function (name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.pre.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.pre.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Defines a post hook for the document\n *\n *     const schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     schema.post('find', function(docs) {\n *       console.log('this fired after you ran a find query');\n *     });\n *\n *     schema.post(/Many$/, function(res) {\n *       console.log('this fired after you ran `updateMany()` or `deleteMany()`);\n *     });\n *\n *     const Model = mongoose.model('Model', schema);\n *\n *     const m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} fn callback\n * @see middleware http://mongoosejs.com/docs/middleware.html\n * @see kareem http://npmjs.org/package/kareem\n * @api public\n */\n\nSchema.prototype.post = function (name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.post.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.post.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.post.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Registers a plugin for this schema.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin(schema => console.log(schema.path('name').path));\n *     mongoose.model('Test', s); // Prints 'name'\n *\n * @param {Function} plugin callback\n * @param {Object} [opts]\n * @see plugins\n * @api public\n */\n\nSchema.prototype.plugin = function (fn, opts) {\n  if (typeof fn !== 'function') {\n    throw new Error('First param to `schema.plugin()` must be a function, ' + 'got \"' + typeof fn + '\"');\n  }\n  if (opts && opts.deduplicate) {\n    for (const plugin of this.plugins) {\n      if (plugin.fn === fn) {\n        return this;\n      }\n    }\n  }\n  this.plugins.push({\n    fn: fn,\n    opts: opts\n  });\n  fn(this, opts);\n  return this;\n};\n\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     const Kitty = mongoose.model('Kitty', schema);\n *\n *     const fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     fizz.purr();\n *     fizz.scratch();\n *\n * NOTE: `Schema.method()` adds instance methods to the `Schema.methods` object. You can also add instance methods directly to the `Schema.methods` object as seen in the [guide](/docs/guide.html#methods)\n *\n * @param {String|Object} method name\n * @param {Function} [fn]\n * @api public\n */\n\nSchema.prototype.method = function (name, fn, options) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.methods[i] = name[i];\n      this.methodOptions[i] = utils.clone(options);\n    }\n  } else {\n    this.methods[name] = fn;\n    this.methodOptions[name] = utils.clone(options);\n  }\n  return this;\n};\n\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = new Schema(..);\n *     // Equivalent to `schema.statics.findByName = function(name) {}`;\n *     schema.static('findByName', function(name) {\n *       return this.find({ name: name });\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name\n * @param {Function} [fn]\n * @api public\n * @see Statics /docs/guide.html#statics\n */\n\nSchema.prototype.static = function (name, fn) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * ####Example\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#createIndex)\n * @param {String | number} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @api public\n */\n\nSchema.prototype.index = function (fields, options) {\n  fields || (fields = {});\n  options || (options = {});\n  if (options.expires) {\n    utils.expires(options);\n  }\n  this._indexes.push([fields, options]);\n  return this;\n};\n\n/**\n * Sets a schema option.\n *\n * ####Example\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key option name\n * @param {Object} [value] if not passed, the current option value is returned\n * @see Schema ./\n * @api public\n */\n\nSchema.prototype.set = function (key, value, _tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n  switch (key) {\n    case 'read':\n      this.options[key] = readPref(value, _tags);\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case 'safe':\n      setSafe(this.options, value);\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case '_id':\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      if (value && !this.paths['_id']) {\n        addAutoId(this);\n      } else if (!value && this.paths['_id'] != null && this.paths['_id'].auto) {\n        this.remove('_id');\n      }\n      break;\n    default:\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nconst safeDeprecationWarning = 'Mongoose: The `safe` option for schemas is ' + 'deprecated. Use the `writeConcern` option instead: ' + 'http://bit.ly/mongoose-write-concern';\nconst setSafe = util.deprecate(function setSafe(options, value) {\n  options.safe = value === false ? {\n    w: 0\n  } : value;\n}, safeDeprecationWarning);\n\n/**\n * Gets a schema option.\n *\n * ####Example:\n *\n *     schema.get('strict'); // true\n *     schema.set('strict', false);\n *     schema.get('strict'); // false\n *\n * @param {String} key option name\n * @api public\n * @return {Any} the option's value\n */\n\nSchema.prototype.get = function (key) {\n  return this.options[key];\n};\n\n/**\n * The allowed index types\n *\n * @receiver Schema\n * @static indexTypes\n * @api public\n */\n\nconst indexTypes = '2d 2dsphere hashed text'.split(' ');\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function () {\n    return indexTypes;\n  },\n  set: function () {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n\n/**\n * Returns a list of indexes that this schema declares, via `schema.index()` or by `index: true` in a path's options.\n * Indexes are expressed as an array `[spec, options]`.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({\n *       email: { type: String, required: true, unique: true },\n *       registeredAt: { type: Date, index: true }\n *     });\n *\n *     // [ [ { email: 1 }, { unique: true, background: true } ],\n *     //   [ { registeredAt: 1 }, { background: true } ] ]\n *     userSchema.indexes();\n *\n * [Plugins](/docs/plugins.html) can use the return value of this function to modify a schema's indexes.\n * For example, the below plugin makes every index unique by default.\n *\n *     function myPlugin(schema) {\n *       for (const index of schema.indexes()) {\n *         if (index[1].unique === undefined) {\n *           index[1].unique = true;\n *         }\n *       }\n *     }\n *\n * @api public\n * @return {Array} list of indexes defined in the schema\n */\n\nSchema.prototype.indexes = function () {\n  return getIndexes(this);\n};\n\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name\n * @param {Object} [options]\n * @param {String|Model} [options.ref] model name or model instance. Marks this as a [populate virtual](populate.html#populate-virtuals).\n * @param {String|Function} [options.localField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\n * @param {String|Function} [options.foreignField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\n * @param {Boolean|Function} [options.justOne=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), will be a single doc or `null`. Otherwise, the populate virtual will be an array.\n * @param {Boolean} [options.count=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), this populate virtual will contain the number of documents rather than the documents themselves when you `populate()`.\n * @param {Function|null} [options.get=null] Adds a [getter](/docs/tutorials/getters-setters.html) to this virtual to transform the populated doc.\n * @return {VirtualType}\n */\n\nSchema.prototype.virtual = function (name, options) {\n  if (name instanceof VirtualType || getConstructorName(name) === 'VirtualType') {\n    return this.virtual(name.path, name.options);\n  }\n  options = new VirtualOptions(options);\n  if (utils.hasUserDefinedProperty(options, ['ref', 'refPath'])) {\n    if (options.localField == null) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n    if (options.foreignField == null) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n    this.pre('init', function (obj) {\n      if (mpath.has(name, obj)) {\n        const _v = mpath.get(name, obj);\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v[0] : _v;\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v : _v == null ? [] : [_v];\n        }\n        mpath.unset(name, obj);\n      }\n    });\n    const virtual = this.virtual(name);\n    virtual.options = options;\n    virtual.set(function (_v) {\n      if (!this.$$populatedVirtuals) {\n        this.$$populatedVirtuals = {};\n      }\n      if (options.justOne || options.count) {\n        this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v[0] : _v;\n        if (typeof this.$$populatedVirtuals[name] !== 'object') {\n          this.$$populatedVirtuals[name] = options.count ? _v : null;\n        }\n      } else {\n        this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v : _v == null ? [] : [_v];\n        this.$$populatedVirtuals[name] = this.$$populatedVirtuals[name].filter(function (doc) {\n          return doc && typeof doc === 'object';\n        });\n      }\n    });\n    if (typeof options.get === 'function') {\n      virtual.get(options.get);\n    }\n    return virtual;\n  }\n  const virtuals = this.virtuals;\n  const parts = name.split('.');\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' + ' conflicts with a real path in the schema');\n  }\n  virtuals[name] = parts.reduce(function (mem, part, i) {\n    mem[part] || (mem[part] = i === parts.length - 1 ? new VirtualType(options, name) : {});\n    return mem[part];\n  }, this.tree);\n\n  // Workaround for gh-8198: if virtual is under document array, make a fake\n  // virtual. See gh-8210\n  let cur = parts[0];\n  for (let i = 0; i < parts.length - 1; ++i) {\n    if (this.paths[cur] != null && this.paths[cur].$isMongooseDocumentArray) {\n      const remnant = parts.slice(i + 1).join('.');\n      const v = this.paths[cur].schema.virtual(remnant);\n      v.get((v, virtual, doc) => {\n        const parent = doc.__parentArray[arrayParentSymbol];\n        const path = cur + '.' + doc.__index + '.' + remnant;\n        return parent.get(path);\n      });\n      break;\n    }\n    cur += '.' + parts[i + 1];\n  }\n  return virtuals[name];\n};\n\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name\n * @return {VirtualType}\n */\n\nSchema.prototype.virtualpath = function (name) {\n  return this.virtuals.hasOwnProperty(name) ? this.virtuals[name] : null;\n};\n\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String, age: Number });\n *     schema.remove('name');\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // SchemaNumber { ... }\n *\n * @param {String|Array} path\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.remove = function (path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    path.forEach(function (name) {\n      if (this.path(name) == null && !this.nested[name]) {\n        return;\n      }\n      if (this.nested[name]) {\n        const allKeys = Object.keys(this.paths).concat(Object.keys(this.nested));\n        for (const path of allKeys) {\n          if (path.startsWith(name + '.')) {\n            delete this.paths[path];\n            delete this.nested[path];\n            _deletePath(this, path);\n          }\n        }\n        delete this.nested[name];\n        _deletePath(this, name);\n        return;\n      }\n      delete this.paths[name];\n      _deletePath(this, name);\n    }, this);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _deletePath(schema, name) {\n  const pieces = name.split('.');\n  const last = pieces.pop();\n  let branch = schema.tree;\n  for (const piece of pieces) {\n    branch = branch[piece];\n  }\n  delete branch[last];\n}\n\n/**\n * Loads an ES6 class into a schema. Maps [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) + [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [static methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static),\n * and [instance methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions)\n * to schema [virtuals](/docs/guide.html#virtuals),\n * [statics](/docs/guide.html#statics), and\n * [methods](/docs/guide.html#methods).\n *\n * ####Example:\n *\n * ```javascript\n * const md5 = require('md5');\n * const userSchema = new Schema({ email: String });\n * class UserClass {\n *   // `gravatarImage` becomes a virtual\n *   get gravatarImage() {\n *     const hash = md5(this.email.toLowerCase());\n *     return `https://www.gravatar.com/avatar/${hash}`;\n *   }\n *\n *   // `getProfileUrl()` becomes a document method\n *   getProfileUrl() {\n *     return `https://mysite.com/${this.email}`;\n *   }\n *\n *   // `findByEmail()` becomes a static\n *   static findByEmail(email) {\n *     return this.findOne({ email });\n *   }\n * }\n *\n * // `schema` will now have a `gravatarImage` virtual, a `getProfileUrl()` method,\n * // and a `findByEmail()` static\n * userSchema.loadClass(UserClass);\n * ```\n *\n * @param {Function} model\n * @param {Boolean} [virtualsOnly] if truthy, only pulls virtuals from the class, not methods or statics\n */\nSchema.prototype.loadClass = function (model, virtualsOnly) {\n  if (model === Object.prototype || model === Function.prototype || model.prototype.hasOwnProperty('$isMongooseModelPrototype')) {\n    return this;\n  }\n  this.loadClass(Object.getPrototypeOf(model), virtualsOnly);\n\n  // Add static methods\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function (name) {\n      if (name.match(/^(length|name|prototype|constructor|__proto__)$/)) {\n        return;\n      }\n      const prop = Object.getOwnPropertyDescriptor(model, name);\n      if (prop.hasOwnProperty('value')) {\n        this.static(name, prop.value);\n      }\n    }, this);\n  }\n\n  // Add methods and virtuals\n  Object.getOwnPropertyNames(model.prototype).forEach(function (name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n    const method = Object.getOwnPropertyDescriptor(model.prototype, name);\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n    if (typeof method.get === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].getters = [];\n      }\n      this.virtual(name).get(method.get);\n    }\n    if (typeof method.set === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].setters = [];\n      }\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getSchema = function (path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n  const resultPath = [];\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n  function search(parts, schema) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        resultPath.push(trypath);\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length) {\n            if (foundschema.schema) {\n              let ret;\n              if (parts[p] === '$' || isArrayFilter(parts[p])) {\n                if (p + 1 === parts.length) {\n                  // comments.$\n                  return foundschema;\n                }\n                // comments.$.comments.$.title\n                ret = search(parts.slice(p + 1), foundschema.schema);\n                if (ret) {\n                  ret.$isUnderneathDocArray = ret.$isUnderneathDocArray || !foundschema.schema.$isSingleNested;\n                }\n                return ret;\n              }\n              // this is the last path of the selector\n              ret = search(parts.slice(p), foundschema.schema);\n              if (ret) {\n                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray || !foundschema.schema.$isSingleNested;\n              }\n              return ret;\n            }\n          }\n        } else if (foundschema.$isSchemaMap) {\n          if (p + 1 >= parts.length) {\n            return foundschema;\n          }\n          const ret = search(parts.slice(p + 1), foundschema.$__schemaType.schema);\n          return ret;\n        }\n        foundschema.$fullPath = resultPath.join('.');\n        return foundschema;\n      }\n    }\n  }\n\n  // look for arrays\n  const parts = path.split('.');\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n  }\n  return search(parts, _this);\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getPathType = function (path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n  if (pathschema) {\n    return 'real';\n  }\n  function search(parts, schema) {\n    let p = parts.length + 1,\n      foundschema,\n      trypath;\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return {\n              schema: foundschema,\n              pathType: 'mixed'\n            };\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p === parts.length - 1) {\n                return {\n                  schema: foundschema,\n                  pathType: 'nested'\n                };\n              }\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            }\n            // this is the last path of the selector\n            return search(parts.slice(p), foundschema.schema);\n          }\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n        return {\n          schema: foundschema,\n          pathType: 'real'\n        };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return {\n          schema: schema,\n          pathType: 'nested'\n        };\n      }\n    }\n    return {\n      schema: foundschema || schema,\n      pathType: 'undefined'\n    };\n  }\n\n  // look for arrays\n  return search(path.split('.'), _this);\n};\n\n/*!\n * ignore\n */\n\nfunction isArrayFilter(piece) {\n  return piece.startsWith('$[') && piece.endsWith(']');\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Schema;\n\n// require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * ####Types:\n *\n * - [String](/docs/schematypes.html#strings)\n * - [Number](/docs/schematypes.html#numbers)\n * - [Boolean](/docs/schematypes.html#booleans) | Bool\n * - [Array](/docs/schematypes.html#arrays)\n * - [Buffer](/docs/schematypes.html#buffers)\n * - [Date](/docs/schematypes.html#dates)\n * - [ObjectId](/docs/schematypes.html#objectids) | Oid\n * - [Mixed](/docs/schematypes.html#mixed)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     const Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;","map":{"version":3,"names":["EventEmitter","require","Kareem","MongooseError","SchemaType","SchemaTypeOptions","VirtualOptions","VirtualType","addAutoId","arrayParentSymbol","get","getConstructorName","getIndexes","merge","mpath","readPref","ReadPreference","setupTimestamps","util","utils","validateRef","MongooseTypes","queryHooks","middlewareFunctions","documentHooks","hookNames","concat","reduce","s","hook","add","Set","id","Schema","obj","options","paths","aliases","subpaths","virtuals","singleNestedPaths","nested","inherits","callQueue","_indexes","methods","methodOptions","statics","tree","query","childSchemas","plugins","$id","mapPaths","hooks","defaultOptions","Array","isArray","definition","_idSubDoc","_id","isObject","auto_id","noId","setupTimestamp","timestamps","aliasFields","schema","Object","keys","path","prop","alias","Error","virtual","p","set","v","$set","prototype","create","constructor","instanceOfSchema","defineProperty","configurable","enumerable","writable","clone","Constructor","base","_userProvidedOptions","map","f","slice","call","gatherChildSchemas","$globalPluginsApplied","$isRootDiscriminator","$implicitlyCreated","discriminatorMapping","assign","discriminators","on","emit","pick","newSchema","schematype","safe","w","versionKey","baseOptions","strict","strictQuery","bufferCommands","capped","optimisticConcurrency","discriminatorKey","minimize","autoIndex","shardKey","read","validateBeforeSave","noVirtualId","typeKey","typePojoToMixed","prefix","key","specialProperties","has","fullPath","TypeError","length","isPOJO","substr","type","opts","_schema","schemaWrappedPath","addedKeys","reserved","listeners","removeListener","collection","errors","init","isModified","isNew","populated","remove","save","toObject","validate","cleanPath","_pathToPositionalSyntax","undefined","_getPath","mapPath","getMapPath","hasMixedParent","test","getPositionalPath","firstPieceOfPath","split","hasUserDefinedProperty","ref","last","pop","branch","sub","msg","name","interpretAsType","schemaType","$isSchemaMap","_mapType","isInlineSchema","of","push","$__schemaType","$isSingleNested","value","caster","model","$isMongooseDocumentArray","casterConstructor","$isMongooseArray","arrayPath","_schemaType","toAdd","$embeddedSchemaType","_arrayPath","_arrayParentPath","$isUnderneathDocArray","hasOwnProperty","replace","val","_path","re","RegExp","Types","constructorName","getFunctionName","oldObj","Mixed","cast","DocumentArray","charAt","toUpperCase","substring","childSchemaOptions","childSchema","schemaName","Embedded","Buffer","isBuffer","toString","eachPath","fn","len","i","requiredPaths","invalidate","_requiredpaths","ret","isRequired","indexedPaths","_indexedpaths","indexes","pathType","singleNestedPath","getPositionalPathType","self","filter","Boolean","isNested","subpath","queue","args","pre","remainingArgs","arguments","apply","el","post","plugin","deduplicate","method","static","index","fields","expires","_tags","setSafe","auto","safeDeprecationWarning","deprecate","indexTypes","localField","foreignField","_v","$$populatedVirtuals","justOne","count","unset","doc","parts","mem","part","cur","remnant","join","parent","__parentArray","__index","virtualpath","forEach","allKeys","startsWith","_deletePath","pieces","piece","loadClass","virtualsOnly","Function","getPrototypeOf","getOwnPropertyNames","match","getOwnPropertyDescriptor","getters","setters","_getSchema","_this","pathschema","resultPath","$fullPath","search","foundschema","trypath","isArrayFilter","_getPathType","endsWith","module","exports","ObjectId"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/schema.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst Kareem = require('kareem');\nconst MongooseError = require('./error/mongooseError');\nconst SchemaType = require('./schematype');\nconst SchemaTypeOptions = require('./options/SchemaTypeOptions');\nconst VirtualOptions = require('./options/VirtualOptions');\nconst VirtualType = require('./virtualtype');\nconst addAutoId = require('./helpers/schema/addAutoId');\nconst arrayParentSymbol = require('./helpers/symbols').arrayParentSymbol;\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getIndexes = require('./helpers/schema/getIndexes');\nconst merge = require('./helpers/schema/merge');\nconst mpath = require('mpath');\nconst readPref = require('./driver').get().ReadPreference;\nconst setupTimestamps = require('./helpers/timestamps/setupTimestamps');\nconst util = require('util');\nconst utils = require('./utils');\nconst validateRef = require('./helpers/populate/validateRef');\n\nlet MongooseTypes;\n\nconst queryHooks = require('./helpers/query/applyQueryMiddleware').\n  middlewareFunctions;\nconst documentHooks = require('./helpers/model/applyHooks').middlewareFunctions;\nconst hookNames = queryHooks.concat(documentHooks).\n  reduce((s, hook) => s.add(hook), new Set());\n\nlet id = 0;\n\n/**\n * Schema constructor.\n *\n * ####Example:\n *\n *     const child = new Schema({ name: String });\n *     const schema = new Schema({ name: String, age: Number, children: [child] });\n *     const Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { _id: false, autoIndex: false })\n *\n * ####Options:\n *\n * - [autoIndex](/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [autoCreate](/docs/guide.html#autoCreate): bool - defaults to null (which means use the connection's autoCreate option)\n * - [bufferCommands](/docs/guide.html#bufferCommands): bool - defaults to true\n * - [bufferTimeoutMS](/docs/guide.html#bufferTimeoutMS): number - defaults to 10000 (10 seconds). If `bufferCommands` is enabled, the amount of time Mongoose will wait for connectivity to be restablished before erroring out.\n * - [capped](/docs/guide.html#capped): bool - defaults to false\n * - [collection](/docs/guide.html#collection): string - no default\n * - [discriminatorKey](/docs/guide.html#discriminatorKey): string - defaults to `__t`\n * - [id](/docs/guide.html#id): bool - defaults to true\n * - [_id](/docs/guide.html#_id): bool - defaults to true\n * - [minimize](/docs/guide.html#minimize): bool - controls [document#toObject](#document_Document-toObject) behavior when called manually - defaults to true\n * - [read](/docs/guide.html#read): string\n * - [writeConcern](/docs/guide.html#writeConcern): object - defaults to null, use to override [the MongoDB server's default write concern settings](https://docs.mongodb.com/manual/reference/write-concern/)\n * - [shardKey](/docs/guide.html#shardKey): object - defaults to `null`\n * - [strict](/docs/guide.html#strict): bool - defaults to true\n * - [strictQuery](/docs/guide.html#strictQuery): bool - defaults to false\n * - [toJSON](/docs/guide.html#toJSON) - object - no default\n * - [toObject](/docs/guide.html#toObject) - object - no default\n * - [typeKey](/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [typePojoToMixed](/docs/guide.html#typePojoToMixed) - boolean - defaults to true. Determines whether a type set to a POJO becomes a Mixed path or a Subdocument\n * - [useNestedStrict](/docs/guide.html#useNestedStrict) - boolean - defaults to false\n * - [validateBeforeSave](/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [versionKey](/docs/guide.html#versionKey): string or object - defaults to \"__v\"\n * - [optimisticConcurrency](/docs/guide.html#optimisticConcurrency): bool - defaults to false. Set to true to enable [optimistic concurrency](https://thecodebarbarian.com/whats-new-in-mongoose-5-10-optimistic-concurrency.html).\n * - [collation](/docs/guide.html#collation): object - defaults to null (which means use no collation)\n * - [selectPopulatedPaths](/docs/guide.html#selectPopulatedPaths): boolean - defaults to `true`\n * - [skipVersioning](/docs/guide.html#skipVersioning): object - paths to exclude from versioning\n * - [timestamps](/docs/guide.html#timestamps): object or boolean - defaults to `false`. If true, Mongoose adds `createdAt` and `updatedAt` properties to your schema and manages those properties for you.\n * - [storeSubdocValidationError](/docs/guide.html#storeSubdocValidationError): boolean - Defaults to true. If false, Mongoose will wrap validation errors in single nested document subpaths into a single validation error on the single nested subdoc's path.\n *\n * ####Options for Nested Schemas:\n * - `excludeIndexes`: bool - defaults to `false`. If `true`, skip building indexes on this schema's paths.\n *\n * ####Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object|Schema|Array} [definition] Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n\n  this.obj = obj;\n  this.paths = {};\n  this.aliases = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this.methods = {};\n  this.methodOptions = {};\n  this.statics = {};\n  this.tree = {};\n  this.query = {};\n  this.childSchemas = [];\n  this.plugins = [];\n  // For internal debugging. Do not use this to try to save a schema in MDB.\n  this.$id = ++id;\n  this.mapPaths = [];\n\n  this.s = {\n    hooks: new Kareem()\n  };\n\n  this.options = this.defaultOptions(options);\n\n  // build paths\n  if (Array.isArray(obj)) {\n    for (const definition of obj) {\n      this.add(definition);\n    }\n  } else if (obj) {\n    this.add(obj);\n  }\n\n  // check if _id's value is a subdocument (gh-2276)\n  const _idSubDoc = obj && obj._id && utils.isObject(obj._id);\n\n  // ensure the documents get an auto _id unless disabled\n  const auto_id = !this.paths['_id'] &&\n      (!this.options.noId && this.options._id) && !_idSubDoc;\n\n  if (auto_id) {\n    addAutoId(this);\n  }\n\n  this.setupTimestamp(this.options.timestamps);\n}\n\n/*!\n * Create virtual properties with alias field\n */\nfunction aliasFields(schema, paths) {\n  paths = paths || Object.keys(schema.paths);\n  for (const path of paths) {\n    const options = get(schema.paths[path], 'options');\n    if (options == null) {\n      continue;\n    }\n\n    const prop = schema.paths[path].path;\n    const alias = options.alias;\n\n    if (!alias) {\n      continue;\n    }\n\n    if (typeof alias !== 'string') {\n      throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\n    }\n\n    schema.aliases[alias] = prop;\n\n    schema.\n      virtual(alias).\n      get((function(p) {\n        return function() {\n          if (typeof this.get === 'function') {\n            return this.get(p);\n          }\n          return this[p];\n        };\n      })(prop)).\n      set((function(p) {\n        return function(v) {\n          return this.$set(p, v);\n        };\n      })(prop));\n  }\n}\n\n/*!\n * Inherit from EventEmitter.\n */\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n\n/*!\n * ignore\n */\n\nObject.defineProperty(Schema.prototype, '$schemaType', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * Array of child schemas (from document arrays and single nested subdocs)\n * and their corresponding compiled models. Each element of the array is\n * an object with 2 properties: `schema` and `model`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * @api public\n * @property childSchemas\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'childSchemas', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The original object passed to the schema constructor\n *\n * ####Example:\n *\n *     const schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.obj;\n\n/**\n * The paths defined on this schema. The keys are the top-level paths\n * in this schema, and the values are instances of the SchemaType class.\n *\n * ####Example:\n *     const schema = new Schema({ name: String }, { _id: false });\n *     schema.paths; // { name: SchemaString { ... } }\n *\n *     schema.add({ age: Number });\n *     schema.paths; // { name: SchemaString { ... }, age: SchemaNumber { ... } }\n *\n * @api public\n * @property paths\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.paths;\n\n/**\n * Schema as a tree\n *\n * ####Example:\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.tree;\n\n/**\n * Returns a deep copy of the schema\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     const clone = schema.clone();\n *     clone === schema; // false\n *     clone.path('name'); // SchemaString { ... }\n *\n * @return {Schema} the cloned schema\n * @api public\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.clone = function() {\n  const Constructor = this.base == null ? Schema : this.base.Schema;\n\n  const s = new Constructor({}, this._userProvidedOptions);\n  s.base = this.base;\n  s.obj = this.obj;\n  s.options = utils.clone(this.options);\n  s.callQueue = this.callQueue.map(function(f) { return f; });\n  s.methods = utils.clone(this.methods);\n  s.methodOptions = utils.clone(this.methodOptions);\n  s.statics = utils.clone(this.statics);\n  s.query = utils.clone(this.query);\n  s.plugins = Array.prototype.slice.call(this.plugins);\n  s._indexes = utils.clone(this._indexes);\n  s.s.hooks = this.s.hooks.clone();\n\n  s.tree = utils.clone(this.tree);\n  s.paths = utils.clone(this.paths);\n  s.nested = utils.clone(this.nested);\n  s.subpaths = utils.clone(this.subpaths);\n  s.singleNestedPaths = utils.clone(this.singleNestedPaths);\n  s.childSchemas = gatherChildSchemas(s);\n\n  s.virtuals = utils.clone(this.virtuals);\n  s.$globalPluginsApplied = this.$globalPluginsApplied;\n  s.$isRootDiscriminator = this.$isRootDiscriminator;\n  s.$implicitlyCreated = this.$implicitlyCreated;\n  s.mapPaths = [].concat(this.mapPaths);\n\n  if (this.discriminatorMapping != null) {\n    s.discriminatorMapping = Object.assign({}, this.discriminatorMapping);\n  }\n  if (this.discriminators != null) {\n    s.discriminators = Object.assign({}, this.discriminators);\n  }\n\n  s.aliases = Object.assign({}, this.aliases);\n\n  // Bubble up `init` for backwards compat\n  s.on('init', v => this.emit('init', v));\n\n  return s;\n};\n\n/**\n * Returns a new schema that has the picked `paths` from this schema.\n *\n * This method is analagous to [Lodash's `pick()` function](https://lodash.com/docs/4.17.15#pick) for Mongoose schemas.\n *\n * ####Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema with the same `name` path as `schema`,\n *     // but no `age` path.\n *     const newSchema = schema.pick(['name']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {Array} paths list of paths to pick\n * @param {Object} [options] options to pass to the schema constructor. Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.pick = function(paths, options) {\n  const newSchema = new Schema({}, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#pick() only accepts an array argument, ' +\n      'got \"' + typeof paths + '\"');\n  }\n\n  for (const path of paths) {\n    if (this.nested[path]) {\n      newSchema.add({ [path]: get(this.tree, path) });\n    } else {\n      const schematype = this.path(path);\n      if (schematype == null) {\n        throw new MongooseError('Path `' + path + '` is not in the schema');\n      }\n      newSchema.add({ [path]: schematype });\n    }\n  }\n\n  return newSchema;\n};\n\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nSchema.prototype.defaultOptions = function(options) {\n  if (options && options.safe === false) {\n    options.safe = { w: 0 };\n  }\n\n  if (options && options.safe && options.safe.w === 0) {\n    // if you turn off safe writes, then versioning goes off as well\n    options.versionKey = false;\n  }\n\n  this._userProvidedOptions = options == null ? {} : utils.clone(options);\n\n  const baseOptions = get(this, 'base.options', {});\n  options = utils.options({\n    strict: 'strict' in baseOptions ? baseOptions.strict : true,\n    strictQuery: 'strictQuery' in baseOptions ? baseOptions.strictQuery : false,\n    bufferCommands: true,\n    capped: false, // { size, max, autoIndexId }\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    discriminatorKey: '__t',\n    minimize: true,\n    autoIndex: null,\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    // the following are only applied at construction time\n    noId: false, // deprecated, use { _id: false }\n    _id: true,\n    noVirtualId: false, // deprecated, use { id: false }\n    id: true,\n    typeKey: 'type',\n    typePojoToMixed: 'typePojoToMixed' in baseOptions ? baseOptions.typePojoToMixed : true\n  }, utils.clone(options));\n\n  if (options.read) {\n    options.read = readPref(options.read);\n  }\n\n  if (options.optimisticConcurrency && !options.versionKey) {\n    throw new MongooseError('Must set `versionKey` if using `optimisticConcurrency`');\n  }\n\n  return options;\n};\n\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * ####Example:\n *\n *     const ToySchema = new Schema();\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n *     const TurboManSchema = new Schema();\n *     // You can also `add()` another schema and copy over all paths, virtuals,\n *     // getters, setters, indexes, methods, and statics.\n *     TurboManSchema.add(ToySchema).add({ year: Number });\n *\n * @param {Object|Schema} obj plain object with paths to add, or another schema\n * @param {String} [prefix] path to prefix the newly added paths with\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.add = function add(obj, prefix) {\n  if (obj instanceof Schema || (obj != null && obj.instanceOfSchema)) {\n    merge(this, obj);\n\n    return this;\n  }\n\n  // Special case: setting top-level `_id` to false should convert to disabling\n  // the `_id` option. This behavior never worked before 5.4.11 but numerous\n  // codebases use it (see gh-7516, gh-7512).\n  if (obj._id === false && prefix == null) {\n    this.options._id = false;\n  }\n\n  prefix = prefix || '';\n  // avoid prototype pollution\n  if (prefix === '__proto__.' || prefix === 'constructor.' || prefix === 'prototype.') {\n    return this;\n  }\n\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    if (utils.specialProperties.has(key)) {\n      continue;\n    }\n\n    const fullPath = prefix + key;\n\n    if (obj[key] == null) {\n      throw new TypeError('Invalid value for schema path `' + fullPath +\n        '`, got value \"' + obj[key] + '\"');\n    }\n    // Retain `_id: false` but don't set it as a path, re: gh-8274.\n    if (key === '_id' && obj[key] === false) {\n      continue;\n    }\n    if (obj[key] instanceof VirtualType || get(obj[key], 'constructor.name', null) === 'VirtualType') {\n      this.virtual(obj[key]);\n      continue;\n    }\n\n    if (Array.isArray(obj[key]) && obj[key].length === 1 && obj[key][0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + fullPath +\n        '`, got value \"' + obj[key][0] + '\"');\n    }\n\n    if (!(utils.isPOJO(obj[key]) || obj[key] instanceof SchemaTypeOptions)) {\n      // Special-case: Non-options definitely a path so leaf at this node\n      // Examples: Schema instances, SchemaType instances\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n      this.path(prefix + key, obj[key]);\n    } else if (Object.keys(obj[key]).length < 1) {\n      // Special-case: {} always interpreted as Mixed path so leaf at this node\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n      this.path(fullPath, obj[key]); // mixed type\n    } else if (!obj[key][this.options.typeKey] || (this.options.typeKey === 'type' && obj[key].type.type)) {\n      // Special-case: POJO with no bona-fide type key - interpret as tree of deep paths so recurse\n      // nested object { last: { name: String }}\n      this.nested[fullPath] = true;\n      this.add(obj[key], fullPath + '.');\n    } else {\n      // There IS a bona-fide type key that may also be a POJO\n      if (!this.options.typePojoToMixed && utils.isPOJO(obj[key][this.options.typeKey])) {\n        // If a POJO is the value of a type key, make it a subdocument\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n        // Propage `typePojoToMixed` to implicitly created schemas\n        const opts = { typePojoToMixed: false };\n        const _schema = new Schema(obj[key][this.options.typeKey], opts);\n        const schemaWrappedPath = Object.assign({}, obj[key], { [this.options.typeKey]: _schema });\n        this.path(prefix + key, schemaWrappedPath);\n      } else {\n        // Either the type is non-POJO or we interpret it as Mixed anyway\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n        this.path(prefix + key, obj[key]);\n      }\n    }\n  }\n\n  const addedKeys = Object.keys(obj).\n    map(key => prefix ? prefix + key : key);\n  aliasFields(this, addedKeys);\n  return this;\n};\n\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are rejected in schema declarations\n * because they conflict with Mongoose functionality. If you create a schema\n * using `new Schema()` with one of these property names, Mongoose will throw\n * an error.\n *\n * - _posts\n * - _pres\n * - collection\n * - emit\n * - errors\n * - get\n * - init\n * - isModified\n * - isNew\n * - listeners\n * - modelName\n * - on\n * - once\n * - populated\n * - prototype\n * - remove\n * - removeListener\n * - save\n * - schema\n * - toObject\n * - validate\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      const schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n */\n\nSchema.reserved = Object.create(null);\nSchema.prototype.reserved = Schema.reserved;\nconst reserved = Schema.reserved;\n// Core object\nreserved['prototype'] =\n// EventEmitter\nreserved.emit =\nreserved.listeners =\nreserved.on =\nreserved.removeListener =\n// document properties and functions\nreserved.collection =\nreserved.errors =\nreserved.get =\nreserved.init =\nreserved.isModified =\nreserved.isNew =\nreserved.populated =\nreserved.remove =\nreserved.save =\nreserved.toObject =\nreserved.validate = 1;\n\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * ####Example\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path\n * @param {Object} constructor\n * @api public\n */\n\nSchema.prototype.path = function(path, obj) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n  if (obj === undefined) {\n    let schematype = _getPath(this, path, cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // Look for maps\n    const mapPath = getMapPath(this, path);\n    if (mapPath != null) {\n      return mapPath;\n    }\n\n    // Look if a parent of this path is mixed\n    schematype = this.hasMixedParent(cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // subpaths?\n    return /\\.\\d+\\.?.*$/.test(path)\n      ? getPositionalPath(this, path)\n      : undefined;\n  }\n\n  // some path names conflict with document methods\n  const firstPieceOfPath = path.split('.')[0];\n  if (reserved[firstPieceOfPath]) {\n    throw new Error('`' + firstPieceOfPath + '` may not be used as a schema pathname');\n  }\n\n  if (typeof obj === 'object' && utils.hasUserDefinedProperty(obj, 'ref')) {\n    validateRef(obj.ref, path);\n  }\n\n  // update the tree\n  const subpaths = path.split(/\\./);\n  const last = subpaths.pop();\n  let branch = this.tree;\n  let fullPath = '';\n\n  for (const sub of subpaths) {\n    if (utils.specialProperties.has(sub)) {\n      throw new Error('Cannot set special property `' + sub + '` on a schema');\n    }\n    fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;\n    if (!branch[sub]) {\n      this.nested[fullPath] = true;\n      branch[sub] = {};\n    }\n    if (typeof branch[sub] !== 'object') {\n      const msg = 'Cannot set nested path `' + path + '`. '\n          + 'Parent path `'\n          + fullPath\n          + '` already set to type ' + branch[sub].name\n          + '.';\n      throw new Error(msg);\n    }\n    branch = branch[sub];\n  }\n\n  branch[last] = utils.clone(obj);\n\n  this.paths[path] = this.interpretAsType(path, obj, this.options);\n  const schemaType = this.paths[path];\n\n  if (schemaType.$isSchemaMap) {\n    // Maps can have arbitrary keys, so `$*` is internal shorthand for \"any key\"\n    // The '$' is to imply this path should never be stored in MongoDB so we\n    // can easily build a regexp out of this path, and '*' to imply \"any key.\"\n    const mapPath = path + '.$*';\n    let _mapType = { type: {} };\n    if (utils.hasUserDefinedProperty(obj, 'of')) {\n      const isInlineSchema = utils.isPOJO(obj.of) &&\n        Object.keys(obj.of).length > 0 &&\n        !utils.hasUserDefinedProperty(obj.of, this.options.typeKey);\n      _mapType = isInlineSchema ? new Schema(obj.of) : obj.of;\n    }\n    if (utils.hasUserDefinedProperty(obj, 'ref')) {\n      _mapType = { type: _mapType, ref: obj.ref };\n    }\n\n    this.paths[mapPath] = this.interpretAsType(mapPath,\n      _mapType, this.options);\n    this.mapPaths.push(this.paths[mapPath]);\n    schemaType.$__schemaType = this.paths[mapPath];\n  }\n\n  if (schemaType.$isSingleNested) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.singleNestedPaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.subpaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.nested)) {\n      this.singleNestedPaths[path + '.' + key] = 'nested';\n    }\n\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.caster.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.caster\n    });\n  } else if (schemaType.$isMongooseDocumentArray) {\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.casterConstructor.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.casterConstructor\n    });\n  }\n\n  if (schemaType.$isMongooseArray && schemaType.caster instanceof SchemaType) {\n    let arrayPath = path;\n    let _schemaType = schemaType;\n\n    const toAdd = [];\n    while (_schemaType.$isMongooseArray) {\n      arrayPath = arrayPath + '.$';\n\n      // Skip arrays of document arrays\n      if (_schemaType.$isMongooseDocumentArray) {\n        _schemaType.$embeddedSchemaType._arrayPath = arrayPath;\n        _schemaType.$embeddedSchemaType._arrayParentPath = path;\n        _schemaType = _schemaType.$embeddedSchemaType.clone();\n      } else {\n        _schemaType.caster._arrayPath = arrayPath;\n        _schemaType.caster._arrayParentPath = path;\n        _schemaType = _schemaType.caster.clone();\n      }\n\n      _schemaType.path = arrayPath;\n      toAdd.push(_schemaType);\n    }\n\n    for (const _schemaType of toAdd) {\n      this.subpaths[_schemaType.path] = _schemaType;\n    }\n  }\n\n  if (schemaType.$isMongooseDocumentArray) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      const _schemaType = schemaType.schema.paths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      const _schemaType = schemaType.schema.subpaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      const _schemaType = schemaType.schema.singleNestedPaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction gatherChildSchemas(schema) {\n  const childSchemas = [];\n\n  for (const path of Object.keys(schema.paths)) {\n    const schematype = schema.paths[path];\n    if (schematype.$isMongooseDocumentArray || schematype.$isSingleNested) {\n      childSchemas.push({ schema: schematype.schema, model: schematype.caster });\n    }\n  }\n\n  return childSchemas;\n}\n\n/*!\n * ignore\n */\n\nfunction _getPath(schema, path, cleanPath) {\n  if (schema.paths.hasOwnProperty(path)) {\n    return schema.paths[path];\n  }\n  if (schema.subpaths.hasOwnProperty(cleanPath)) {\n    return schema.subpaths[cleanPath];\n  }\n  if (schema.singleNestedPaths.hasOwnProperty(cleanPath) && typeof schema.singleNestedPaths[cleanPath] === 'object') {\n    return schema.singleNestedPaths[cleanPath];\n  }\n\n  return null;\n}\n\n/*!\n * ignore\n */\n\nfunction _pathToPositionalSyntax(path) {\n  if (!/\\.\\d+/.test(path)) {\n    return path;\n  }\n  return path.replace(/\\.\\d+\\./g, '.$.').replace(/\\.\\d+$/, '.$');\n}\n\n/*!\n * ignore\n */\n\nfunction getMapPath(schema, path) {\n  if (schema.mapPaths.length === 0) {\n    return null;\n  }\n  for (const val of schema.mapPaths) {\n    const _path = val.path;\n    const re = new RegExp('^' + _path.replace(/\\.\\$\\*/g, '\\\\.[^.]+') + '$');\n    if (re.test(path)) {\n      return schema.paths[_path];\n    }\n  }\n\n  return null;\n}\n\n/**\n * The Mongoose instance this schema is associated with\n *\n * @property base\n * @api private\n */\n\nObject.defineProperty(Schema.prototype, 'base', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: null\n});\n\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @api private\n */\n\nSchema.prototype.interpretAsType = function(path, obj, options) {\n  if (obj instanceof SchemaType) {\n    if (obj.path === path) {\n      return obj;\n    }\n    const clone = obj.clone();\n    clone.path = path;\n    return clone;\n  }\n\n  // If this schema has an associated Mongoose object, use the Mongoose object's\n  // copy of SchemaTypes re: gh-7158 gh-6933\n  const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n\n  if (!utils.isPOJO(obj) && !(obj instanceof SchemaTypeOptions)) {\n    const constructorName = utils.getFunctionName(obj.constructor);\n    if (constructorName !== 'Object') {\n      const oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  }\n\n  // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n  let type = obj[options.typeKey] && (options.typeKey !== 'type' || !obj.type.type)\n    ? obj[options.typeKey]\n    : {};\n  let name;\n\n  if (utils.isPOJO(type) || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n\n  if (Array.isArray(type) || type === Array || type === 'array' || type === MongooseTypes.Array) {\n    // if it was specified through { type } look for `cast`\n    let cast = (type === Array || type === 'array')\n      ? obj.cast || obj.of\n      : type[0];\n\n    if (cast && cast.instanceOfSchema) {\n      if (!(cast instanceof Schema)) {\n        throw new TypeError('Schema for array path `' + path +\n          '` is from a different copy of the Mongoose module. Please make sure you\\'re using the same version ' +\n          'of Mongoose everywhere with `npm list mongoose`.');\n      }\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n    if (cast &&\n        cast[options.typeKey] &&\n        cast[options.typeKey].instanceOfSchema) {\n      if (!(cast[options.typeKey] instanceof Schema)) {\n        throw new TypeError('Schema for array path `' + path +\n          '` is from a different copy of the Mongoose module. Please make sure you\\'re using the same version ' +\n          'of Mongoose everywhere with `npm list mongoose`.');\n      }\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], obj, cast);\n    }\n\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, this.interpretAsType(path, cast, options), obj);\n    }\n\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (cast && (!cast[options.typeKey] || (options.typeKey === 'type' && cast.type.type))\n        && utils.isPOJO(cast)) {\n      if (Object.keys(cast).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        const childSchemaOptions = { minimize: options.minimize };\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (options.hasOwnProperty('strict')) {\n          childSchemaOptions.strict = options.strict;\n        }\n        if (options.hasOwnProperty('typePojoToMixed')) {\n          childSchemaOptions.typePojoToMixed = options.typePojoToMixed;\n        }\n\n        if (this._userProvidedOptions.hasOwnProperty('_id')) {\n          childSchemaOptions._id = this._userProvidedOptions._id;\n        } else if (Schema.Types.DocumentArray.defaultOptions &&\n            Schema.Types.DocumentArray.defaultOptions._id != null) {\n          childSchemaOptions._id = Schema.Types.DocumentArray.defaultOptions._id;\n        }\n\n        const childSchema = new Schema(cast, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)\n        ? cast[options.typeKey]\n        : cast;\n\n      name = typeof type === 'string'\n        ? type\n        : type.schemaName || utils.getFunctionName(type);\n\n      // For Jest 26+, see #10296\n      if (name === 'ClockDate') {\n        name = 'Date';\n      }\n\n      if (!MongooseTypes.hasOwnProperty(name)) {\n        throw new TypeError('Invalid schema configuration: ' +\n          `\\`${name}\\` is not a valid type within the array \\`${path}\\`.` +\n          'See http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n      }\n    }\n\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Embedded(type, path, obj);\n  }\n\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else if (typeof type === 'function' || typeof type === 'object') {\n    name = type.schemaName || utils.getFunctionName(type);\n  } else {\n    name = type == null ? '' + type : type.toString();\n  }\n\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  }\n  // Special case re: gh-7049 because the bson `ObjectID` class' capitalization\n  // doesn't line up with Mongoose's.\n  if (name === 'ObjectID') {\n    name = 'ObjectId';\n  }\n  // For Jest 26+, see #10296\n  if (name === 'ClockDate') {\n    name = 'Date';\n  }\n\n  if (MongooseTypes[name] == null) {\n    throw new TypeError(`Invalid schema configuration: \\`${name}\\` is not ` +\n      `a valid type at path \\`${path}\\`. See ` +\n      'http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n  }\n\n  return new MongooseTypes[name](path, obj);\n};\n\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and the schemaType instance.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({ name: String, registeredAt: Date });\n *     userSchema.eachPath((pathname, schematype) => {\n *       // Prints twice:\n *       // name SchemaString { ... }\n *       // registeredAt SchemaDate { ... }\n *       console.log(pathname, schematype);\n *     });\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\nSchema.prototype.eachPath = function(fn) {\n  const keys = Object.keys(this.paths);\n  const len = keys.length;\n\n  for (let i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n\n  return this;\n};\n\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * ####Example:\n *     const s = new Schema({\n *       name: { type: String, required: true },\n *       age: { type: String, required: true },\n *       notes: String\n *     });\n *     s.requiredPaths(); // [ 'age', 'name' ]\n *\n * @api public\n * @param {Boolean} invalidate refresh the cache\n * @return {Array}\n */\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n\n  const paths = Object.keys(this.paths);\n  let i = paths.length;\n  const ret = [];\n\n  while (i--) {\n    const path = paths[i];\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * ####Example:\n *     const s = new Schema({ name: String, nested: { foo: String } });\n *     s.virtual('foo').get(() => 42);\n *     s.pathType('name'); // \"real\"\n *     s.pathType('nested'); // \"nested\"\n *     s.pathType('foo'); // \"virtual\"\n *     s.pathType('fail'); // \"adhocOrUndefined\"\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\nSchema.prototype.pathType = function(path) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n\n  if (this.paths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  if (this.virtuals.hasOwnProperty(path)) {\n    return 'virtual';\n  }\n  if (this.nested.hasOwnProperty(path)) {\n    return 'nested';\n  }\n  if (this.subpaths.hasOwnProperty(cleanPath) || this.subpaths.hasOwnProperty(path)) {\n    return 'real';\n  }\n\n  const singleNestedPath = this.singleNestedPaths.hasOwnProperty(cleanPath) || this.singleNestedPaths.hasOwnProperty(path);\n  if (singleNestedPath) {\n    return singleNestedPath === 'nested' ? 'nested' : 'real';\n  }\n\n  // Look for maps\n  const mapPath = getMapPath(this, path);\n  if (mapPath != null) {\n    return 'real';\n  }\n\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path);\n  }\n  return 'adhocOrUndefined';\n};\n\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nSchema.prototype.hasMixedParent = function(path) {\n  const subpaths = path.split(/\\./g);\n  path = '';\n  for (let i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n    if (this.paths.hasOwnProperty(path) &&\n        this.paths[path] instanceof MongooseTypes.Mixed) {\n      return this.paths[path];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\nSchema.prototype.setupTimestamp = function(timestamps) {\n  return setupTimestamps(this, timestamps);\n};\n\n/*!\n * ignore. Deprecated re: #6405\n */\n\nfunction getPositionalPathType(self, path) {\n  const subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n  if (subpaths.length < 2) {\n    return self.paths.hasOwnProperty(subpaths[0]) ?\n      self.paths[subpaths[0]] :\n      'adhocOrUndefined';\n  }\n\n  let val = self.path(subpaths[0]);\n  let isNested = false;\n  if (!val) {\n    return 'adhocOrUndefined';\n  }\n\n  const last = subpaths.length - 1;\n\n  for (let i = 1; i < subpaths.length; ++i) {\n    isNested = false;\n    const subpath = subpaths[i];\n\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        val = val.$embeddedSchemaType;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n      break;\n    }\n\n    // ignore if its just a position segment: path.0.subpath\n    if (!/\\D/.test(subpath)) {\n      // Nested array\n      if (val instanceof MongooseTypes.Array && i !== last) {\n        val = val.caster;\n      }\n      continue;\n    }\n\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n\n    const type = val.schema.pathType(subpath);\n    isNested = (type === 'nested');\n    val = val.schema.path(subpath);\n  }\n\n  self.subpaths[path] = val;\n  if (val) {\n    return 'real';\n  }\n  if (isNested) {\n    return 'nested';\n  }\n  return 'adhocOrUndefined';\n}\n\n\n/*!\n * ignore\n */\n\nfunction getPositionalPath(self, path) {\n  getPositionalPathType(self, path);\n  return self.subpaths[path];\n}\n\n/**\n * Adds a method call to the queue.\n *\n * ####Example:\n *\n *     schema.methods.print = function() { console.log(this); };\n *     schema.queue('print', []); // Print the doc every one is instantiated\n *\n *     const Model = mongoose.model('Test', schema);\n *     new Model({ name: 'test' }); // Prints '{\"_id\": ..., \"name\": \"test\" }'\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\nSchema.prototype.queue = function(name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n\n/**\n * Defines a pre hook for the model.\n *\n * ####Example\n *\n *     const toySchema = new Schema({ name: String, created: Date });\n *\n *     toySchema.pre('save', function(next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     });\n *\n *     toySchema.pre('validate', function(next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     });\n *\n *     // Equivalent to calling `pre()` on `find`, `findOne`, `findOneAndUpdate`.\n *     toySchema.pre(/^find/, function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     // Equivalent to calling `pre()` on `updateOne`, `findOneAndUpdate`.\n *     toySchema.pre(['updateOne', 'findOneAndUpdate'], function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     toySchema.pre('deleteOne', function() {\n *       // Runs when you call `Toy.deleteOne()`\n *     });\n *\n *     toySchema.pre('deleteOne', { document: true }, function() {\n *       // Runs when you call `doc.deleteOne()`\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware. For example, set `options.document` to `true` to apply this hook to `Document#deleteOne()` rather than `Query#deleteOne()`.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} callback\n * @api public\n */\n\nSchema.prototype.pre = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.pre.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.pre.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Defines a post hook for the document\n *\n *     const schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     schema.post('find', function(docs) {\n *       console.log('this fired after you ran a find query');\n *     });\n *\n *     schema.post(/Many$/, function(res) {\n *       console.log('this fired after you ran `updateMany()` or `deleteMany()`);\n *     });\n *\n *     const Model = mongoose.model('Model', schema);\n *\n *     const m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} fn callback\n * @see middleware http://mongoosejs.com/docs/middleware.html\n * @see kareem http://npmjs.org/package/kareem\n * @api public\n */\n\nSchema.prototype.post = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.post.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.post.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.post.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Registers a plugin for this schema.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin(schema => console.log(schema.path('name').path));\n *     mongoose.model('Test', s); // Prints 'name'\n *\n * @param {Function} plugin callback\n * @param {Object} [opts]\n * @see plugins\n * @api public\n */\n\nSchema.prototype.plugin = function(fn, opts) {\n  if (typeof fn !== 'function') {\n    throw new Error('First param to `schema.plugin()` must be a function, ' +\n      'got \"' + (typeof fn) + '\"');\n  }\n\n  if (opts && opts.deduplicate) {\n    for (const plugin of this.plugins) {\n      if (plugin.fn === fn) {\n        return this;\n      }\n    }\n  }\n  this.plugins.push({ fn: fn, opts: opts });\n\n  fn(this, opts);\n  return this;\n};\n\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     const Kitty = mongoose.model('Kitty', schema);\n *\n *     const fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     fizz.purr();\n *     fizz.scratch();\n *\n * NOTE: `Schema.method()` adds instance methods to the `Schema.methods` object. You can also add instance methods directly to the `Schema.methods` object as seen in the [guide](/docs/guide.html#methods)\n *\n * @param {String|Object} method name\n * @param {Function} [fn]\n * @api public\n */\n\nSchema.prototype.method = function(name, fn, options) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.methods[i] = name[i];\n      this.methodOptions[i] = utils.clone(options);\n    }\n  } else {\n    this.methods[name] = fn;\n    this.methodOptions[name] = utils.clone(options);\n  }\n  return this;\n};\n\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = new Schema(..);\n *     // Equivalent to `schema.statics.findByName = function(name) {}`;\n *     schema.static('findByName', function(name) {\n *       return this.find({ name: name });\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name\n * @param {Function} [fn]\n * @api public\n * @see Statics /docs/guide.html#statics\n */\n\nSchema.prototype.static = function(name, fn) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * ####Example\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#createIndex)\n * @param {String | number} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @api public\n */\n\nSchema.prototype.index = function(fields, options) {\n  fields || (fields = {});\n  options || (options = {});\n\n  if (options.expires) {\n    utils.expires(options);\n  }\n\n  this._indexes.push([fields, options]);\n  return this;\n};\n\n/**\n * Sets a schema option.\n *\n * ####Example\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key option name\n * @param {Object} [value] if not passed, the current option value is returned\n * @see Schema ./\n * @api public\n */\n\nSchema.prototype.set = function(key, value, _tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  switch (key) {\n    case 'read':\n      this.options[key] = readPref(value, _tags);\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case 'safe':\n      setSafe(this.options, value);\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case '_id':\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n\n      if (value && !this.paths['_id']) {\n        addAutoId(this);\n      } else if (!value && this.paths['_id'] != null && this.paths['_id'].auto) {\n        this.remove('_id');\n      }\n      break;\n    default:\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nconst safeDeprecationWarning = 'Mongoose: The `safe` option for schemas is ' +\n  'deprecated. Use the `writeConcern` option instead: ' +\n  'http://bit.ly/mongoose-write-concern';\n\nconst setSafe = util.deprecate(function setSafe(options, value) {\n  options.safe = value === false ?\n    { w: 0 } :\n    value;\n}, safeDeprecationWarning);\n\n/**\n * Gets a schema option.\n *\n * ####Example:\n *\n *     schema.get('strict'); // true\n *     schema.set('strict', false);\n *     schema.get('strict'); // false\n *\n * @param {String} key option name\n * @api public\n * @return {Any} the option's value\n */\n\nSchema.prototype.get = function(key) {\n  return this.options[key];\n};\n\n/**\n * The allowed index types\n *\n * @receiver Schema\n * @static indexTypes\n * @api public\n */\n\nconst indexTypes = '2d 2dsphere hashed text'.split(' ');\n\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function() {\n    return indexTypes;\n  },\n  set: function() {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n\n/**\n * Returns a list of indexes that this schema declares, via `schema.index()` or by `index: true` in a path's options.\n * Indexes are expressed as an array `[spec, options]`.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({\n *       email: { type: String, required: true, unique: true },\n *       registeredAt: { type: Date, index: true }\n *     });\n *\n *     // [ [ { email: 1 }, { unique: true, background: true } ],\n *     //   [ { registeredAt: 1 }, { background: true } ] ]\n *     userSchema.indexes();\n *\n * [Plugins](/docs/plugins.html) can use the return value of this function to modify a schema's indexes.\n * For example, the below plugin makes every index unique by default.\n *\n *     function myPlugin(schema) {\n *       for (const index of schema.indexes()) {\n *         if (index[1].unique === undefined) {\n *           index[1].unique = true;\n *         }\n *       }\n *     }\n *\n * @api public\n * @return {Array} list of indexes defined in the schema\n */\n\nSchema.prototype.indexes = function() {\n  return getIndexes(this);\n};\n\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name\n * @param {Object} [options]\n * @param {String|Model} [options.ref] model name or model instance. Marks this as a [populate virtual](populate.html#populate-virtuals).\n * @param {String|Function} [options.localField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\n * @param {String|Function} [options.foreignField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\n * @param {Boolean|Function} [options.justOne=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), will be a single doc or `null`. Otherwise, the populate virtual will be an array.\n * @param {Boolean} [options.count=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), this populate virtual will contain the number of documents rather than the documents themselves when you `populate()`.\n * @param {Function|null} [options.get=null] Adds a [getter](/docs/tutorials/getters-setters.html) to this virtual to transform the populated doc.\n * @return {VirtualType}\n */\n\nSchema.prototype.virtual = function(name, options) {\n  if (name instanceof VirtualType || getConstructorName(name) === 'VirtualType') {\n    return this.virtual(name.path, name.options);\n  }\n\n  options = new VirtualOptions(options);\n\n  if (utils.hasUserDefinedProperty(options, ['ref', 'refPath'])) {\n    if (options.localField == null) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n\n    if (options.foreignField == null) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n\n    this.pre('init', function(obj) {\n      if (mpath.has(name, obj)) {\n        const _v = mpath.get(name, obj);\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n        }\n\n        mpath.unset(name, obj);\n      }\n    });\n\n    const virtual = this.virtual(name);\n    virtual.options = options;\n\n    virtual.\n      set(function(_v) {\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n\n          if (typeof this.$$populatedVirtuals[name] !== 'object') {\n            this.$$populatedVirtuals[name] = options.count ? _v : null;\n          }\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n\n          this.$$populatedVirtuals[name] = this.$$populatedVirtuals[name].filter(function(doc) {\n            return doc && typeof doc === 'object';\n          });\n        }\n      });\n\n    if (typeof options.get === 'function') {\n      virtual.get(options.get);\n    }\n\n    return virtual;\n  }\n\n  const virtuals = this.virtuals;\n  const parts = name.split('.');\n\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' +\n      ' conflicts with a real path in the schema');\n  }\n\n  virtuals[name] = parts.reduce(function(mem, part, i) {\n    mem[part] || (mem[part] = (i === parts.length - 1)\n      ? new VirtualType(options, name)\n      : {});\n    return mem[part];\n  }, this.tree);\n\n  // Workaround for gh-8198: if virtual is under document array, make a fake\n  // virtual. See gh-8210\n  let cur = parts[0];\n  for (let i = 0; i < parts.length - 1; ++i) {\n    if (this.paths[cur] != null && this.paths[cur].$isMongooseDocumentArray) {\n      const remnant = parts.slice(i + 1).join('.');\n      const v = this.paths[cur].schema.virtual(remnant);\n      v.get((v, virtual, doc) => {\n        const parent = doc.__parentArray[arrayParentSymbol];\n        const path = cur + '.' + doc.__index + '.' + remnant;\n        return parent.get(path);\n      });\n      break;\n    }\n\n    cur += '.' + parts[i + 1];\n  }\n\n  return virtuals[name];\n};\n\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name\n * @return {VirtualType}\n */\n\nSchema.prototype.virtualpath = function(name) {\n  return this.virtuals.hasOwnProperty(name) ? this.virtuals[name] : null;\n};\n\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String, age: Number });\n *     schema.remove('name');\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // SchemaNumber { ... }\n *\n * @param {String|Array} path\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.remove = function(path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    path.forEach(function(name) {\n      if (this.path(name) == null && !this.nested[name]) {\n        return;\n      }\n      if (this.nested[name]) {\n        const allKeys = Object.keys(this.paths).\n          concat(Object.keys(this.nested));\n        for (const path of allKeys) {\n          if (path.startsWith(name + '.')) {\n            delete this.paths[path];\n            delete this.nested[path];\n            _deletePath(this, path);\n          }\n        }\n\n        delete this.nested[name];\n        _deletePath(this, name);\n        return;\n      }\n\n      delete this.paths[name];\n      _deletePath(this, name);\n    }, this);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _deletePath(schema, name) {\n  const pieces = name.split('.');\n  const last = pieces.pop();\n\n  let branch = schema.tree;\n\n  for (const piece of pieces) {\n    branch = branch[piece];\n  }\n\n  delete branch[last];\n}\n\n/**\n * Loads an ES6 class into a schema. Maps [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) + [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [static methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static),\n * and [instance methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions)\n * to schema [virtuals](/docs/guide.html#virtuals),\n * [statics](/docs/guide.html#statics), and\n * [methods](/docs/guide.html#methods).\n *\n * ####Example:\n *\n * ```javascript\n * const md5 = require('md5');\n * const userSchema = new Schema({ email: String });\n * class UserClass {\n *   // `gravatarImage` becomes a virtual\n *   get gravatarImage() {\n *     const hash = md5(this.email.toLowerCase());\n *     return `https://www.gravatar.com/avatar/${hash}`;\n *   }\n *\n *   // `getProfileUrl()` becomes a document method\n *   getProfileUrl() {\n *     return `https://mysite.com/${this.email}`;\n *   }\n *\n *   // `findByEmail()` becomes a static\n *   static findByEmail(email) {\n *     return this.findOne({ email });\n *   }\n * }\n *\n * // `schema` will now have a `gravatarImage` virtual, a `getProfileUrl()` method,\n * // and a `findByEmail()` static\n * userSchema.loadClass(UserClass);\n * ```\n *\n * @param {Function} model\n * @param {Boolean} [virtualsOnly] if truthy, only pulls virtuals from the class, not methods or statics\n */\nSchema.prototype.loadClass = function(model, virtualsOnly) {\n  if (model === Object.prototype ||\n      model === Function.prototype ||\n      model.prototype.hasOwnProperty('$isMongooseModelPrototype')) {\n    return this;\n  }\n\n  this.loadClass(Object.getPrototypeOf(model), virtualsOnly);\n\n  // Add static methods\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function(name) {\n      if (name.match(/^(length|name|prototype|constructor|__proto__)$/)) {\n        return;\n      }\n      const prop = Object.getOwnPropertyDescriptor(model, name);\n      if (prop.hasOwnProperty('value')) {\n        this.static(name, prop.value);\n      }\n    }, this);\n  }\n\n  // Add methods and virtuals\n  Object.getOwnPropertyNames(model.prototype).forEach(function(name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n    const method = Object.getOwnPropertyDescriptor(model.prototype, name);\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n    if (typeof method.get === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].getters = [];\n      }\n      this.virtual(name).get(method.get);\n    }\n    if (typeof method.set === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].setters = [];\n      }\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getSchema = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n  const resultPath = [];\n\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        resultPath.push(trypath);\n\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length) {\n            if (foundschema.schema) {\n              let ret;\n              if (parts[p] === '$' || isArrayFilter(parts[p])) {\n                if (p + 1 === parts.length) {\n                  // comments.$\n                  return foundschema;\n                }\n                // comments.$.comments.$.title\n                ret = search(parts.slice(p + 1), foundschema.schema);\n                if (ret) {\n                  ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                    !foundschema.schema.$isSingleNested;\n                }\n                return ret;\n              }\n              // this is the last path of the selector\n              ret = search(parts.slice(p), foundschema.schema);\n              if (ret) {\n                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                  !foundschema.schema.$isSingleNested;\n              }\n              return ret;\n            }\n          }\n        } else if (foundschema.$isSchemaMap) {\n          if (p + 1 >= parts.length) {\n            return foundschema;\n          }\n          const ret = search(parts.slice(p + 1), foundschema.$__schemaType.schema);\n          return ret;\n        }\n\n        foundschema.$fullPath = resultPath.join('.');\n\n        return foundschema;\n      }\n    }\n  }\n\n  // look for arrays\n  const parts = path.split('.');\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n  }\n  return search(parts, _this);\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getPathType = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n\n  if (pathschema) {\n    return 'real';\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return { schema: foundschema, pathType: 'mixed' };\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p === parts.length - 1) {\n                return { schema: foundschema, pathType: 'nested' };\n              }\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            }\n            // this is the last path of the selector\n            return search(parts.slice(p), foundschema.schema);\n          }\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n        return { schema: foundschema, pathType: 'real' };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return { schema: schema, pathType: 'nested' };\n      }\n    }\n    return { schema: foundschema || schema, pathType: 'undefined' };\n  }\n\n  // look for arrays\n  return search(path.split('.'), _this);\n};\n\n/*!\n * ignore\n */\n\nfunction isArrayFilter(piece) {\n  return piece.startsWith('$[') && piece.endsWith(']');\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Schema;\n\n// require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * ####Types:\n *\n * - [String](/docs/schematypes.html#strings)\n * - [Number](/docs/schematypes.html#numbers)\n * - [Boolean](/docs/schematypes.html#booleans) | Bool\n * - [Array](/docs/schematypes.html#arrays)\n * - [Buffer](/docs/schematypes.html#buffers)\n * - [Date](/docs/schematypes.html#dates)\n * - [ObjectId](/docs/schematypes.html#objectids) | Oid\n * - [Mixed](/docs/schematypes.html#mixed)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     const Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}