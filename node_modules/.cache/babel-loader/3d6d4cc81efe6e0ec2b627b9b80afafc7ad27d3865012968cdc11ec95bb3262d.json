{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst Binary = require('../driver').get().Binary;\nconst Decimal128 = require('../types/decimal128');\nconst ObjectId = require('../types/objectid');\nconst isMongooseObject = require('./isMongooseObject');\nexports.flatten = flatten;\nexports.modifiedPaths = modifiedPaths;\n\n/*!\n * ignore\n */\n\nfunction flatten(update, path, options, schema) {\n  let keys;\n  if (update && isMongooseObject(update) && !Buffer.isBuffer(update)) {\n    keys = Object.keys(update.toObject({\n      transform: false,\n      virtuals: false\n    }));\n  } else {\n    keys = Object.keys(update || {});\n  }\n  const numKeys = keys.length;\n  const result = {};\n  path = path ? path + '.' : '';\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    const val = update[key];\n    result[path + key] = val;\n\n    // Avoid going into mixed paths if schema is specified\n    const keySchema = schema && schema.path && schema.path(path + key);\n    const isNested = schema && schema.nested && schema.nested[path + key];\n    if (keySchema && keySchema.instance === 'Mixed') continue;\n    if (shouldFlatten(val)) {\n      if (options && options.skipArrays && Array.isArray(val)) {\n        continue;\n      }\n      const flat = flatten(val, path + key, options, schema);\n      for (const k in flat) {\n        result[k] = flat[k];\n      }\n      if (Array.isArray(val)) {\n        result[path + key] = val;\n      }\n    }\n    if (isNested) {\n      const paths = Object.keys(schema.paths);\n      for (const p of paths) {\n        if (p.startsWith(path + key + '.') && !result.hasOwnProperty(p)) {\n          result[p] = void 0;\n        }\n      }\n    }\n  }\n  return result;\n}\n\n/*!\n * ignore\n */\n\nfunction modifiedPaths(update, path, result) {\n  const keys = Object.keys(update || {});\n  const numKeys = keys.length;\n  result = result || {};\n  path = path ? path + '.' : '';\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    let val = update[key];\n    result[path + key] = true;\n    if (isMongooseObject(val) && !Buffer.isBuffer(val)) {\n      val = val.toObject({\n        transform: false,\n        virtuals: false\n      });\n    }\n    if (shouldFlatten(val)) {\n      modifiedPaths(val, path + key, result);\n    }\n  }\n  return result;\n}\n\n/*!\n * ignore\n */\n\nfunction shouldFlatten(val) {\n  return val && typeof val === 'object' && !(val instanceof Date) && !(val instanceof ObjectId) && (!Array.isArray(val) || val.length > 0) && !(val instanceof Buffer) && !(val instanceof Decimal128) && !(val instanceof Binary);\n}","map":{"version":3,"names":["Binary","require","get","Decimal128","ObjectId","isMongooseObject","exports","flatten","modifiedPaths","update","path","options","schema","keys","Buffer","isBuffer","Object","toObject","transform","virtuals","numKeys","length","result","i","key","val","keySchema","isNested","nested","instance","shouldFlatten","skipArrays","Array","isArray","flat","k","paths","p","startsWith","hasOwnProperty","Date"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/helpers/common.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst Binary = require('../driver').get().Binary;\nconst Decimal128 = require('../types/decimal128');\nconst ObjectId = require('../types/objectid');\nconst isMongooseObject = require('./isMongooseObject');\n\nexports.flatten = flatten;\nexports.modifiedPaths = modifiedPaths;\n\n/*!\n * ignore\n */\n\nfunction flatten(update, path, options, schema) {\n  let keys;\n  if (update && isMongooseObject(update) && !Buffer.isBuffer(update)) {\n    keys = Object.keys(update.toObject({ transform: false, virtuals: false }));\n  } else {\n    keys = Object.keys(update || {});\n  }\n\n  const numKeys = keys.length;\n  const result = {};\n  path = path ? path + '.' : '';\n\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    const val = update[key];\n    result[path + key] = val;\n\n    // Avoid going into mixed paths if schema is specified\n    const keySchema = schema && schema.path && schema.path(path + key);\n    const isNested = schema && schema.nested && schema.nested[path + key];\n    if (keySchema && keySchema.instance === 'Mixed') continue;\n\n    if (shouldFlatten(val)) {\n      if (options && options.skipArrays && Array.isArray(val)) {\n        continue;\n      }\n      const flat = flatten(val, path + key, options, schema);\n      for (const k in flat) {\n        result[k] = flat[k];\n      }\n      if (Array.isArray(val)) {\n        result[path + key] = val;\n      }\n    }\n\n    if (isNested) {\n      const paths = Object.keys(schema.paths);\n      for (const p of paths) {\n        if (p.startsWith(path + key + '.') && !result.hasOwnProperty(p)) {\n          result[p] = void 0;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n/*!\n * ignore\n */\n\nfunction modifiedPaths(update, path, result) {\n  const keys = Object.keys(update || {});\n  const numKeys = keys.length;\n  result = result || {};\n  path = path ? path + '.' : '';\n\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    let val = update[key];\n\n    result[path + key] = true;\n    if (isMongooseObject(val) && !Buffer.isBuffer(val)) {\n      val = val.toObject({ transform: false, virtuals: false });\n    }\n    if (shouldFlatten(val)) {\n      modifiedPaths(val, path + key, result);\n    }\n  }\n\n  return result;\n}\n\n/*!\n * ignore\n */\n\nfunction shouldFlatten(val) {\n  return val &&\n    typeof val === 'object' &&\n    !(val instanceof Date) &&\n    !(val instanceof ObjectId) &&\n    (!Array.isArray(val) || val.length > 0) &&\n    !(val instanceof Buffer) &&\n    !(val instanceof Decimal128) &&\n    !(val instanceof Binary);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}