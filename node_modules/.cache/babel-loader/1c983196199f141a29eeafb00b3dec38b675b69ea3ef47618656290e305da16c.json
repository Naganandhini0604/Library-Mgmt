{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies\n */\nconst AggregationCursor = require('./cursor/AggregationCursor');\nconst Query = require('./query');\nconst applyGlobalMaxTimeMS = require('./helpers/query/applyGlobalMaxTimeMS');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\nconst stringifyFunctionOperators = require('./helpers/aggregate/stringifyFunctionOperators');\nconst util = require('util');\nconst utils = require('./utils');\nconst read = Query.prototype.read;\nconst readConcern = Query.prototype.readConcern;\n\n/**\n * Aggregate constructor used for building aggregation pipelines. Do not\n * instantiate this class directly, use [Model.aggregate()](/docs/api.html#model_Model.aggregate) instead.\n *\n * ####Example:\n *\n *     const aggregate = Model.aggregate([\n *       { $project: { a: 1, b: 1 } },\n *       { $skip: 5 }\n *     ]);\n *\n *     Model.\n *       aggregate([{ $match: { age: { $gte: 21 }}}]).\n *       unwind('tags').\n *       exec(callback);\n *\n * ####Note:\n *\n * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n * - Mongoose does **not** cast pipeline stages. The below will **not** work unless `_id` is a string in the database\n *\n * ```javascript\n *   new Aggregate([{ $match: { _id: '00000000000000000000000a' } }]);\n *   // Do this instead to cast to an ObjectId\n *   new Aggregate([{ $match: { _id: mongoose.Types.ObjectId('00000000000000000000000a') } }]);\n * ```\n *\n * @see MongoDB http://docs.mongodb.org/manual/applications/aggregation/\n * @see driver http://mongodb.github.com/node-mongodb-native/api-generated/collection.html#aggregate\n * @param {Array} [pipeline] aggregation pipeline as an array of objects\n * @api public\n */\n\nfunction Aggregate(pipeline) {\n  this._pipeline = [];\n  this._model = undefined;\n  this.options = {};\n  if (arguments.length === 1 && util.isArray(pipeline)) {\n    this.append.apply(this, pipeline);\n  }\n}\n\n/**\n * Contains options passed down to the [aggregate command](https://docs.mongodb.com/manual/reference/command/aggregate/).\n * Supported options are:\n *\n * - `readPreference`\n * - [`cursor`](./api.html#aggregate_Aggregate-cursor)\n * - [`explain`](./api.html#aggregate_Aggregate-explain)\n * - [`allowDiskUse`](./api.html#aggregate_Aggregate-allowDiskUse)\n * - `maxTimeMS`\n * - `bypassDocumentValidation`\n * - `raw`\n * - `promoteLongs`\n * - `promoteValues`\n * - `promoteBuffers`\n * - [`collation`](./api.html#aggregate_Aggregate-collation)\n * - `comment`\n * - [`session`](./api.html#aggregate_Aggregate-session)\n *\n * @property options\n * @memberOf Aggregate\n * @api public\n */\n\nAggregate.prototype.options;\n\n/**\n * Get/set the model that this aggregation will execute on.\n *\n * ####Example:\n *     const aggregate = MyModel.aggregate([{ $match: { answer: 42 } }]);\n *     aggregate.model() === MyModel; // true\n *\n *     // Change the model. There's rarely any reason to do this.\n *     aggregate.model(SomeOtherModel);\n *     aggregate.model() === SomeOtherModel; // true\n *\n * @param {Model} [model] the model to which the aggregate is to be bound\n * @return {Aggregate|Model} if model is passed, will return `this`, otherwise will return the model\n * @api public\n */\n\nAggregate.prototype.model = function (model) {\n  if (arguments.length === 0) {\n    return this._model;\n  }\n  this._model = model;\n  if (model.schema != null) {\n    if (this.options.readPreference == null && model.schema.options.read != null) {\n      this.options.readPreference = model.schema.options.read;\n    }\n    if (this.options.collation == null && model.schema.options.collation != null) {\n      this.options.collation = model.schema.options.collation;\n    }\n  }\n  return this;\n};\n\n/**\n * Appends new operators to this aggregate pipeline\n *\n * ####Examples:\n *\n *     aggregate.append({ $project: { field: 1 }}, { $limit: 2 });\n *\n *     // or pass an array\n *     const pipeline = [{ $match: { daw: 'Logic Audio X' }} ];\n *     aggregate.append(pipeline);\n *\n * @param {Object} ops operator(s) to append\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.append = function () {\n  const args = arguments.length === 1 && util.isArray(arguments[0]) ? arguments[0] : utils.args(arguments);\n  if (!args.every(isOperator)) {\n    throw new Error('Arguments must be aggregate pipeline operators');\n  }\n  this._pipeline = this._pipeline.concat(args);\n  return this;\n};\n\n/**\n * Appends a new $addFields operator to this aggregate pipeline.\n * Requires MongoDB v3.4+ to work\n *\n * ####Examples:\n  *\n *     // adding new fields based on existing fields\n *     aggregate.addFields({\n *         newField: '$b.nested'\n *       , plusTen: { $add: ['$val', 10]}\n *       , sub: {\n *            name: '$a'\n *         }\n *     })\n *\n *     // etc\n *     aggregate.addFields({ salary_k: { $divide: [ \"$salary\", 1000 ] } });\n *\n * @param {Object} arg field specification\n * @see $addFields https://docs.mongodb.com/manual/reference/operator/aggregation/addFields/\n * @return {Aggregate}\n * @api public\n */\nAggregate.prototype.addFields = function (arg) {\n  const fields = {};\n  if (typeof arg === 'object' && !util.isArray(arg)) {\n    Object.keys(arg).forEach(function (field) {\n      fields[field] = arg[field];\n    });\n  } else {\n    throw new Error('Invalid addFields() argument. Must be an object');\n  }\n  return this.append({\n    $addFields: fields\n  });\n};\n\n/**\n * Appends a new $project operator to this aggregate pipeline.\n *\n * Mongoose query [selection syntax](#query_Query-select) is also supported.\n *\n * ####Examples:\n *\n *     // include a, include b, exclude _id\n *     aggregate.project(\"a b -_id\");\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     aggregate.project({a: 1, b: 1, _id: 0});\n *\n *     // reshaping documents\n *     aggregate.project({\n *         newField: '$b.nested'\n *       , plusTen: { $add: ['$val', 10]}\n *       , sub: {\n *            name: '$a'\n *         }\n *     })\n *\n *     // etc\n *     aggregate.project({ salary_k: { $divide: [ \"$salary\", 1000 ] } });\n *\n * @param {Object|String} arg field specification\n * @see projection http://docs.mongodb.org/manual/reference/aggregation/project/\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.project = function (arg) {\n  const fields = {};\n  if (typeof arg === 'object' && !util.isArray(arg)) {\n    Object.keys(arg).forEach(function (field) {\n      fields[field] = arg[field];\n    });\n  } else if (arguments.length === 1 && typeof arg === 'string') {\n    arg.split(/\\s+/).forEach(function (field) {\n      if (!field) {\n        return;\n      }\n      const include = field[0] === '-' ? 0 : 1;\n      if (include === 0) {\n        field = field.substring(1);\n      }\n      fields[field] = include;\n    });\n  } else {\n    throw new Error('Invalid project() argument. Must be string or object');\n  }\n  return this.append({\n    $project: fields\n  });\n};\n\n/**\n * Appends a new custom $group operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.group({ _id: \"$department\" });\n *\n * @see $group http://docs.mongodb.org/manual/reference/aggregation/group/\n * @method group\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg $group operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new custom $match operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.match({ department: { $in: [ \"sales\", \"engineering\" ] } });\n *\n * @see $match http://docs.mongodb.org/manual/reference/aggregation/match/\n * @method match\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg $match operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $skip operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.skip(10);\n *\n * @see $skip http://docs.mongodb.org/manual/reference/aggregation/skip/\n * @method skip\n * @memberOf Aggregate\n * @instance\n * @param {Number} num number of records to skip before next stage\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $limit operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.limit(10);\n *\n * @see $limit http://docs.mongodb.org/manual/reference/aggregation/limit/\n * @method limit\n * @memberOf Aggregate\n * @instance\n * @param {Number} num maximum number of records to pass to the next stage\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $geoNear operator to this aggregate pipeline.\n *\n * ####NOTE:\n *\n * **MUST** be used as the first operator in the pipeline.\n *\n * ####Examples:\n *\n *     aggregate.near({\n *       near: [40.724, -73.997],\n *       distanceField: \"dist.calculated\", // required\n *       maxDistance: 0.008,\n *       query: { type: \"public\" },\n *       includeLocs: \"dist.location\",\n *       uniqueDocs: true,\n *       num: 5\n *     });\n *\n * @see $geoNear http://docs.mongodb.org/manual/reference/aggregation/geoNear/\n * @method near\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.near = function (arg) {\n  const op = {};\n  op.$geoNear = arg;\n  return this.append(op);\n};\n\n/*!\n * define methods\n */\n\n'group match skip limit out'.split(' ').forEach(function ($operator) {\n  Aggregate.prototype[$operator] = function (arg) {\n    const op = {};\n    op['$' + $operator] = arg;\n    return this.append(op);\n  };\n});\n\n/**\n * Appends new custom $unwind operator(s) to this aggregate pipeline.\n *\n * Note that the `$unwind` operator requires the path name to start with '$'.\n * Mongoose will prepend '$' if the specified field doesn't start '$'.\n *\n * ####Examples:\n *\n *     aggregate.unwind(\"tags\");\n *     aggregate.unwind(\"a\", \"b\", \"c\");\n *     aggregate.unwind({ path: '$tags', preserveNullAndEmptyArrays: true });\n *\n * @see $unwind http://docs.mongodb.org/manual/reference/aggregation/unwind/\n * @param {String|Object} fields the field(s) to unwind, either as field names or as [objects with options](https://docs.mongodb.com/manual/reference/operator/aggregation/unwind/#document-operand-with-options). If passing a string, prefixing the field name with '$' is optional. If passing an object, `path` must start with '$'.\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.unwind = function () {\n  const args = utils.args(arguments);\n  const res = [];\n  for (const arg of args) {\n    if (arg && typeof arg === 'object') {\n      res.push({\n        $unwind: arg\n      });\n    } else if (typeof arg === 'string') {\n      res.push({\n        $unwind: arg && arg.startsWith('$') ? arg : '$' + arg\n      });\n    } else {\n      throw new Error('Invalid arg \"' + arg + '\" to unwind(), ' + 'must be string or object');\n    }\n  }\n  return this.append.apply(this, res);\n};\n\n/**\n * Appends a new $replaceRoot operator to this aggregate pipeline.\n *\n * Note that the `$replaceRoot` operator requires field strings to start with '$'.\n * If you are passing in a string Mongoose will prepend '$' if the specified field doesn't start '$'.\n * If you are passing in an object the strings in your expression will not be altered.\n *\n * ####Examples:\n *\n *     aggregate.replaceRoot(\"user\");\n *\n *     aggregate.replaceRoot({ x: { $concat: ['$this', '$that'] } });\n *\n * @see $replaceRoot https://docs.mongodb.org/manual/reference/operator/aggregation/replaceRoot\n * @param {String|Object} the field or document which will become the new root document\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.replaceRoot = function (newRoot) {\n  let ret;\n  if (typeof newRoot === 'string') {\n    ret = newRoot.startsWith('$') ? newRoot : '$' + newRoot;\n  } else {\n    ret = newRoot;\n  }\n  return this.append({\n    $replaceRoot: {\n      newRoot: ret\n    }\n  });\n};\n\n/**\n * Appends a new $count operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.count(\"userCount\");\n *\n * @see $count https://docs.mongodb.org/manual/reference/operator/aggregation/count\n * @param {String} the name of the count field\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.count = function (countName) {\n  return this.append({\n    $count: countName\n  });\n};\n\n/**\n * Appends a new $sortByCount operator to this aggregate pipeline. Accepts either a string field name\n * or a pipeline object.\n *\n * Note that the `$sortByCount` operator requires the new root to start with '$'.\n * Mongoose will prepend '$' if the specified field name doesn't start with '$'.\n *\n * ####Examples:\n *\n *     aggregate.sortByCount('users');\n *     aggregate.sortByCount({ $mergeObjects: [ \"$employee\", \"$business\" ] })\n *\n * @see $sortByCount https://docs.mongodb.com/manual/reference/operator/aggregation/sortByCount/\n * @param {Object|String} arg\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.sortByCount = function (arg) {\n  if (arg && typeof arg === 'object') {\n    return this.append({\n      $sortByCount: arg\n    });\n  } else if (typeof arg === 'string') {\n    return this.append({\n      $sortByCount: arg && arg.startsWith('$') ? arg : '$' + arg\n    });\n  } else {\n    throw new TypeError('Invalid arg \"' + arg + '\" to sortByCount(), ' + 'must be string or object');\n  }\n};\n\n/**\n * Appends new custom $lookup operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.lookup({ from: 'users', localField: 'userId', foreignField: '_id', as: 'users' });\n *\n * @see $lookup https://docs.mongodb.org/manual/reference/operator/aggregation/lookup/#pipe._S_lookup\n * @param {Object} options to $lookup as described in the above link\n * @return {Aggregate}* @api public\n */\n\nAggregate.prototype.lookup = function (options) {\n  return this.append({\n    $lookup: options\n  });\n};\n\n/**\n * Appends new custom $graphLookup operator(s) to this aggregate pipeline, performing a recursive search on a collection.\n *\n * Note that graphLookup can only consume at most 100MB of memory, and does not allow disk use even if `{ allowDiskUse: true }` is specified.\n *\n * #### Examples:\n *      // Suppose we have a collection of courses, where a document might look like `{ _id: 0, name: 'Calculus', prerequisite: 'Trigonometry'}` and `{ _id: 0, name: 'Trigonometry', prerequisite: 'Algebra' }`\n *      aggregate.graphLookup({ from: 'courses', startWith: '$prerequisite', connectFromField: 'prerequisite', connectToField: 'name', as: 'prerequisites', maxDepth: 3 }) // this will recursively search the 'courses' collection up to 3 prerequisites\n *\n * @see $graphLookup https://docs.mongodb.com/manual/reference/operator/aggregation/graphLookup/#pipe._S_graphLookup\n * @param {Object} options to $graphLookup as described in the above link\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.graphLookup = function (options) {\n  const cloneOptions = {};\n  if (options) {\n    if (!utils.isObject(options)) {\n      throw new TypeError('Invalid graphLookup() argument. Must be an object.');\n    }\n    utils.mergeClone(cloneOptions, options);\n    const startWith = cloneOptions.startWith;\n    if (startWith && typeof startWith === 'string') {\n      cloneOptions.startWith = cloneOptions.startWith.startsWith('$') ? cloneOptions.startWith : '$' + cloneOptions.startWith;\n    }\n  }\n  return this.append({\n    $graphLookup: cloneOptions\n  });\n};\n\n/**\n * Appends new custom $sample operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.sample(3); // Add a pipeline that picks 3 random documents\n *\n * @see $sample https://docs.mongodb.org/manual/reference/operator/aggregation/sample/#pipe._S_sample\n * @param {Number} size number of random documents to pick\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.sample = function (size) {\n  return this.append({\n    $sample: {\n      size: size\n    }\n  });\n};\n\n/**\n * Appends a new $sort operator to this aggregate pipeline.\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * ####Examples:\n *\n *     // these are equivalent\n *     aggregate.sort({ field: 'asc', test: -1 });\n *     aggregate.sort('field -test');\n *\n * @see $sort http://docs.mongodb.org/manual/reference/aggregation/sort/\n * @param {Object|String} arg\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.sort = function (arg) {\n  // TODO refactor to reuse the query builder logic\n\n  const sort = {};\n  if (getConstructorName(arg) === 'Object') {\n    const desc = ['desc', 'descending', -1];\n    Object.keys(arg).forEach(function (field) {\n      // If sorting by text score, skip coercing into 1/-1\n      if (arg[field] instanceof Object && arg[field].$meta) {\n        sort[field] = arg[field];\n        return;\n      }\n      sort[field] = desc.indexOf(arg[field]) === -1 ? 1 : -1;\n    });\n  } else if (arguments.length === 1 && typeof arg === 'string') {\n    arg.split(/\\s+/).forEach(function (field) {\n      if (!field) {\n        return;\n      }\n      const ascend = field[0] === '-' ? -1 : 1;\n      if (ascend === -1) {\n        field = field.substring(1);\n      }\n      sort[field] = ascend;\n    });\n  } else {\n    throw new TypeError('Invalid sort() argument. Must be a string or object.');\n  }\n  return this.append({\n    $sort: sort\n  });\n};\n\n/**\n * Sets the readPreference option for the aggregation query.\n *\n * ####Example:\n *\n *     Model.aggregate(..).read('primaryPreferred').exec(callback)\n *\n * @param {String} pref one of the listed preference options or their aliases\n * @param {Array} [tags] optional tags for this query\n * @return {Aggregate} this\n * @api public\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n */\n\nAggregate.prototype.read = function (pref, tags) {\n  if (!this.options) {\n    this.options = {};\n  }\n  read.call(this, pref, tags);\n  return this;\n};\n\n/**\n * Sets the readConcern level for the aggregation query.\n *\n * ####Example:\n *\n *     Model.aggregate(..).readConcern('majority').exec(callback)\n *\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.readConcern = function (level) {\n  if (!this.options) {\n    this.options = {};\n  }\n  readConcern.call(this, level);\n  return this;\n};\n\n/**\n * Appends a new $redact operator to this aggregate pipeline.\n *\n * If 3 arguments are supplied, Mongoose will wrap them with if-then-else of $cond operator respectively\n * If `thenExpr` or `elseExpr` is string, make sure it starts with $$, like `$$DESCEND`, `$$PRUNE` or `$$KEEP`.\n *\n * ####Example:\n *\n *     Model.aggregate(...)\n *      .redact({\n *        $cond: {\n *          if: { $eq: [ '$level', 5 ] },\n *          then: '$$PRUNE',\n *          else: '$$DESCEND'\n *        }\n *      })\n *      .exec();\n *\n *     // $redact often comes with $cond operator, you can also use the following syntax provided by mongoose\n *     Model.aggregate(...)\n *      .redact({ $eq: [ '$level', 5 ] }, '$$PRUNE', '$$DESCEND')\n *      .exec();\n *\n * @param {Object} expression redact options or conditional expression\n * @param {String|Object} [thenExpr] true case for the condition\n * @param {String|Object} [elseExpr] false case for the condition\n * @return {Aggregate} this\n * @see $redact https://docs.mongodb.com/manual/reference/operator/aggregation/redact/\n * @api public\n */\n\nAggregate.prototype.redact = function (expression, thenExpr, elseExpr) {\n  if (arguments.length === 3) {\n    if (typeof thenExpr === 'string' && !thenExpr.startsWith('$$') || typeof elseExpr === 'string' && !elseExpr.startsWith('$$')) {\n      throw new Error('If thenExpr or elseExpr is string, it must start with $$. e.g. $$DESCEND, $$PRUNE, $$KEEP');\n    }\n    expression = {\n      $cond: {\n        if: expression,\n        then: thenExpr,\n        else: elseExpr\n      }\n    };\n  } else if (arguments.length !== 1) {\n    throw new TypeError('Invalid arguments');\n  }\n  return this.append({\n    $redact: expression\n  });\n};\n\n/**\n * Execute the aggregation with explain\n *\n * ####Example:\n *\n *     Model.aggregate(..).explain(callback)\n *\n * @param {Function} callback\n * @return {Promise}\n */\n\nAggregate.prototype.explain = function (callback) {\n  const model = this._model;\n  return promiseOrCallback(callback, cb => {\n    if (!this._pipeline.length) {\n      const err = new Error('Aggregate has empty pipeline');\n      return cb(err);\n    }\n    prepareDiscriminatorPipeline(this);\n    model.hooks.execPre('aggregate', this, error => {\n      if (error) {\n        const _opts = {\n          error: error\n        };\n        return model.hooks.execPost('aggregate', this, [null], _opts, error => {\n          cb(error);\n        });\n      }\n      this.options.explain = true;\n      model.collection.aggregate(this._pipeline, this.options || {}).explain((error, result) => {\n        const _opts = {\n          error: error\n        };\n        return model.hooks.execPost('aggregate', this, [result], _opts, error => {\n          if (error) {\n            return cb(error);\n          }\n          return cb(null, result);\n        });\n      });\n    });\n  }, model.events);\n};\n\n/**\n * Sets the allowDiskUse option for the aggregation query (ignored for < 2.6.0)\n *\n * ####Example:\n *\n *     await Model.aggregate([{ $match: { foo: 'bar' } }]).allowDiskUse(true);\n *\n * @param {Boolean} value Should tell server it can use hard drive to store data during aggregation.\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.allowDiskUse = function (value) {\n  this.options.allowDiskUse = value;\n  return this;\n};\n\n/**\n * Sets the hint option for the aggregation query (ignored for < 3.6.0)\n *\n * ####Example:\n *\n *     Model.aggregate(..).hint({ qty: 1, category: 1 }).exec(callback)\n *\n * @param {Object|String} value a hint object or the index name\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.hint = function (value) {\n  this.options.hint = value;\n  return this;\n};\n\n/**\n * Sets the session for this aggregation. Useful for [transactions](/docs/transactions.html).\n *\n * ####Example:\n *\n *     const session = await Model.startSession();\n *     await Model.aggregate(..).session(session);\n *\n * @param {ClientSession} session\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.session = function (session) {\n  if (session == null) {\n    delete this.options.session;\n  } else {\n    this.options.session = session;\n  }\n  return this;\n};\n\n/**\n * Lets you set arbitrary options, for middleware or plugins.\n *\n * ####Example:\n *\n *     const agg = Model.aggregate(..).option({ allowDiskUse: true }); // Set the `allowDiskUse` option\n *     agg.options; // `{ allowDiskUse: true }`\n *\n * @param {Object} options keys to merge into current options\n * @param [options.maxTimeMS] number limits the time this aggregation will run, see [MongoDB docs on `maxTimeMS`](https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/)\n * @param [options.allowDiskUse] boolean if true, the MongoDB server will use the hard drive to store data during this aggregation\n * @param [options.collation] object see [`Aggregate.prototype.collation()`](./docs/api.html#aggregate_Aggregate-collation)\n * @param [options.session] ClientSession see [`Aggregate.prototype.session()`](./docs/api.html#aggregate_Aggregate-session)\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.option = function (value) {\n  for (const key in value) {\n    this.options[key] = value[key];\n  }\n  return this;\n};\n\n/**\n * Sets the cursor option option for the aggregation query (ignored for < 2.6.0).\n * Note the different syntax below: .exec() returns a cursor object, and no callback\n * is necessary.\n *\n * ####Example:\n *\n *     const cursor = Model.aggregate(..).cursor({ batchSize: 1000 }).exec();\n *     cursor.eachAsync(function(doc, i) {\n *       // use doc\n *     });\n *\n * @param {Object} options\n * @param {Number} options.batchSize set the cursor batch size\n * @param {Boolean} [options.useMongooseAggCursor] use experimental mongoose-specific aggregation cursor (for `eachAsync()` and other query cursor semantics)\n * @return {Aggregate} this\n * @api public\n * @see mongodb http://mongodb.github.io/node-mongodb-native/2.0/api/AggregationCursor.html\n */\n\nAggregate.prototype.cursor = function (options) {\n  if (!this.options) {\n    this.options = {};\n  }\n  this.options.cursor = options || {};\n  return this;\n};\n\n/**\n * Sets an option on this aggregation. This function will be deprecated in a\n * future release. Use the [`cursor()`](./api.html#aggregate_Aggregate-cursor),\n * [`collation()`](./api.html#aggregate_Aggregate-collation), etc. helpers to\n * set individual options, or access `agg.options` directly.\n *\n * Note that MongoDB aggregations [do **not** support the `noCursorTimeout` flag](https://jira.mongodb.org/browse/SERVER-6036),\n * if you try setting that flag with this function you will get a \"unrecognized field 'noCursorTimeout'\" error.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {Aggregate} this\n * @api public\n * @deprecated Use [`.option()`](api.html#aggregate_Aggregate-option) instead. Note that MongoDB aggregations do **not** support a `noCursorTimeout` option.\n */\n\nAggregate.prototype.addCursorFlag = util.deprecate(function (flag, value) {\n  if (!this.options) {\n    this.options = {};\n  }\n  this.options[flag] = value;\n  return this;\n}, 'Mongoose: `Aggregate#addCursorFlag()` is deprecated, use `option()` instead');\n\n/**\n * Adds a collation\n *\n * ####Example:\n *\n *     Model.aggregate(..).collation({ locale: 'en_US', strength: 1 }).exec();\n *\n * @param {Object} collation options\n * @return {Aggregate} this\n * @api public\n * @see mongodb http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#aggregate\n */\n\nAggregate.prototype.collation = function (collation) {\n  if (!this.options) {\n    this.options = {};\n  }\n  this.options.collation = collation;\n  return this;\n};\n\n/**\n * Combines multiple aggregation pipelines.\n *\n * ####Example:\n *\n *     Model.aggregate(...)\n *      .facet({\n *        books: [{ groupBy: '$author' }],\n *        price: [{ $bucketAuto: { groupBy: '$price', buckets: 2 } }]\n *      })\n *      .exec();\n *\n *     // Output: { books: [...], price: [{...}, {...}] }\n *\n * @param {Object} facet options\n * @return {Aggregate} this\n * @see $facet https://docs.mongodb.com/v3.4/reference/operator/aggregation/facet/\n * @api public\n */\n\nAggregate.prototype.facet = function (options) {\n  return this.append({\n    $facet: options\n  });\n};\n\n/**\n * Helper for [Atlas Text Search](https://docs.atlas.mongodb.com/reference/atlas-search/tutorial/)'s\n * `$search` stage.\n *\n * ####Example:\n *\n *     Model.aggregate().\n *      search({\n *        text: {\n *          query: 'baseball',\n *          path: 'plot'\n *        }\n *      });\n *\n *     // Output: [{ plot: '...', title: '...' }]\n *\n * @param {Object} $search options\n * @return {Aggregate} this\n * @see $search https://docs.atlas.mongodb.com/reference/atlas-search/tutorial/\n * @api public\n */\n\nAggregate.prototype.search = function (options) {\n  return this.append({\n    $search: options\n  });\n};\n\n/**\n * Returns the current pipeline\n *\n * ####Example:\n *\n *     MyModel.aggregate().match({ test: 1 }).pipeline(); // [{ $match: { test: 1 } }]\n *\n * @return {Array}\n * @api public\n */\n\nAggregate.prototype.pipeline = function () {\n  return this._pipeline;\n};\n\n/**\n * Executes the aggregate pipeline on the currently bound Model.\n *\n * ####Example:\n *\n *     aggregate.exec(callback);\n *\n *     // Because a promise is returned, the `callback` is optional.\n *     const promise = aggregate.exec();\n *     promise.then(..);\n *\n * @see Promise #promise_Promise\n * @param {Function} [callback]\n * @return {Promise}\n * @api public\n */\n\nAggregate.prototype.exec = function (callback) {\n  if (!this._model) {\n    throw new Error('Aggregate not bound to any Model');\n  }\n  const model = this._model;\n  const collection = this._model.collection;\n  applyGlobalMaxTimeMS(this.options, model);\n  if (this.options && this.options.cursor) {\n    return new AggregationCursor(this);\n  }\n  return promiseOrCallback(callback, cb => {\n    prepareDiscriminatorPipeline(this);\n    stringifyFunctionOperators(this._pipeline);\n    model.hooks.execPre('aggregate', this, error => {\n      if (error) {\n        const _opts = {\n          error: error\n        };\n        return model.hooks.execPost('aggregate', this, [null], _opts, error => {\n          cb(error);\n        });\n      }\n      if (!this._pipeline.length) {\n        return cb(new Error('Aggregate has empty pipeline'));\n      }\n      const options = utils.clone(this.options || {});\n      collection.aggregate(this._pipeline, options, (error, cursor) => {\n        if (error) {\n          const _opts = {\n            error: error\n          };\n          return model.hooks.execPost('aggregate', this, [null], _opts, error => {\n            if (error) {\n              return cb(error);\n            }\n            return cb(null);\n          });\n        }\n        cursor.toArray((error, result) => {\n          const _opts = {\n            error: error\n          };\n          model.hooks.execPost('aggregate', this, [result], _opts, (error, result) => {\n            if (error) {\n              return cb(error);\n            }\n            cb(null, result);\n          });\n        });\n      });\n    });\n  }, model.events);\n};\n\n/**\n * Provides promise for aggregate.\n *\n * ####Example:\n *\n *     Model.aggregate(..).then(successCallback, errorCallback);\n *\n * @see Promise #promise_Promise\n * @param {Function} [resolve] successCallback\n * @param {Function} [reject]  errorCallback\n * @return {Promise}\n */\nAggregate.prototype.then = function (resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n * Like [`.then()`](#query_Query-then), but only takes a rejection handler.\n *\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nAggregate.prototype.catch = function (reject) {\n  return this.exec().then(null, reject);\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * ####Example\n *\n *     const agg = Model.aggregate([{ $match: { age: { $gte: 25 } } }]);\n *     for await (const doc of agg) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not set if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf Aggregate\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  Aggregate.prototype[Symbol.asyncIterator] = function () {\n    return this.cursor({\n      useMongooseAggCursor: true\n    }).exec().transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * Helpers\n */\n\n/**\n * Checks whether an object is likely a pipeline operator\n *\n * @param {Object} obj object to check\n * @return {Boolean}\n * @api private\n */\n\nfunction isOperator(obj) {\n  if (typeof obj !== 'object') {\n    return false;\n  }\n  const k = Object.keys(obj);\n  return k.length === 1 && k.some(key => {\n    return key[0] === '$';\n  });\n}\n\n/*!\n * Adds the appropriate `$match` pipeline step to the top of an aggregate's\n * pipeline, should it's model is a non-root discriminator type. This is\n * analogous to the `prepareDiscriminatorCriteria` function in `lib/query.js`.\n *\n * @param {Aggregate} aggregate Aggregate to prepare\n */\n\nAggregate._prepareDiscriminatorPipeline = prepareDiscriminatorPipeline;\nfunction prepareDiscriminatorPipeline(aggregate) {\n  const schema = aggregate._model.schema;\n  const discriminatorMapping = schema && schema.discriminatorMapping;\n  if (discriminatorMapping && !discriminatorMapping.isRoot) {\n    const originalPipeline = aggregate._pipeline;\n    const discriminatorKey = discriminatorMapping.key;\n    const discriminatorValue = discriminatorMapping.value;\n\n    // If the first pipeline stage is a match and it doesn't specify a `__t`\n    // key, add the discriminator key to it. This allows for potential\n    // aggregation query optimizations not to be disturbed by this feature.\n    if (originalPipeline[0] && originalPipeline[0].$match && !originalPipeline[0].$match[discriminatorKey]) {\n      originalPipeline[0].$match[discriminatorKey] = discriminatorValue;\n      // `originalPipeline` is a ref, so there's no need for\n      // aggregate._pipeline = originalPipeline\n    } else if (originalPipeline[0] && originalPipeline[0].$geoNear) {\n      originalPipeline[0].$geoNear.query = originalPipeline[0].$geoNear.query || {};\n      originalPipeline[0].$geoNear.query[discriminatorKey] = discriminatorValue;\n    } else if (originalPipeline[0] && originalPipeline[0].$search) {\n      if (originalPipeline[1] && originalPipeline[1].$match != null) {\n        originalPipeline[1].$match[discriminatorKey] = originalPipeline[1].$match[discriminatorKey] || discriminatorValue;\n      } else {\n        const match = {};\n        match[discriminatorKey] = discriminatorValue;\n        originalPipeline.splice(1, 0, {\n          $match: match\n        });\n      }\n    } else {\n      const match = {};\n      match[discriminatorKey] = discriminatorValue;\n      aggregate._pipeline.unshift({\n        $match: match\n      });\n    }\n  }\n}\n\n/*!\n * Exports\n */\n\nmodule.exports = Aggregate;","map":{"version":3,"names":["AggregationCursor","require","Query","applyGlobalMaxTimeMS","getConstructorName","promiseOrCallback","stringifyFunctionOperators","util","utils","read","prototype","readConcern","Aggregate","pipeline","_pipeline","_model","undefined","options","arguments","length","isArray","append","apply","model","schema","readPreference","collation","args","every","isOperator","Error","concat","addFields","arg","fields","Object","keys","forEach","field","$addFields","project","split","include","substring","$project","near","op","$geoNear","$operator","unwind","res","push","$unwind","startsWith","replaceRoot","newRoot","ret","$replaceRoot","count","countName","$count","sortByCount","$sortByCount","TypeError","lookup","$lookup","graphLookup","cloneOptions","isObject","mergeClone","startWith","$graphLookup","sample","size","$sample","sort","desc","$meta","indexOf","ascend","$sort","pref","tags","call","level","redact","expression","thenExpr","elseExpr","$cond","if","then","else","$redact","explain","callback","cb","err","prepareDiscriminatorPipeline","hooks","execPre","error","_opts","execPost","collection","aggregate","result","events","allowDiskUse","value","hint","session","option","key","cursor","addCursorFlag","deprecate","flag","facet","$facet","search","$search","exec","clone","toArray","resolve","reject","catch","Symbol","asyncIterator","useMongooseAggCursor","transformNull","_transformForAsyncIterator","obj","k","some","_prepareDiscriminatorPipeline","discriminatorMapping","isRoot","originalPipeline","discriminatorKey","discriminatorValue","$match","query","match","splice","unshift","module","exports"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/aggregate.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies\n */\n\nconst AggregationCursor = require('./cursor/AggregationCursor');\nconst Query = require('./query');\nconst applyGlobalMaxTimeMS = require('./helpers/query/applyGlobalMaxTimeMS');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\nconst stringifyFunctionOperators = require('./helpers/aggregate/stringifyFunctionOperators');\nconst util = require('util');\nconst utils = require('./utils');\nconst read = Query.prototype.read;\nconst readConcern = Query.prototype.readConcern;\n\n/**\n * Aggregate constructor used for building aggregation pipelines. Do not\n * instantiate this class directly, use [Model.aggregate()](/docs/api.html#model_Model.aggregate) instead.\n *\n * ####Example:\n *\n *     const aggregate = Model.aggregate([\n *       { $project: { a: 1, b: 1 } },\n *       { $skip: 5 }\n *     ]);\n *\n *     Model.\n *       aggregate([{ $match: { age: { $gte: 21 }}}]).\n *       unwind('tags').\n *       exec(callback);\n *\n * ####Note:\n *\n * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n * - Mongoose does **not** cast pipeline stages. The below will **not** work unless `_id` is a string in the database\n *\n * ```javascript\n *   new Aggregate([{ $match: { _id: '00000000000000000000000a' } }]);\n *   // Do this instead to cast to an ObjectId\n *   new Aggregate([{ $match: { _id: mongoose.Types.ObjectId('00000000000000000000000a') } }]);\n * ```\n *\n * @see MongoDB http://docs.mongodb.org/manual/applications/aggregation/\n * @see driver http://mongodb.github.com/node-mongodb-native/api-generated/collection.html#aggregate\n * @param {Array} [pipeline] aggregation pipeline as an array of objects\n * @api public\n */\n\nfunction Aggregate(pipeline) {\n  this._pipeline = [];\n  this._model = undefined;\n  this.options = {};\n\n  if (arguments.length === 1 && util.isArray(pipeline)) {\n    this.append.apply(this, pipeline);\n  }\n}\n\n/**\n * Contains options passed down to the [aggregate command](https://docs.mongodb.com/manual/reference/command/aggregate/).\n * Supported options are:\n *\n * - `readPreference`\n * - [`cursor`](./api.html#aggregate_Aggregate-cursor)\n * - [`explain`](./api.html#aggregate_Aggregate-explain)\n * - [`allowDiskUse`](./api.html#aggregate_Aggregate-allowDiskUse)\n * - `maxTimeMS`\n * - `bypassDocumentValidation`\n * - `raw`\n * - `promoteLongs`\n * - `promoteValues`\n * - `promoteBuffers`\n * - [`collation`](./api.html#aggregate_Aggregate-collation)\n * - `comment`\n * - [`session`](./api.html#aggregate_Aggregate-session)\n *\n * @property options\n * @memberOf Aggregate\n * @api public\n */\n\nAggregate.prototype.options;\n\n/**\n * Get/set the model that this aggregation will execute on.\n *\n * ####Example:\n *     const aggregate = MyModel.aggregate([{ $match: { answer: 42 } }]);\n *     aggregate.model() === MyModel; // true\n *\n *     // Change the model. There's rarely any reason to do this.\n *     aggregate.model(SomeOtherModel);\n *     aggregate.model() === SomeOtherModel; // true\n *\n * @param {Model} [model] the model to which the aggregate is to be bound\n * @return {Aggregate|Model} if model is passed, will return `this`, otherwise will return the model\n * @api public\n */\n\nAggregate.prototype.model = function(model) {\n  if (arguments.length === 0) {\n    return this._model;\n  }\n\n  this._model = model;\n  if (model.schema != null) {\n    if (this.options.readPreference == null &&\n        model.schema.options.read != null) {\n      this.options.readPreference = model.schema.options.read;\n    }\n    if (this.options.collation == null &&\n        model.schema.options.collation != null) {\n      this.options.collation = model.schema.options.collation;\n    }\n  }\n  return this;\n};\n\n/**\n * Appends new operators to this aggregate pipeline\n *\n * ####Examples:\n *\n *     aggregate.append({ $project: { field: 1 }}, { $limit: 2 });\n *\n *     // or pass an array\n *     const pipeline = [{ $match: { daw: 'Logic Audio X' }} ];\n *     aggregate.append(pipeline);\n *\n * @param {Object} ops operator(s) to append\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.append = function() {\n  const args = (arguments.length === 1 && util.isArray(arguments[0]))\n    ? arguments[0]\n    : utils.args(arguments);\n\n  if (!args.every(isOperator)) {\n    throw new Error('Arguments must be aggregate pipeline operators');\n  }\n\n  this._pipeline = this._pipeline.concat(args);\n\n  return this;\n};\n\n/**\n * Appends a new $addFields operator to this aggregate pipeline.\n * Requires MongoDB v3.4+ to work\n *\n * ####Examples:\n  *\n *     // adding new fields based on existing fields\n *     aggregate.addFields({\n *         newField: '$b.nested'\n *       , plusTen: { $add: ['$val', 10]}\n *       , sub: {\n *            name: '$a'\n *         }\n *     })\n *\n *     // etc\n *     aggregate.addFields({ salary_k: { $divide: [ \"$salary\", 1000 ] } });\n *\n * @param {Object} arg field specification\n * @see $addFields https://docs.mongodb.com/manual/reference/operator/aggregation/addFields/\n * @return {Aggregate}\n * @api public\n */\nAggregate.prototype.addFields = function(arg) {\n  const fields = {};\n  if (typeof arg === 'object' && !util.isArray(arg)) {\n    Object.keys(arg).forEach(function(field) {\n      fields[field] = arg[field];\n    });\n  } else {\n    throw new Error('Invalid addFields() argument. Must be an object');\n  }\n  return this.append({ $addFields: fields });\n};\n\n/**\n * Appends a new $project operator to this aggregate pipeline.\n *\n * Mongoose query [selection syntax](#query_Query-select) is also supported.\n *\n * ####Examples:\n *\n *     // include a, include b, exclude _id\n *     aggregate.project(\"a b -_id\");\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     aggregate.project({a: 1, b: 1, _id: 0});\n *\n *     // reshaping documents\n *     aggregate.project({\n *         newField: '$b.nested'\n *       , plusTen: { $add: ['$val', 10]}\n *       , sub: {\n *            name: '$a'\n *         }\n *     })\n *\n *     // etc\n *     aggregate.project({ salary_k: { $divide: [ \"$salary\", 1000 ] } });\n *\n * @param {Object|String} arg field specification\n * @see projection http://docs.mongodb.org/manual/reference/aggregation/project/\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.project = function(arg) {\n  const fields = {};\n\n  if (typeof arg === 'object' && !util.isArray(arg)) {\n    Object.keys(arg).forEach(function(field) {\n      fields[field] = arg[field];\n    });\n  } else if (arguments.length === 1 && typeof arg === 'string') {\n    arg.split(/\\s+/).forEach(function(field) {\n      if (!field) {\n        return;\n      }\n      const include = field[0] === '-' ? 0 : 1;\n      if (include === 0) {\n        field = field.substring(1);\n      }\n      fields[field] = include;\n    });\n  } else {\n    throw new Error('Invalid project() argument. Must be string or object');\n  }\n\n  return this.append({ $project: fields });\n};\n\n/**\n * Appends a new custom $group operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.group({ _id: \"$department\" });\n *\n * @see $group http://docs.mongodb.org/manual/reference/aggregation/group/\n * @method group\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg $group operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new custom $match operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.match({ department: { $in: [ \"sales\", \"engineering\" ] } });\n *\n * @see $match http://docs.mongodb.org/manual/reference/aggregation/match/\n * @method match\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg $match operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $skip operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.skip(10);\n *\n * @see $skip http://docs.mongodb.org/manual/reference/aggregation/skip/\n * @method skip\n * @memberOf Aggregate\n * @instance\n * @param {Number} num number of records to skip before next stage\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $limit operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.limit(10);\n *\n * @see $limit http://docs.mongodb.org/manual/reference/aggregation/limit/\n * @method limit\n * @memberOf Aggregate\n * @instance\n * @param {Number} num maximum number of records to pass to the next stage\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $geoNear operator to this aggregate pipeline.\n *\n * ####NOTE:\n *\n * **MUST** be used as the first operator in the pipeline.\n *\n * ####Examples:\n *\n *     aggregate.near({\n *       near: [40.724, -73.997],\n *       distanceField: \"dist.calculated\", // required\n *       maxDistance: 0.008,\n *       query: { type: \"public\" },\n *       includeLocs: \"dist.location\",\n *       uniqueDocs: true,\n *       num: 5\n *     });\n *\n * @see $geoNear http://docs.mongodb.org/manual/reference/aggregation/geoNear/\n * @method near\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.near = function(arg) {\n  const op = {};\n  op.$geoNear = arg;\n  return this.append(op);\n};\n\n/*!\n * define methods\n */\n\n'group match skip limit out'.split(' ').forEach(function($operator) {\n  Aggregate.prototype[$operator] = function(arg) {\n    const op = {};\n    op['$' + $operator] = arg;\n    return this.append(op);\n  };\n});\n\n/**\n * Appends new custom $unwind operator(s) to this aggregate pipeline.\n *\n * Note that the `$unwind` operator requires the path name to start with '$'.\n * Mongoose will prepend '$' if the specified field doesn't start '$'.\n *\n * ####Examples:\n *\n *     aggregate.unwind(\"tags\");\n *     aggregate.unwind(\"a\", \"b\", \"c\");\n *     aggregate.unwind({ path: '$tags', preserveNullAndEmptyArrays: true });\n *\n * @see $unwind http://docs.mongodb.org/manual/reference/aggregation/unwind/\n * @param {String|Object} fields the field(s) to unwind, either as field names or as [objects with options](https://docs.mongodb.com/manual/reference/operator/aggregation/unwind/#document-operand-with-options). If passing a string, prefixing the field name with '$' is optional. If passing an object, `path` must start with '$'.\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.unwind = function() {\n  const args = utils.args(arguments);\n\n  const res = [];\n  for (const arg of args) {\n    if (arg && typeof arg === 'object') {\n      res.push({ $unwind: arg });\n    } else if (typeof arg === 'string') {\n      res.push({\n        $unwind: (arg && arg.startsWith('$')) ? arg : '$' + arg\n      });\n    } else {\n      throw new Error('Invalid arg \"' + arg + '\" to unwind(), ' +\n        'must be string or object');\n    }\n  }\n\n  return this.append.apply(this, res);\n};\n\n/**\n * Appends a new $replaceRoot operator to this aggregate pipeline.\n *\n * Note that the `$replaceRoot` operator requires field strings to start with '$'.\n * If you are passing in a string Mongoose will prepend '$' if the specified field doesn't start '$'.\n * If you are passing in an object the strings in your expression will not be altered.\n *\n * ####Examples:\n *\n *     aggregate.replaceRoot(\"user\");\n *\n *     aggregate.replaceRoot({ x: { $concat: ['$this', '$that'] } });\n *\n * @see $replaceRoot https://docs.mongodb.org/manual/reference/operator/aggregation/replaceRoot\n * @param {String|Object} the field or document which will become the new root document\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.replaceRoot = function(newRoot) {\n  let ret;\n\n  if (typeof newRoot === 'string') {\n    ret = newRoot.startsWith('$') ? newRoot : '$' + newRoot;\n  } else {\n    ret = newRoot;\n  }\n\n  return this.append({\n    $replaceRoot: {\n      newRoot: ret\n    }\n  });\n};\n\n/**\n * Appends a new $count operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.count(\"userCount\");\n *\n * @see $count https://docs.mongodb.org/manual/reference/operator/aggregation/count\n * @param {String} the name of the count field\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.count = function(countName) {\n  return this.append({ $count: countName });\n};\n\n/**\n * Appends a new $sortByCount operator to this aggregate pipeline. Accepts either a string field name\n * or a pipeline object.\n *\n * Note that the `$sortByCount` operator requires the new root to start with '$'.\n * Mongoose will prepend '$' if the specified field name doesn't start with '$'.\n *\n * ####Examples:\n *\n *     aggregate.sortByCount('users');\n *     aggregate.sortByCount({ $mergeObjects: [ \"$employee\", \"$business\" ] })\n *\n * @see $sortByCount https://docs.mongodb.com/manual/reference/operator/aggregation/sortByCount/\n * @param {Object|String} arg\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.sortByCount = function(arg) {\n  if (arg && typeof arg === 'object') {\n    return this.append({ $sortByCount: arg });\n  } else if (typeof arg === 'string') {\n    return this.append({\n      $sortByCount: (arg && arg.startsWith('$')) ? arg : '$' + arg\n    });\n  } else {\n    throw new TypeError('Invalid arg \"' + arg + '\" to sortByCount(), ' +\n      'must be string or object');\n  }\n};\n\n/**\n * Appends new custom $lookup operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.lookup({ from: 'users', localField: 'userId', foreignField: '_id', as: 'users' });\n *\n * @see $lookup https://docs.mongodb.org/manual/reference/operator/aggregation/lookup/#pipe._S_lookup\n * @param {Object} options to $lookup as described in the above link\n * @return {Aggregate}* @api public\n */\n\nAggregate.prototype.lookup = function(options) {\n  return this.append({ $lookup: options });\n};\n\n/**\n * Appends new custom $graphLookup operator(s) to this aggregate pipeline, performing a recursive search on a collection.\n *\n * Note that graphLookup can only consume at most 100MB of memory, and does not allow disk use even if `{ allowDiskUse: true }` is specified.\n *\n * #### Examples:\n *      // Suppose we have a collection of courses, where a document might look like `{ _id: 0, name: 'Calculus', prerequisite: 'Trigonometry'}` and `{ _id: 0, name: 'Trigonometry', prerequisite: 'Algebra' }`\n *      aggregate.graphLookup({ from: 'courses', startWith: '$prerequisite', connectFromField: 'prerequisite', connectToField: 'name', as: 'prerequisites', maxDepth: 3 }) // this will recursively search the 'courses' collection up to 3 prerequisites\n *\n * @see $graphLookup https://docs.mongodb.com/manual/reference/operator/aggregation/graphLookup/#pipe._S_graphLookup\n * @param {Object} options to $graphLookup as described in the above link\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.graphLookup = function(options) {\n  const cloneOptions = {};\n  if (options) {\n    if (!utils.isObject(options)) {\n      throw new TypeError('Invalid graphLookup() argument. Must be an object.');\n    }\n\n    utils.mergeClone(cloneOptions, options);\n    const startWith = cloneOptions.startWith;\n\n    if (startWith && typeof startWith === 'string') {\n      cloneOptions.startWith = cloneOptions.startWith.startsWith('$') ?\n        cloneOptions.startWith :\n        '$' + cloneOptions.startWith;\n    }\n\n  }\n  return this.append({ $graphLookup: cloneOptions });\n};\n\n/**\n * Appends new custom $sample operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.sample(3); // Add a pipeline that picks 3 random documents\n *\n * @see $sample https://docs.mongodb.org/manual/reference/operator/aggregation/sample/#pipe._S_sample\n * @param {Number} size number of random documents to pick\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.sample = function(size) {\n  return this.append({ $sample: { size: size } });\n};\n\n/**\n * Appends a new $sort operator to this aggregate pipeline.\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * ####Examples:\n *\n *     // these are equivalent\n *     aggregate.sort({ field: 'asc', test: -1 });\n *     aggregate.sort('field -test');\n *\n * @see $sort http://docs.mongodb.org/manual/reference/aggregation/sort/\n * @param {Object|String} arg\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.sort = function(arg) {\n  // TODO refactor to reuse the query builder logic\n\n  const sort = {};\n\n  if (getConstructorName(arg) === 'Object') {\n    const desc = ['desc', 'descending', -1];\n    Object.keys(arg).forEach(function(field) {\n      // If sorting by text score, skip coercing into 1/-1\n      if (arg[field] instanceof Object && arg[field].$meta) {\n        sort[field] = arg[field];\n        return;\n      }\n      sort[field] = desc.indexOf(arg[field]) === -1 ? 1 : -1;\n    });\n  } else if (arguments.length === 1 && typeof arg === 'string') {\n    arg.split(/\\s+/).forEach(function(field) {\n      if (!field) {\n        return;\n      }\n      const ascend = field[0] === '-' ? -1 : 1;\n      if (ascend === -1) {\n        field = field.substring(1);\n      }\n      sort[field] = ascend;\n    });\n  } else {\n    throw new TypeError('Invalid sort() argument. Must be a string or object.');\n  }\n\n  return this.append({ $sort: sort });\n};\n\n/**\n * Sets the readPreference option for the aggregation query.\n *\n * ####Example:\n *\n *     Model.aggregate(..).read('primaryPreferred').exec(callback)\n *\n * @param {String} pref one of the listed preference options or their aliases\n * @param {Array} [tags] optional tags for this query\n * @return {Aggregate} this\n * @api public\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n */\n\nAggregate.prototype.read = function(pref, tags) {\n  if (!this.options) {\n    this.options = {};\n  }\n  read.call(this, pref, tags);\n  return this;\n};\n\n/**\n * Sets the readConcern level for the aggregation query.\n *\n * ####Example:\n *\n *     Model.aggregate(..).readConcern('majority').exec(callback)\n *\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.readConcern = function(level) {\n  if (!this.options) {\n    this.options = {};\n  }\n  readConcern.call(this, level);\n  return this;\n};\n\n/**\n * Appends a new $redact operator to this aggregate pipeline.\n *\n * If 3 arguments are supplied, Mongoose will wrap them with if-then-else of $cond operator respectively\n * If `thenExpr` or `elseExpr` is string, make sure it starts with $$, like `$$DESCEND`, `$$PRUNE` or `$$KEEP`.\n *\n * ####Example:\n *\n *     Model.aggregate(...)\n *      .redact({\n *        $cond: {\n *          if: { $eq: [ '$level', 5 ] },\n *          then: '$$PRUNE',\n *          else: '$$DESCEND'\n *        }\n *      })\n *      .exec();\n *\n *     // $redact often comes with $cond operator, you can also use the following syntax provided by mongoose\n *     Model.aggregate(...)\n *      .redact({ $eq: [ '$level', 5 ] }, '$$PRUNE', '$$DESCEND')\n *      .exec();\n *\n * @param {Object} expression redact options or conditional expression\n * @param {String|Object} [thenExpr] true case for the condition\n * @param {String|Object} [elseExpr] false case for the condition\n * @return {Aggregate} this\n * @see $redact https://docs.mongodb.com/manual/reference/operator/aggregation/redact/\n * @api public\n */\n\nAggregate.prototype.redact = function(expression, thenExpr, elseExpr) {\n  if (arguments.length === 3) {\n    if ((typeof thenExpr === 'string' && !thenExpr.startsWith('$$')) ||\n        (typeof elseExpr === 'string' && !elseExpr.startsWith('$$'))) {\n      throw new Error('If thenExpr or elseExpr is string, it must start with $$. e.g. $$DESCEND, $$PRUNE, $$KEEP');\n    }\n\n    expression = {\n      $cond: {\n        if: expression,\n        then: thenExpr,\n        else: elseExpr\n      }\n    };\n  } else if (arguments.length !== 1) {\n    throw new TypeError('Invalid arguments');\n  }\n\n  return this.append({ $redact: expression });\n};\n\n/**\n * Execute the aggregation with explain\n *\n * ####Example:\n *\n *     Model.aggregate(..).explain(callback)\n *\n * @param {Function} callback\n * @return {Promise}\n */\n\nAggregate.prototype.explain = function(callback) {\n  const model = this._model;\n\n  return promiseOrCallback(callback, cb => {\n    if (!this._pipeline.length) {\n      const err = new Error('Aggregate has empty pipeline');\n      return cb(err);\n    }\n\n    prepareDiscriminatorPipeline(this);\n\n    model.hooks.execPre('aggregate', this, error => {\n      if (error) {\n        const _opts = { error: error };\n        return model.hooks.execPost('aggregate', this, [null], _opts, error => {\n          cb(error);\n        });\n      }\n\n      this.options.explain = true;\n\n      model.collection.\n        aggregate(this._pipeline, this.options || {}).\n        explain((error, result) => {\n          const _opts = { error: error };\n          return model.hooks.execPost('aggregate', this, [result], _opts, error => {\n            if (error) {\n              return cb(error);\n            }\n            return cb(null, result);\n          });\n        });\n    });\n  }, model.events);\n};\n\n/**\n * Sets the allowDiskUse option for the aggregation query (ignored for < 2.6.0)\n *\n * ####Example:\n *\n *     await Model.aggregate([{ $match: { foo: 'bar' } }]).allowDiskUse(true);\n *\n * @param {Boolean} value Should tell server it can use hard drive to store data during aggregation.\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.allowDiskUse = function(value) {\n  this.options.allowDiskUse = value;\n  return this;\n};\n\n/**\n * Sets the hint option for the aggregation query (ignored for < 3.6.0)\n *\n * ####Example:\n *\n *     Model.aggregate(..).hint({ qty: 1, category: 1 }).exec(callback)\n *\n * @param {Object|String} value a hint object or the index name\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.hint = function(value) {\n  this.options.hint = value;\n  return this;\n};\n\n/**\n * Sets the session for this aggregation. Useful for [transactions](/docs/transactions.html).\n *\n * ####Example:\n *\n *     const session = await Model.startSession();\n *     await Model.aggregate(..).session(session);\n *\n * @param {ClientSession} session\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.session = function(session) {\n  if (session == null) {\n    delete this.options.session;\n  } else {\n    this.options.session = session;\n  }\n  return this;\n};\n\n/**\n * Lets you set arbitrary options, for middleware or plugins.\n *\n * ####Example:\n *\n *     const agg = Model.aggregate(..).option({ allowDiskUse: true }); // Set the `allowDiskUse` option\n *     agg.options; // `{ allowDiskUse: true }`\n *\n * @param {Object} options keys to merge into current options\n * @param [options.maxTimeMS] number limits the time this aggregation will run, see [MongoDB docs on `maxTimeMS`](https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/)\n * @param [options.allowDiskUse] boolean if true, the MongoDB server will use the hard drive to store data during this aggregation\n * @param [options.collation] object see [`Aggregate.prototype.collation()`](./docs/api.html#aggregate_Aggregate-collation)\n * @param [options.session] ClientSession see [`Aggregate.prototype.session()`](./docs/api.html#aggregate_Aggregate-session)\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.option = function(value) {\n  for (const key in value) {\n    this.options[key] = value[key];\n  }\n  return this;\n};\n\n/**\n * Sets the cursor option option for the aggregation query (ignored for < 2.6.0).\n * Note the different syntax below: .exec() returns a cursor object, and no callback\n * is necessary.\n *\n * ####Example:\n *\n *     const cursor = Model.aggregate(..).cursor({ batchSize: 1000 }).exec();\n *     cursor.eachAsync(function(doc, i) {\n *       // use doc\n *     });\n *\n * @param {Object} options\n * @param {Number} options.batchSize set the cursor batch size\n * @param {Boolean} [options.useMongooseAggCursor] use experimental mongoose-specific aggregation cursor (for `eachAsync()` and other query cursor semantics)\n * @return {Aggregate} this\n * @api public\n * @see mongodb http://mongodb.github.io/node-mongodb-native/2.0/api/AggregationCursor.html\n */\n\nAggregate.prototype.cursor = function(options) {\n  if (!this.options) {\n    this.options = {};\n  }\n  this.options.cursor = options || {};\n  return this;\n};\n\n/**\n * Sets an option on this aggregation. This function will be deprecated in a\n * future release. Use the [`cursor()`](./api.html#aggregate_Aggregate-cursor),\n * [`collation()`](./api.html#aggregate_Aggregate-collation), etc. helpers to\n * set individual options, or access `agg.options` directly.\n *\n * Note that MongoDB aggregations [do **not** support the `noCursorTimeout` flag](https://jira.mongodb.org/browse/SERVER-6036),\n * if you try setting that flag with this function you will get a \"unrecognized field 'noCursorTimeout'\" error.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {Aggregate} this\n * @api public\n * @deprecated Use [`.option()`](api.html#aggregate_Aggregate-option) instead. Note that MongoDB aggregations do **not** support a `noCursorTimeout` option.\n */\n\nAggregate.prototype.addCursorFlag = util.deprecate(function(flag, value) {\n  if (!this.options) {\n    this.options = {};\n  }\n  this.options[flag] = value;\n  return this;\n}, 'Mongoose: `Aggregate#addCursorFlag()` is deprecated, use `option()` instead');\n\n/**\n * Adds a collation\n *\n * ####Example:\n *\n *     Model.aggregate(..).collation({ locale: 'en_US', strength: 1 }).exec();\n *\n * @param {Object} collation options\n * @return {Aggregate} this\n * @api public\n * @see mongodb http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#aggregate\n */\n\nAggregate.prototype.collation = function(collation) {\n  if (!this.options) {\n    this.options = {};\n  }\n  this.options.collation = collation;\n  return this;\n};\n\n/**\n * Combines multiple aggregation pipelines.\n *\n * ####Example:\n *\n *     Model.aggregate(...)\n *      .facet({\n *        books: [{ groupBy: '$author' }],\n *        price: [{ $bucketAuto: { groupBy: '$price', buckets: 2 } }]\n *      })\n *      .exec();\n *\n *     // Output: { books: [...], price: [{...}, {...}] }\n *\n * @param {Object} facet options\n * @return {Aggregate} this\n * @see $facet https://docs.mongodb.com/v3.4/reference/operator/aggregation/facet/\n * @api public\n */\n\nAggregate.prototype.facet = function(options) {\n  return this.append({ $facet: options });\n};\n\n/**\n * Helper for [Atlas Text Search](https://docs.atlas.mongodb.com/reference/atlas-search/tutorial/)'s\n * `$search` stage.\n *\n * ####Example:\n *\n *     Model.aggregate().\n *      search({\n *        text: {\n *          query: 'baseball',\n *          path: 'plot'\n *        }\n *      });\n *\n *     // Output: [{ plot: '...', title: '...' }]\n *\n * @param {Object} $search options\n * @return {Aggregate} this\n * @see $search https://docs.atlas.mongodb.com/reference/atlas-search/tutorial/\n * @api public\n */\n\nAggregate.prototype.search = function(options) {\n  return this.append({ $search: options });\n};\n\n/**\n * Returns the current pipeline\n *\n * ####Example:\n *\n *     MyModel.aggregate().match({ test: 1 }).pipeline(); // [{ $match: { test: 1 } }]\n *\n * @return {Array}\n * @api public\n */\n\n\nAggregate.prototype.pipeline = function() {\n  return this._pipeline;\n};\n\n/**\n * Executes the aggregate pipeline on the currently bound Model.\n *\n * ####Example:\n *\n *     aggregate.exec(callback);\n *\n *     // Because a promise is returned, the `callback` is optional.\n *     const promise = aggregate.exec();\n *     promise.then(..);\n *\n * @see Promise #promise_Promise\n * @param {Function} [callback]\n * @return {Promise}\n * @api public\n */\n\nAggregate.prototype.exec = function(callback) {\n  if (!this._model) {\n    throw new Error('Aggregate not bound to any Model');\n  }\n  const model = this._model;\n  const collection = this._model.collection;\n\n  applyGlobalMaxTimeMS(this.options, model);\n\n  if (this.options && this.options.cursor) {\n    return new AggregationCursor(this);\n  }\n\n  return promiseOrCallback(callback, cb => {\n    prepareDiscriminatorPipeline(this);\n    stringifyFunctionOperators(this._pipeline);\n\n    model.hooks.execPre('aggregate', this, error => {\n      if (error) {\n        const _opts = { error: error };\n        return model.hooks.execPost('aggregate', this, [null], _opts, error => {\n          cb(error);\n        });\n      }\n      if (!this._pipeline.length) {\n        return cb(new Error('Aggregate has empty pipeline'));\n      }\n\n      const options = utils.clone(this.options || {});\n      collection.aggregate(this._pipeline, options, (error, cursor) => {\n        if (error) {\n          const _opts = { error: error };\n          return model.hooks.execPost('aggregate', this, [null], _opts, error => {\n            if (error) {\n              return cb(error);\n            }\n            return cb(null);\n          });\n        }\n        cursor.toArray((error, result) => {\n          const _opts = { error: error };\n          model.hooks.execPost('aggregate', this, [result], _opts, (error, result) => {\n            if (error) {\n              return cb(error);\n            }\n\n            cb(null, result);\n          });\n        });\n      });\n    });\n  }, model.events);\n};\n\n/**\n * Provides promise for aggregate.\n *\n * ####Example:\n *\n *     Model.aggregate(..).then(successCallback, errorCallback);\n *\n * @see Promise #promise_Promise\n * @param {Function} [resolve] successCallback\n * @param {Function} [reject]  errorCallback\n * @return {Promise}\n */\nAggregate.prototype.then = function(resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n * Like [`.then()`](#query_Query-then), but only takes a rejection handler.\n *\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nAggregate.prototype.catch = function(reject) {\n  return this.exec().then(null, reject);\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * ####Example\n *\n *     const agg = Model.aggregate([{ $match: { age: { $gte: 25 } } }]);\n *     for await (const doc of agg) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not set if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf Aggregate\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  Aggregate.prototype[Symbol.asyncIterator] = function() {\n    return this.cursor({ useMongooseAggCursor: true }).\n      exec().\n      transformNull().\n      _transformForAsyncIterator();\n  };\n}\n\n/*!\n * Helpers\n */\n\n/**\n * Checks whether an object is likely a pipeline operator\n *\n * @param {Object} obj object to check\n * @return {Boolean}\n * @api private\n */\n\nfunction isOperator(obj) {\n  if (typeof obj !== 'object') {\n    return false;\n  }\n\n  const k = Object.keys(obj);\n\n  return k.length === 1 && k.some(key => { return key[0] === '$'; });\n}\n\n/*!\n * Adds the appropriate `$match` pipeline step to the top of an aggregate's\n * pipeline, should it's model is a non-root discriminator type. This is\n * analogous to the `prepareDiscriminatorCriteria` function in `lib/query.js`.\n *\n * @param {Aggregate} aggregate Aggregate to prepare\n */\n\nAggregate._prepareDiscriminatorPipeline = prepareDiscriminatorPipeline;\n\nfunction prepareDiscriminatorPipeline(aggregate) {\n  const schema = aggregate._model.schema;\n  const discriminatorMapping = schema && schema.discriminatorMapping;\n\n  if (discriminatorMapping && !discriminatorMapping.isRoot) {\n    const originalPipeline = aggregate._pipeline;\n    const discriminatorKey = discriminatorMapping.key;\n    const discriminatorValue = discriminatorMapping.value;\n\n    // If the first pipeline stage is a match and it doesn't specify a `__t`\n    // key, add the discriminator key to it. This allows for potential\n    // aggregation query optimizations not to be disturbed by this feature.\n    if (originalPipeline[0] && originalPipeline[0].$match && !originalPipeline[0].$match[discriminatorKey]) {\n      originalPipeline[0].$match[discriminatorKey] = discriminatorValue;\n      // `originalPipeline` is a ref, so there's no need for\n      // aggregate._pipeline = originalPipeline\n    } else if (originalPipeline[0] && originalPipeline[0].$geoNear) {\n      originalPipeline[0].$geoNear.query =\n          originalPipeline[0].$geoNear.query || {};\n      originalPipeline[0].$geoNear.query[discriminatorKey] = discriminatorValue;\n    } else if (originalPipeline[0] && originalPipeline[0].$search) {\n      if (originalPipeline[1] && originalPipeline[1].$match != null) {\n        originalPipeline[1].$match[discriminatorKey] = originalPipeline[1].$match[discriminatorKey] || discriminatorValue;\n      } else {\n        const match = {};\n        match[discriminatorKey] = discriminatorValue;\n        originalPipeline.splice(1, 0, { $match: match });\n      }\n    } else {\n      const match = {};\n      match[discriminatorKey] = discriminatorValue;\n      aggregate._pipeline.unshift({ $match: match });\n    }\n  }\n}\n\n/*!\n * Exports\n */\n\nmodule.exports = Aggregate;\n"],"mappings":"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,CAACK,SAAS,CAAC,CAAC,CAAC;MAC5B;MACAT,MAAM,CAACI,KAAK,CAAC,GAAGI,OAAO;IACzB,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,MAAM,IAAIZ,KAAK,CAAC,sDAAsD,CAAC;EACzE;EAEA,OAAO,IAAI,CAACT,MAAM,CAAC;IAAEuB,QAAQ,EAAEV;EAAO,CAAC,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAtB,SAAS,CAACF,SAAS,CAACmC,IAAI,GAAG,UAASZ,GAAG,EAAE;EACvC,MAAMa,EAAE,GAAG,CAAC,CAAC;EACbA,EAAE,CAACC,QAAQ,GAAGd,GAAG;EACjB,OAAO,IAAI,CAACZ,MAAM,CAACyB,EAAE,CAAC;AACxB,CAAC;;AAED;AACA;AACA;;AAEA,4BAA4B,CAACL,KAAK,CAAC,GAAG,CAAC,CAACJ,OAAO,CAAC,UAASW,SAAS,EAAE;EAClEpC,SAAS,CAACF,SAAS,CAACsC,SAAS,CAAC,GAAG,UAASf,GAAG,EAAE;IAC7C,MAAMa,EAAE,GAAG,CAAC,CAAC;IACbA,EAAE,CAAC,GAAG,GAAGE,SAAS,CAAC,GAAGf,GAAG;IACzB,OAAO,IAAI,CAACZ,MAAM,CAACyB,EAAE,CAAC;EACxB,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}