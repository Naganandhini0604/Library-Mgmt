{"ast":null,"code":"'use strict';\n\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\nconst handleTimestampOption = require('../schema/handleTimestampOption');\nmodule.exports = applyTimestampsToChildren;\n\n/*!\n * ignore\n */\n\nfunction applyTimestampsToChildren(now, update, schema) {\n  if (update == null) {\n    return;\n  }\n  const keys = Object.keys(update);\n  const hasDollarKey = keys.some(key => key.startsWith('$'));\n  if (hasDollarKey) {\n    if (update.$push) {\n      _applyTimestampToUpdateOperator(update.$push);\n    }\n    if (update.$addToSet) {\n      _applyTimestampToUpdateOperator(update.$addToSet);\n    }\n    if (update.$set != null) {\n      const keys = Object.keys(update.$set);\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$set, now);\n      }\n    }\n    if (update.$setOnInsert != null) {\n      const keys = Object.keys(update.$setOnInsert);\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$setOnInsert, now);\n      }\n    }\n  }\n  const updateKeys = Object.keys(update).filter(key => !key.startsWith('$'));\n  for (const key of updateKeys) {\n    applyTimestampsToUpdateKey(schema, key, update, now);\n  }\n  function _applyTimestampToUpdateOperator(op) {\n    for (const key of Object.keys(op)) {\n      const $path = schema.path(key.replace(/\\.\\$\\./i, '.').replace(/.\\$$/, ''));\n      if (op[key] && $path && $path.$isMongooseDocumentArray && $path.schema.options.timestamps) {\n        const timestamps = $path.schema.options.timestamps;\n        const createdAt = handleTimestampOption(timestamps, 'createdAt');\n        const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n        if (op[key].$each) {\n          op[key].$each.forEach(function (subdoc) {\n            if (updatedAt != null) {\n              subdoc[updatedAt] = now;\n            }\n            if (createdAt != null) {\n              subdoc[createdAt] = now;\n            }\n          });\n        } else {\n          if (updatedAt != null) {\n            op[key][updatedAt] = now;\n          }\n          if (createdAt != null) {\n            op[key][createdAt] = now;\n          }\n        }\n      }\n    }\n  }\n}\nfunction applyTimestampsToDocumentArray(arr, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n  if (!timestamps) {\n    return;\n  }\n  const len = arr.length;\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  for (let i = 0; i < len; ++i) {\n    if (updatedAt != null) {\n      arr[i][updatedAt] = now;\n    }\n    if (createdAt != null) {\n      arr[i][createdAt] = now;\n    }\n    applyTimestampsToChildren(now, arr[i], schematype.schema);\n  }\n}\nfunction applyTimestampsToSingleNested(subdoc, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n  if (!timestamps) {\n    return;\n  }\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  if (updatedAt != null) {\n    subdoc[updatedAt] = now;\n  }\n  if (createdAt != null) {\n    subdoc[createdAt] = now;\n  }\n  applyTimestampsToChildren(now, subdoc, schematype.schema);\n}\nfunction applyTimestampsToUpdateKey(schema, key, update, now) {\n  // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n  const keyToSearch = cleanPositionalOperators(key);\n  const path = schema.path(keyToSearch);\n  if (!path) {\n    return;\n  }\n  const parentSchemaTypes = [];\n  const pieces = keyToSearch.split('.');\n  for (let i = pieces.length - 1; i > 0; --i) {\n    const s = schema.path(pieces.slice(0, i).join('.'));\n    if (s != null && (s.$isMongooseDocumentArray || s.$isSingleNested)) {\n      parentSchemaTypes.push({\n        parentPath: key.split('.').slice(0, i).join('.'),\n        parentSchemaType: s\n      });\n    }\n  }\n  if (Array.isArray(update[key]) && path.$isMongooseDocumentArray) {\n    applyTimestampsToDocumentArray(update[key], path, now);\n  } else if (update[key] && path.$isSingleNested) {\n    applyTimestampsToSingleNested(update[key], path, now);\n  } else if (parentSchemaTypes.length > 0) {\n    for (const item of parentSchemaTypes) {\n      const parentPath = item.parentPath;\n      const parentSchemaType = item.parentSchemaType;\n      const timestamps = parentSchemaType.schema.options.timestamps;\n      const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n      if (!timestamps || updatedAt == null) {\n        continue;\n      }\n      if (parentSchemaType.$isSingleNested) {\n        // Single nested is easy\n        update[parentPath + '.' + updatedAt] = now;\n      } else if (parentSchemaType.$isMongooseDocumentArray) {\n        let childPath = key.substr(parentPath.length + 1);\n        if (/^\\d+$/.test(childPath)) {\n          update[parentPath + '.' + childPath][updatedAt] = now;\n          continue;\n        }\n        const firstDot = childPath.indexOf('.');\n        childPath = firstDot !== -1 ? childPath.substr(0, firstDot) : childPath;\n        update[parentPath + '.' + childPath + '.' + updatedAt] = now;\n      }\n    }\n  } else if (path.schema != null && path.schema != schema && update[key]) {\n    const timestamps = path.schema.options.timestamps;\n    const createdAt = handleTimestampOption(timestamps, 'createdAt');\n    const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n    if (!timestamps) {\n      return;\n    }\n    if (updatedAt != null) {\n      update[key][updatedAt] = now;\n    }\n    if (createdAt != null) {\n      update[key][createdAt] = now;\n    }\n  }\n}","map":{"version":3,"names":["cleanPositionalOperators","require","handleTimestampOption","module","exports","applyTimestampsToChildren","now","update","schema","keys","Object","hasDollarKey","some","key","startsWith","$push","_applyTimestampToUpdateOperator","$addToSet","$set","applyTimestampsToUpdateKey","$setOnInsert","updateKeys","filter","op","$path","path","replace","$isMongooseDocumentArray","options","timestamps","createdAt","updatedAt","$each","forEach","subdoc","applyTimestampsToDocumentArray","arr","schematype","len","length","i","applyTimestampsToSingleNested","keyToSearch","parentSchemaTypes","pieces","split","s","slice","join","$isSingleNested","push","parentPath","parentSchemaType","Array","isArray","item","childPath","substr","test","firstDot","indexOf"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/helpers/update/applyTimestampsToChildren.js"],"sourcesContent":["'use strict';\n\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\nconst handleTimestampOption = require('../schema/handleTimestampOption');\n\nmodule.exports = applyTimestampsToChildren;\n\n/*!\n * ignore\n */\n\nfunction applyTimestampsToChildren(now, update, schema) {\n  if (update == null) {\n    return;\n  }\n\n  const keys = Object.keys(update);\n  const hasDollarKey = keys.some(key => key.startsWith('$'));\n\n  if (hasDollarKey) {\n    if (update.$push) {\n      _applyTimestampToUpdateOperator(update.$push);\n    }\n    if (update.$addToSet) {\n      _applyTimestampToUpdateOperator(update.$addToSet);\n    }\n    if (update.$set != null) {\n      const keys = Object.keys(update.$set);\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$set, now);\n      }\n    }\n    if (update.$setOnInsert != null) {\n      const keys = Object.keys(update.$setOnInsert);\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$setOnInsert, now);\n      }\n    }\n  }\n\n  const updateKeys = Object.keys(update).filter(key => !key.startsWith('$'));\n  for (const key of updateKeys) {\n    applyTimestampsToUpdateKey(schema, key, update, now);\n  }\n\n  function _applyTimestampToUpdateOperator(op) {\n    for (const key of Object.keys(op)) {\n      const $path = schema.path(key.replace(/\\.\\$\\./i, '.').replace(/.\\$$/, ''));\n      if (op[key] &&\n          $path &&\n          $path.$isMongooseDocumentArray &&\n          $path.schema.options.timestamps) {\n        const timestamps = $path.schema.options.timestamps;\n        const createdAt = handleTimestampOption(timestamps, 'createdAt');\n        const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n        if (op[key].$each) {\n          op[key].$each.forEach(function(subdoc) {\n            if (updatedAt != null) {\n              subdoc[updatedAt] = now;\n            }\n            if (createdAt != null) {\n              subdoc[createdAt] = now;\n            }\n          });\n        } else {\n          if (updatedAt != null) {\n            op[key][updatedAt] = now;\n          }\n          if (createdAt != null) {\n            op[key][createdAt] = now;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction applyTimestampsToDocumentArray(arr, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n\n  if (!timestamps) {\n    return;\n  }\n\n  const len = arr.length;\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  for (let i = 0; i < len; ++i) {\n    if (updatedAt != null) {\n      arr[i][updatedAt] = now;\n    }\n    if (createdAt != null) {\n      arr[i][createdAt] = now;\n    }\n\n    applyTimestampsToChildren(now, arr[i], schematype.schema);\n  }\n}\n\nfunction applyTimestampsToSingleNested(subdoc, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n  if (!timestamps) {\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  if (updatedAt != null) {\n    subdoc[updatedAt] = now;\n  }\n  if (createdAt != null) {\n    subdoc[createdAt] = now;\n  }\n\n  applyTimestampsToChildren(now, subdoc, schematype.schema);\n}\n\nfunction applyTimestampsToUpdateKey(schema, key, update, now) {\n  // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n  const keyToSearch = cleanPositionalOperators(key);\n  const path = schema.path(keyToSearch);\n  if (!path) {\n    return;\n  }\n\n  const parentSchemaTypes = [];\n  const pieces = keyToSearch.split('.');\n  for (let i = pieces.length - 1; i > 0; --i) {\n    const s = schema.path(pieces.slice(0, i).join('.'));\n    if (s != null &&\n      (s.$isMongooseDocumentArray || s.$isSingleNested)) {\n      parentSchemaTypes.push({ parentPath: key.split('.').slice(0, i).join('.'), parentSchemaType: s });\n    }\n  }\n\n  if (Array.isArray(update[key]) && path.$isMongooseDocumentArray) {\n    applyTimestampsToDocumentArray(update[key], path, now);\n  } else if (update[key] && path.$isSingleNested) {\n    applyTimestampsToSingleNested(update[key], path, now);\n  } else if (parentSchemaTypes.length > 0) {\n    for (const item of parentSchemaTypes) {\n      const parentPath = item.parentPath;\n      const parentSchemaType = item.parentSchemaType;\n      const timestamps = parentSchemaType.schema.options.timestamps;\n      const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n      if (!timestamps || updatedAt == null) {\n        continue;\n      }\n\n      if (parentSchemaType.$isSingleNested) {\n        // Single nested is easy\n        update[parentPath + '.' + updatedAt] = now;\n      } else if (parentSchemaType.$isMongooseDocumentArray) {\n        let childPath = key.substr(parentPath.length + 1);\n\n        if (/^\\d+$/.test(childPath)) {\n          update[parentPath + '.' + childPath][updatedAt] = now;\n          continue;\n        }\n\n        const firstDot = childPath.indexOf('.');\n        childPath = firstDot !== -1 ? childPath.substr(0, firstDot) : childPath;\n\n        update[parentPath + '.' + childPath + '.' + updatedAt] = now;\n      }\n    }\n  } else if (path.schema != null && path.schema != schema && update[key]) {\n    const timestamps = path.schema.options.timestamps;\n    const createdAt = handleTimestampOption(timestamps, 'createdAt');\n    const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n    if (!timestamps) {\n      return;\n    }\n\n    if (updatedAt != null) {\n      update[key][updatedAt] = now;\n    }\n    if (createdAt != null) {\n      update[key][createdAt] = now;\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}