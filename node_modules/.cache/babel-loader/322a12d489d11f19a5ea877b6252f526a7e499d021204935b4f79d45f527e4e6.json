{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst SchemaType = require('../schematype');\nconst MongooseError = require('../error/index');\nconst SchemaStringOptions = require('../options/SchemaStringOptions');\nconst castString = require('../cast/string');\nconst utils = require('../utils');\nconst CastError = SchemaType.CastError;\n\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaString.schemaName = 'String';\nSchemaString.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\nObject.defineProperty(SchemaString.prototype, 'OptionsConstructor', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: SchemaStringOptions\n});\n\n/*!\n * ignore\n */\n\nSchemaString._cast = castString;\n\n/**\n * Get/set the function used to cast arbitrary values to strings.\n *\n * ####Example:\n *\n *     // Throw an error if you pass in an object. Normally, Mongoose allows\n *     // objects with custom `toString()` functions.\n *     const original = mongoose.Schema.Types.String.cast();\n *     mongoose.Schema.Types.String.cast(v => {\n *       assert.ok(v == null || typeof v !== 'object');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Types.String.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaString._defaultCaster = v => {\n  if (v != null && typeof v !== 'string') {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\n * Attaches a getter for all String instances.\n *\n * ####Example:\n *\n *     // Make all numbers round down\n *     mongoose.Schema.String.get(v => v.toLowerCase());\n *\n *     const Model = mongoose.model('Test', new Schema({ test: String }));\n *     new Model({ test: 'FOO' }).test; // 'foo'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.get = SchemaType.get;\n\n/**\n * Sets a default option for all String instances.\n *\n * ####Example:\n *\n *     // Make all strings have option `trim` equal to true.\n *     mongoose.Schema.String.set('trim', true);\n *\n *     const User = mongoose.model('User', new Schema({ name: String }));\n *     new User({ name: '   John Doe   ' }).name; // 'John Doe'\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaString.set = SchemaType.set;\n\n/*!\n * ignore\n */\n\nSchemaString._checkRequired = v => (v instanceof String || typeof v === 'string') && v.length;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaString.checkRequired = SchemaType.checkRequired;\n\n/**\n * Adds an enum validator\n *\n * ####Example:\n *\n *     const states = ['opening', 'open', 'closing', 'closed']\n *     const s = new Schema({ state: { type: String, enum: states }})\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     const enum = {\n *       values: ['opening', 'open', 'closing', 'closed'],\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     const s = new Schema({ state: { type: String, enum: enum })\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.enum = function () {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n  let values;\n  let errorMessage;\n  if (utils.isObject(arguments[0])) {\n    if (Array.isArray(arguments[0].values)) {\n      values = arguments[0].values;\n      errorMessage = arguments[0].message;\n    } else {\n      values = utils.object.vals(arguments[0]);\n      errorMessage = MongooseError.messages.String.enum;\n    }\n  } else {\n    values = arguments;\n    errorMessage = MongooseError.messages.String.enum;\n  }\n  for (const value of values) {\n    if (value !== undefined) {\n      this.enumValues.push(this.cast(value));\n    }\n  }\n  const vals = this.enumValues;\n  this.enumValidator = function (v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n  return this;\n};\n\n/**\n * Adds a lowercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     const s = new Schema({ email: { type: String, lowercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *     M.find({ email: 'SomeEmail@example.com' }); // Queries by 'someemail@example.com'\n *\n * Note that `lowercase` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Still queries for documents whose `email` matches the regular\n *     // expression /SomeEmail/. Mongoose does **not** convert the RegExp\n *     // to lowercase.\n *     M.find({ email: /SomeEmail/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.lowercase = function (shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(function (v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.toLowerCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds an uppercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     const s = new Schema({ caps: { type: String, uppercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *     M.find({ caps: 'an example' }) // Matches documents where caps = 'AN EXAMPLE'\n *\n * Note that `uppercase` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Mongoose does **not** convert the RegExp to uppercase.\n *     M.find({ email: /an example/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.uppercase = function (shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(function (v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.toUpperCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds a trim [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * The string value will be trimmed when set.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: { type: String, trim: true }});\n *     const M = db.model('M', s);\n *     const string = ' some name ';\n *     console.log(string.length); // 11\n *     const m = new M({ name: string });\n *     console.log(m.name.length); // 9\n *\n *     // Equivalent to `findOne({ name: string.trim() })`\n *     M.findOne({ name: string });\n *\n * Note that `trim` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Mongoose does **not** trim whitespace from the RegExp.\n *     M.find({ name: / some name / });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.trim = function (shouldTrim) {\n  if (arguments.length > 0 && !shouldTrim) {\n    return this;\n  }\n  return this.set(function (v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.trim();\n    }\n    return v;\n  });\n};\n\n/**\n * Sets a minimum length validator.\n *\n * ####Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\n *     const minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.minlength = function (value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function (v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n  return this;\n};\nSchemaString.prototype.minLength = SchemaString.prototype.minlength;\n\n/**\n * Sets a maximum length validator.\n *\n * ####Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\n *     const maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.maxlength = function (value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function (v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n  return this;\n};\nSchemaString.prototype.maxLength = SchemaString.prototype.maxlength;\n\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: { type: String, match: /^a/ }})\n *     const M = db.model('M', s)\n *     const m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     const match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     const s = new Schema({ file: { type: String, match: match }})\n *     const M = db.model('M', s);\n *     const m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     const s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n\n  const msg = message || MongooseError.messages.String.match;\n  const matchValidator = function (v) {\n    if (!regExp) {\n      return false;\n    }\n\n    // In case RegExp happens to have `/g` flag set, we need to reset the\n    // `lastIndex`, otherwise `match` will intermittently fail.\n    regExp.lastIndex = 0;\n    const ret = v != null && v !== '' ? regExp.test(v) : true;\n    return ret;\n  };\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n\n/**\n * Check if the given value satisfies the `required` validator. The value is\n * considered valid if it is a string (that is, not `null` or `undefined`) and\n * has positive length. The `required` validator **will** fail for empty\n * strings.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ? this.constructor.checkRequired() : SchemaString.checkRequired();\n  return _checkRequired(value);\n};\n\n/**\n * Casts to String\n *\n * @api private\n */\n\nSchemaString.prototype.cast = function (value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    if (typeof value === 'string') {\n      return value;\n    }\n    return this._castRef(value, doc, init);\n  }\n  let castString;\n  if (typeof this._castFunction === 'function') {\n    castString = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castString = this.constructor.cast();\n  } else {\n    castString = SchemaString.cast();\n  }\n  try {\n    return castString(value);\n  } catch (error) {\n    throw new CastError('string', value, this.path, null, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n  return val.map(function (m) {\n    return _this.castForQuery(m);\n  });\n}\nconst $conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $options: String,\n  $regex: handleSingle,\n  $not: handleSingle\n});\nObject.defineProperty(SchemaString.prototype, '$conditionalHandlers', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: Object.freeze($conditionalHandlers)\n});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function ($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  if (Object.prototype.toString.call(val) === '[object RegExp]') {\n    return val;\n  }\n  return this._castForQuery(val);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaString;","map":{"version":3,"names":["SchemaType","require","MongooseError","SchemaStringOptions","castString","utils","CastError","SchemaString","key","options","enumValues","regExp","call","schemaName","defaultOptions","prototype","Object","create","constructor","defineProperty","configurable","enumerable","writable","value","_cast","cast","caster","arguments","length","_defaultCaster","v","Error","get","set","_checkRequired","String","checkRequired","enum","enumValidator","validators","filter","validator","values","errorMessage","isObject","Array","isArray","message","object","vals","messages","undefined","push","indexOf","type","lowercase","shouldApply","self","toLowerCase","uppercase","toUpperCase","trim","shouldTrim","minlength","minlengthValidator","msg","replace","minLength","maxlength","maxlengthValidator","maxLength","match","matchValidator","lastIndex","ret","test","regexp","doc","_isRef","init","_castRef","_castFunction","error","path","handleSingle","val","castForQuery","handleArray","_this","map","m","$conditionalHandlers","$all","$gt","$gte","$lt","$lte","$options","$regex","$not","freeze","$conditional","handler","toString","_castForQuery","module","exports"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/schema/string.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst SchemaType = require('../schematype');\nconst MongooseError = require('../error/index');\nconst SchemaStringOptions = require('../options/SchemaStringOptions');\nconst castString = require('../cast/string');\nconst utils = require('../utils');\n\nconst CastError = SchemaType.CastError;\n\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaString.schemaName = 'String';\n\nSchemaString.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\nObject.defineProperty(SchemaString.prototype, 'OptionsConstructor', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: SchemaStringOptions\n});\n\n/*!\n * ignore\n */\n\nSchemaString._cast = castString;\n\n/**\n * Get/set the function used to cast arbitrary values to strings.\n *\n * ####Example:\n *\n *     // Throw an error if you pass in an object. Normally, Mongoose allows\n *     // objects with custom `toString()` functions.\n *     const original = mongoose.Schema.Types.String.cast();\n *     mongoose.Schema.Types.String.cast(v => {\n *       assert.ok(v == null || typeof v !== 'object');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Types.String.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaString._defaultCaster = v => {\n  if (v != null && typeof v !== 'string') {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\n * Attaches a getter for all String instances.\n *\n * ####Example:\n *\n *     // Make all numbers round down\n *     mongoose.Schema.String.get(v => v.toLowerCase());\n *\n *     const Model = mongoose.model('Test', new Schema({ test: String }));\n *     new Model({ test: 'FOO' }).test; // 'foo'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.get = SchemaType.get;\n\n/**\n * Sets a default option for all String instances.\n *\n * ####Example:\n *\n *     // Make all strings have option `trim` equal to true.\n *     mongoose.Schema.String.set('trim', true);\n *\n *     const User = mongoose.model('User', new Schema({ name: String }));\n *     new User({ name: '   John Doe   ' }).name; // 'John Doe'\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaString.set = SchemaType.set;\n\n/*!\n * ignore\n */\n\nSchemaString._checkRequired = v => (v instanceof String || typeof v === 'string') && v.length;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaString.checkRequired = SchemaType.checkRequired;\n\n/**\n * Adds an enum validator\n *\n * ####Example:\n *\n *     const states = ['opening', 'open', 'closing', 'closed']\n *     const s = new Schema({ state: { type: String, enum: states }})\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     const enum = {\n *       values: ['opening', 'open', 'closing', 'closed'],\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     const s = new Schema({ state: { type: String, enum: enum })\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.enum = function() {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n\n  let values;\n  let errorMessage;\n\n  if (utils.isObject(arguments[0])) {\n    if (Array.isArray(arguments[0].values)) {\n      values = arguments[0].values;\n      errorMessage = arguments[0].message;\n    } else {\n      values = utils.object.vals(arguments[0]);\n      errorMessage = MongooseError.messages.String.enum;\n    }\n  } else {\n    values = arguments;\n    errorMessage = MongooseError.messages.String.enum;\n  }\n\n  for (const value of values) {\n    if (value !== undefined) {\n      this.enumValues.push(this.cast(value));\n    }\n  }\n\n  const vals = this.enumValues;\n  this.enumValidator = function(v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n\n  return this;\n};\n\n/**\n * Adds a lowercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     const s = new Schema({ email: { type: String, lowercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *     M.find({ email: 'SomeEmail@example.com' }); // Queries by 'someemail@example.com'\n *\n * Note that `lowercase` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Still queries for documents whose `email` matches the regular\n *     // expression /SomeEmail/. Mongoose does **not** convert the RegExp\n *     // to lowercase.\n *     M.find({ email: /SomeEmail/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.lowercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.toLowerCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds an uppercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     const s = new Schema({ caps: { type: String, uppercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *     M.find({ caps: 'an example' }) // Matches documents where caps = 'AN EXAMPLE'\n *\n * Note that `uppercase` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Mongoose does **not** convert the RegExp to uppercase.\n *     M.find({ email: /an example/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.uppercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.toUpperCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds a trim [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * The string value will be trimmed when set.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: { type: String, trim: true }});\n *     const M = db.model('M', s);\n *     const string = ' some name ';\n *     console.log(string.length); // 11\n *     const m = new M({ name: string });\n *     console.log(m.name.length); // 9\n *\n *     // Equivalent to `findOne({ name: string.trim() })`\n *     M.findOne({ name: string });\n *\n * Note that `trim` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Mongoose does **not** trim whitespace from the RegExp.\n *     M.find({ name: / some name / });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.trim = function(shouldTrim) {\n  if (arguments.length > 0 && !shouldTrim) {\n    return this;\n  }\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.trim();\n    }\n    return v;\n  });\n};\n\n/**\n * Sets a minimum length validator.\n *\n * ####Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\n *     const minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.minlength = function(value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function(v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n\n  return this;\n};\n\nSchemaString.prototype.minLength = SchemaString.prototype.minlength;\n\n/**\n * Sets a maximum length validator.\n *\n * ####Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\n *     const maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.maxlength = function(value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function(v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n\n  return this;\n};\n\nSchemaString.prototype.maxLength = SchemaString.prototype.maxlength;\n\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: { type: String, match: /^a/ }})\n *     const M = db.model('M', s)\n *     const m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     const match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     const s = new Schema({ file: { type: String, match: match }})\n *     const M = db.model('M', s);\n *     const m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     const s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n\n  const msg = message || MongooseError.messages.String.match;\n\n  const matchValidator = function(v) {\n    if (!regExp) {\n      return false;\n    }\n\n    // In case RegExp happens to have `/g` flag set, we need to reset the\n    // `lastIndex`, otherwise `match` will intermittently fail.\n    regExp.lastIndex = 0;\n\n    const ret = ((v != null && v !== '')\n      ? regExp.test(v)\n      : true);\n    return ret;\n  };\n\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n\n/**\n * Check if the given value satisfies the `required` validator. The value is\n * considered valid if it is a string (that is, not `null` or `undefined`) and\n * has positive length. The `required` validator **will** fail for empty\n * strings.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ?\n    this.constructor.checkRequired() :\n    SchemaString.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to String\n *\n * @api private\n */\n\nSchemaString.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    return this._castRef(value, doc, init);\n  }\n\n  let castString;\n  if (typeof this._castFunction === 'function') {\n    castString = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castString = this.constructor.cast();\n  } else {\n    castString = SchemaString.cast();\n  }\n\n  try {\n    return castString(value);\n  } catch (error) {\n    throw new CastError('string', value, this.path, null, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n  return val.map(function(m) {\n    return _this.castForQuery(m);\n  });\n}\n\nconst $conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $options: String,\n  $regex: handleSingle,\n  $not: handleSingle\n});\n\nObject.defineProperty(SchemaString.prototype, '$conditionalHandlers', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: Object.freeze($conditionalHandlers)\n});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  if (Object.prototype.toString.call(val) === '[object RegExp]') {\n    return val;\n  }\n\n  return this._castForQuery(val);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaString;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAMC,aAAa,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAC/C,MAAME,mBAAmB,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AACrE,MAAMG,UAAU,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAC5C,MAAMI,KAAK,GAAGJ,OAAO,CAAC,UAAU,CAAC;AAEjC,MAAMK,SAAS,GAAGN,UAAU,CAACM,SAAS;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,YAAY,CAACC,GAAG,EAAEC,OAAO,EAAE;EAClC,IAAI,CAACC,UAAU,GAAG,EAAE;EACpB,IAAI,CAACC,MAAM,GAAG,IAAI;EAClBX,UAAU,CAACY,IAAI,CAAC,IAAI,EAAEJ,GAAG,EAAEC,OAAO,EAAE,QAAQ,CAAC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAF,YAAY,CAACM,UAAU,GAAG,QAAQ;AAElCN,YAAY,CAACO,cAAc,GAAG,CAAC,CAAC;;AAEhC;AACA;AACA;AACAP,YAAY,CAACQ,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACjB,UAAU,CAACe,SAAS,CAAC;AAC5DR,YAAY,CAACQ,SAAS,CAACG,WAAW,GAAGX,YAAY;AACjDS,MAAM,CAACG,cAAc,CAACZ,YAAY,CAACQ,SAAS,EAAE,oBAAoB,EAAE;EAClEK,YAAY,EAAE,KAAK;EACnBC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE,KAAK;EACfC,KAAK,EAAEpB;AACT,CAAC,CAAC;;AAEF;AACA;AACA;;AAEAI,YAAY,CAACiB,KAAK,GAAGpB,UAAU;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,YAAY,CAACkB,IAAI,GAAG,SAASA,IAAI,CAACC,MAAM,EAAE;EACxC,IAAIC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,OAAO,IAAI,CAACJ,KAAK;EACnB;EACA,IAAIE,MAAM,KAAK,KAAK,EAAE;IACpBA,MAAM,GAAG,IAAI,CAACG,cAAc;EAC9B;EACA,IAAI,CAACL,KAAK,GAAGE,MAAM;EAEnB,OAAO,IAAI,CAACF,KAAK;AACnB,CAAC;;AAED;AACA;AACA;;AAEAjB,YAAY,CAACsB,cAAc,GAAGC,CAAC,IAAI;EACjC,IAAIA,CAAC,IAAI,IAAI,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;IACtC,MAAM,IAAIC,KAAK,EAAE;EACnB;EACA,OAAOD,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvB,YAAY,CAACyB,GAAG,GAAGhC,UAAU,CAACgC,GAAG;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzB,YAAY,CAAC0B,GAAG,GAAGjC,UAAU,CAACiC,GAAG;;AAEjC;AACA;AACA;;AAEA1B,YAAY,CAAC2B,cAAc,GAAGJ,CAAC,IAAI,CAACA,CAAC,YAAYK,MAAM,IAAI,OAAOL,CAAC,KAAK,QAAQ,KAAKA,CAAC,CAACF,MAAM;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEArB,YAAY,CAAC6B,aAAa,GAAGpC,UAAU,CAACoC,aAAa;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA7B,YAAY,CAACQ,SAAS,CAACsB,IAAI,GAAG,YAAW;EACvC,IAAI,IAAI,CAACC,aAAa,EAAE;IACtB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACA,UAAU,CAACC,MAAM,CAAC,UAASV,CAAC,EAAE;MACnD,OAAOA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}