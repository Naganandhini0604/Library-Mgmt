{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst EventEmitter = require('events').EventEmitter;\n\n/*!\n * ignore\n */\n\nclass ChangeStream extends EventEmitter {\n  constructor(changeStreamThunk, pipeline, options) {\n    super();\n    this.driverChangeStream = null;\n    this.closed = false;\n    this.pipeline = pipeline;\n    this.options = options;\n\n    // This wrapper is necessary because of buffering.\n    changeStreamThunk((err, driverChangeStream) => {\n      if (err != null) {\n        this.emit('error', err);\n        return;\n      }\n      this.driverChangeStream = driverChangeStream;\n      this._bindEvents();\n      this.emit('ready');\n    });\n  }\n  _bindEvents() {\n    this.driverChangeStream.on('close', () => {\n      this.closed = true;\n    });\n    ['close', 'change', 'end', 'error'].forEach(ev => {\n      this.driverChangeStream.on(ev, data => this.emit(ev, data));\n    });\n  }\n  _queue(cb) {\n    this.once('ready', () => cb());\n  }\n  close() {\n    this.closed = true;\n    if (this.driverChangeStream) {\n      this.driverChangeStream.close();\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nmodule.exports = ChangeStream;","map":{"version":3,"names":["EventEmitter","require","ChangeStream","constructor","changeStreamThunk","pipeline","options","driverChangeStream","closed","err","emit","_bindEvents","on","forEach","ev","data","_queue","cb","once","close","module","exports"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/cursor/ChangeStream.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\n\n/*!\n * ignore\n */\n\nclass ChangeStream extends EventEmitter {\n  constructor(changeStreamThunk, pipeline, options) {\n    super();\n\n    this.driverChangeStream = null;\n    this.closed = false;\n    this.pipeline = pipeline;\n    this.options = options;\n\n    // This wrapper is necessary because of buffering.\n    changeStreamThunk((err, driverChangeStream) => {\n      if (err != null) {\n        this.emit('error', err);\n        return;\n      }\n\n      this.driverChangeStream = driverChangeStream;\n      this._bindEvents();\n      this.emit('ready');\n    });\n  }\n\n  _bindEvents() {\n    this.driverChangeStream.on('close', () => {\n      this.closed = true;\n    });\n\n    ['close', 'change', 'end', 'error'].forEach(ev => {\n      this.driverChangeStream.on(ev, data => this.emit(ev, data));\n    });\n  }\n\n  _queue(cb) {\n    this.once('ready', () => cb());\n  }\n\n  close() {\n    this.closed = true;\n    if (this.driverChangeStream) {\n      this.driverChangeStream.close();\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nmodule.exports = ChangeStream;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAQ,CAAC,CAACD,YAAY;;AAEnD;AACA;AACA;;AAEA,MAAME,YAAY,SAASF,YAAY,CAAC;EACtCG,WAAW,CAACC,iBAAiB,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IAChD,KAAK,EAAE;IAEP,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9B,IAAI,CAACC,MAAM,GAAG,KAAK;IACnB,IAAI,CAACH,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO;;IAEtB;IACAF,iBAAiB,CAAC,CAACK,GAAG,EAAEF,kBAAkB,KAAK;MAC7C,IAAIE,GAAG,IAAI,IAAI,EAAE;QACf,IAAI,CAACC,IAAI,CAAC,OAAO,EAAED,GAAG,CAAC;QACvB;MACF;MAEA,IAAI,CAACF,kBAAkB,GAAGA,kBAAkB;MAC5C,IAAI,CAACI,WAAW,EAAE;MAClB,IAAI,CAACD,IAAI,CAAC,OAAO,CAAC;IACpB,CAAC,CAAC;EACJ;EAEAC,WAAW,GAAG;IACZ,IAAI,CAACJ,kBAAkB,CAACK,EAAE,CAAC,OAAO,EAAE,MAAM;MACxC,IAAI,CAACJ,MAAM,GAAG,IAAI;IACpB,CAAC,CAAC;IAEF,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,CAACK,OAAO,CAACC,EAAE,IAAI;MAChD,IAAI,CAACP,kBAAkB,CAACK,EAAE,CAACE,EAAE,EAAEC,IAAI,IAAI,IAAI,CAACL,IAAI,CAACI,EAAE,EAAEC,IAAI,CAAC,CAAC;IAC7D,CAAC,CAAC;EACJ;EAEAC,MAAM,CAACC,EAAE,EAAE;IACT,IAAI,CAACC,IAAI,CAAC,OAAO,EAAE,MAAMD,EAAE,EAAE,CAAC;EAChC;EAEAE,KAAK,GAAG;IACN,IAAI,CAACX,MAAM,GAAG,IAAI;IAClB,IAAI,IAAI,CAACD,kBAAkB,EAAE;MAC3B,IAAI,CAACA,kBAAkB,CAACY,KAAK,EAAE;IACjC;EACF;AACF;;AAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAGnB,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}