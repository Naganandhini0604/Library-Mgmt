{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst CoreMongooseArray = require('./core_array');\nconst Document = require('../document');\nconst ObjectId = require('./objectid');\nconst castObjectId = require('../cast/objectid');\nconst getDiscriminatorByValue = require('../helpers/discriminator/getDiscriminatorByValue');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\nconst util = require('util');\nconst utils = require('../utils');\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\nconst documentArrayParent = require('../helpers/symbols').documentArrayParent;\nconst _basePush = Array.prototype.push;\nclass CoreDocumentArray extends CoreMongooseArray {\n  get isMongooseDocumentArray() {\n    return true;\n  }\n\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  }\n\n  /*!\n   * ignore\n   */\n\n  map() {\n    const ret = super.map.apply(this, arguments);\n    ret[arraySchemaSymbol] = null;\n    ret[arrayPathSymbol] = null;\n    ret[arrayParentSymbol] = null;\n    return ret;\n  }\n\n  /**\n   * Overrides MongooseArray#cast\n   *\n   * @method _cast\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n\n  _cast(value, index) {\n    if (this[arraySchemaSymbol] == null) {\n      return value;\n    }\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    const isInstance = Constructor.$isMongooseDocumentArray ? value && value.isMongooseDocumentArray : value instanceof Constructor;\n    if (isInstance ||\n    // Hack re: #5001, see #5005\n    value && value.constructor && value.constructor.baseCasterConstructor === Constructor) {\n      if (!(value[documentArrayParent] && value.__parentArray)) {\n        // value may have been created using array.create()\n        value[documentArrayParent] = this[arrayParentSymbol];\n        value.__parentArray = this;\n      }\n      value.$setIndex(index);\n      return value;\n    }\n    if (value === undefined || value === null) {\n      return null;\n    }\n\n    // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n    if (Buffer.isBuffer(value) || value instanceof ObjectId || !utils.isObject(value)) {\n      value = {\n        _id: value\n      };\n    }\n    if (value && Constructor.discriminators && Constructor.schema && Constructor.schema.options && Constructor.schema.options.discriminatorKey) {\n      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, value[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n    if (Constructor.$isMongooseDocumentArray) {\n      return Constructor.cast(value, this, undefined, undefined, index);\n    }\n    return new Constructor(value, this, undefined, undefined, index);\n  }\n\n  /**\n   * Searches array items for the first document with a matching _id.\n   *\n   * ####Example:\n   *\n   *     const embeddedDoc = m.array.id(some_id);\n   *\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\n   * @param {ObjectId|String|Number|Buffer} id\n   * @TODO cast to the _id based on schema for proper comparison\n   * @method id\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  id(id) {\n    let casted;\n    let sid;\n    let _id;\n    try {\n      casted = castObjectId(id).toString();\n    } catch (e) {\n      casted = null;\n    }\n    for (const val of this) {\n      if (!val) {\n        continue;\n      }\n      _id = val.get('_id');\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n        if (sid == _id._id) {\n          return val;\n        }\n      } else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) {\n        if (id == _id || utils.deepEqual(id, _id)) {\n          return val;\n        }\n      } else if (casted == _id) {\n        return val;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns a native js Array of plain js objects\n   *\n   * ####NOTE:\n   *\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n   *\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n   * @return {Array}\n   * @method toObject\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  toObject(options) {\n    // `[].concat` coerces the return value into a vanilla JS array, rather\n    // than a Mongoose array.\n    return [].concat(this.map(function (doc) {\n      if (doc == null) {\n        return null;\n      }\n      if (typeof doc.toObject !== 'function') {\n        return doc;\n      }\n      return doc.toObject(options);\n    }));\n  }\n  slice() {\n    const arr = super.slice.apply(this, arguments);\n    arr[arrayParentSymbol] = this[arrayParentSymbol];\n    arr[arrayPathSymbol] = this[arrayPathSymbol];\n    return arr;\n  }\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseDocumentArray\n   */\n\n  push() {\n    const ret = super.push.apply(this, arguments);\n    _updateParentPopulated(this);\n    return ret;\n  }\n\n  /**\n   * Pulls items from the array atomically.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method pull\n   * @memberOf MongooseDocumentArray\n   */\n\n  pull() {\n    const ret = super.pull.apply(this, arguments);\n    _updateParentPopulated(this);\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   */\n\n  shift() {\n    const ret = super.shift.apply(this, arguments);\n    _updateParentPopulated(this);\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   */\n\n  splice() {\n    const ret = super.splice.apply(this, arguments);\n    _updateParentPopulated(this);\n    return ret;\n  }\n\n  /**\n   * Helper for console.log\n   *\n   * @method inspect\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  inspect() {\n    return this.toObject();\n  }\n\n  /**\n   * Creates a subdocument casted to this schema.\n   *\n   * This is the same subdocument constructor used for casting.\n   *\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\n   * @method create\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  create(obj) {\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    if (obj && Constructor.discriminators && Constructor.schema && Constructor.schema.options && Constructor.schema.options.discriminatorKey) {\n      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, obj[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n    return new Constructor(obj, this);\n  }\n\n  /*!\n   * ignore\n   */\n\n  notify(event) {\n    const _this = this;\n    return function notify(val, _arr) {\n      _arr = _arr || _this;\n      let i = _arr.length;\n      while (i--) {\n        if (_arr[i] == null) {\n          continue;\n        }\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n          default:\n            // NO-OP\n            break;\n        }\n        if (_arr[i].isMongooseArray) {\n          notify(val, _arr[i]);\n        } else if (_arr[i]) {\n          _arr[i].emit(event, val);\n        }\n      }\n    };\n  }\n  _markModified(elem, embeddedPath) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n      if (arguments.length) {\n        if (embeddedPath != null) {\n          // an embedded doc bubbled up the change\n          const index = elem.__index;\n          dirtyPath = dirtyPath + '.' + index + '.' + embeddedPath;\n        } else {\n          // directly set an index\n          dirtyPath = dirtyPath + '.' + elem;\n        }\n      }\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n      parent.markModified(dirtyPath, arguments.length > 0 ? elem : parent);\n    }\n    return this;\n  }\n}\nif (util.inspect.custom) {\n  CoreDocumentArray.prototype[util.inspect.custom] = CoreDocumentArray.prototype.inspect;\n}\n\n/*!\n * If this is a document array, each element may contain single\n * populated paths, so we need to modify the top-level document's\n * populated cache. See gh-8247, gh-8265.\n */\n\nfunction _updateParentPopulated(arr) {\n  const parent = arr[arrayParentSymbol];\n  if (!parent || parent.$__.populated == null) return;\n  const populatedPaths = Object.keys(parent.$__.populated).filter(p => p.startsWith(arr[arrayPathSymbol] + '.'));\n  for (const path of populatedPaths) {\n    const remnant = path.slice((arr[arrayPathSymbol] + '.').length);\n    if (!Array.isArray(parent.$__.populated[path].value)) {\n      continue;\n    }\n    parent.$__.populated[path].value = arr.map(val => val.populated(remnant));\n  }\n}\n\n/**\n * DocumentArray constructor\n *\n * @param {Array} values\n * @param {String} path the path to this array\n * @param {Document} doc parent document\n * @api private\n * @return {MongooseDocumentArray}\n * @inherits MongooseArray\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseDocumentArray(values, path, doc) {\n  // TODO: replace this with `new CoreDocumentArray().concat()` when we remove\n  // support for node 4.x and 5.x, see https://i.imgur.com/UAAHk4S.png\n  const arr = new CoreDocumentArray();\n  arr[arrayAtomicsSymbol] = {};\n  arr[arraySchemaSymbol] = void 0;\n  if (Array.isArray(values)) {\n    if (values[arrayPathSymbol] === path && values[arrayParentSymbol] === doc) {\n      arr[arrayAtomicsSymbol] = Object.assign({}, values[arrayAtomicsSymbol]);\n    }\n    values.forEach(v => {\n      _basePush.call(arr, v);\n    });\n  }\n  arr[arrayPathSymbol] = path;\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020 && #3034)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc && doc instanceof Document) {\n    arr[arrayParentSymbol] = doc;\n    arr[arraySchemaSymbol] = doc.schema.path(path);\n\n    // `schema.path()` doesn't drill into nested arrays properly yet, see\n    // gh-6398, gh-6602. This is a workaround because nested arrays are\n    // always plain non-document arrays, so once you get to a document array\n    // nesting is done. Matryoshka code.\n    while (arr != null && arr[arraySchemaSymbol] != null && arr[arraySchemaSymbol].$isMongooseArray && !arr[arraySchemaSymbol].$isMongooseDocumentArray) {\n      arr[arraySchemaSymbol] = arr[arraySchemaSymbol].casterConstructor;\n    }\n  }\n  return arr;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = MongooseDocumentArray;","map":{"version":3,"names":["CoreMongooseArray","require","Document","ObjectId","castObjectId","getDiscriminatorByValue","internalToObjectOptions","util","utils","arrayAtomicsSymbol","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","documentArrayParent","_basePush","Array","prototype","push","CoreDocumentArray","isMongooseDocumentArray","toBSON","toObject","map","ret","apply","arguments","_cast","value","index","Constructor","casterConstructor","isInstance","$isMongooseDocumentArray","constructor","baseCasterConstructor","__parentArray","$setIndex","undefined","Buffer","isBuffer","isObject","_id","discriminators","schema","options","discriminatorKey","constructorByValue","cast","id","casted","sid","toString","e","val","get","String","deepEqual","concat","doc","slice","arr","_updateParentPopulated","pull","shift","splice","inspect","create","obj","notify","event","_this","_arr","i","length","isMongooseArray","emit","_markModified","elem","embeddedPath","parent","dirtyPath","__index","endsWith","markModified","custom","$__","populated","populatedPaths","Object","keys","filter","p","startsWith","path","remnant","isArray","MongooseDocumentArray","values","assign","forEach","v","call","$isMongooseArray","module","exports"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/types/documentarray.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst CoreMongooseArray = require('./core_array');\nconst Document = require('../document');\nconst ObjectId = require('./objectid');\nconst castObjectId = require('../cast/objectid');\nconst getDiscriminatorByValue = require('../helpers/discriminator/getDiscriminatorByValue');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\nconst util = require('util');\nconst utils = require('../utils');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\nconst documentArrayParent = require('../helpers/symbols').documentArrayParent;\n\nconst _basePush = Array.prototype.push;\n\nclass CoreDocumentArray extends CoreMongooseArray {\n  get isMongooseDocumentArray() {\n    return true;\n  }\n\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  }\n\n  /*!\n   * ignore\n   */\n\n  map() {\n    const ret = super.map.apply(this, arguments);\n    ret[arraySchemaSymbol] = null;\n    ret[arrayPathSymbol] = null;\n    ret[arrayParentSymbol] = null;\n\n    return ret;\n  }\n\n  /**\n   * Overrides MongooseArray#cast\n   *\n   * @method _cast\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n\n  _cast(value, index) {\n    if (this[arraySchemaSymbol] == null) {\n      return value;\n    }\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    const isInstance = Constructor.$isMongooseDocumentArray ?\n      value && value.isMongooseDocumentArray :\n      value instanceof Constructor;\n    if (isInstance ||\n        // Hack re: #5001, see #5005\n        (value && value.constructor && value.constructor.baseCasterConstructor === Constructor)) {\n      if (!(value[documentArrayParent] && value.__parentArray)) {\n        // value may have been created using array.create()\n        value[documentArrayParent] = this[arrayParentSymbol];\n        value.__parentArray = this;\n      }\n      value.$setIndex(index);\n      return value;\n    }\n\n    if (value === undefined || value === null) {\n      return null;\n    }\n\n    // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n    if (Buffer.isBuffer(value) ||\n        value instanceof ObjectId || !utils.isObject(value)) {\n      value = { _id: value };\n    }\n\n    if (value &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, value[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    if (Constructor.$isMongooseDocumentArray) {\n      return Constructor.cast(value, this, undefined, undefined, index);\n    }\n    return new Constructor(value, this, undefined, undefined, index);\n  }\n\n  /**\n   * Searches array items for the first document with a matching _id.\n   *\n   * ####Example:\n   *\n   *     const embeddedDoc = m.array.id(some_id);\n   *\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\n   * @param {ObjectId|String|Number|Buffer} id\n   * @TODO cast to the _id based on schema for proper comparison\n   * @method id\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  id(id) {\n    let casted;\n    let sid;\n    let _id;\n\n    try {\n      casted = castObjectId(id).toString();\n    } catch (e) {\n      casted = null;\n    }\n\n    for (const val of this) {\n      if (!val) {\n        continue;\n      }\n\n      _id = val.get('_id');\n\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n        if (sid == _id._id) {\n          return val;\n        }\n      } else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) {\n        if (id == _id || utils.deepEqual(id, _id)) {\n          return val;\n        }\n      } else if (casted == _id) {\n        return val;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns a native js Array of plain js objects\n   *\n   * ####NOTE:\n   *\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n   *\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n   * @return {Array}\n   * @method toObject\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  toObject(options) {\n    // `[].concat` coerces the return value into a vanilla JS array, rather\n    // than a Mongoose array.\n    return [].concat(this.map(function(doc) {\n      if (doc == null) {\n        return null;\n      }\n      if (typeof doc.toObject !== 'function') {\n        return doc;\n      }\n      return doc.toObject(options);\n    }));\n  }\n\n  slice() {\n    const arr = super.slice.apply(this, arguments);\n    arr[arrayParentSymbol] = this[arrayParentSymbol];\n    arr[arrayPathSymbol] = this[arrayPathSymbol];\n\n    return arr;\n  }\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseDocumentArray\n   */\n\n  push() {\n    const ret = super.push.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n\n  /**\n   * Pulls items from the array atomically.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method pull\n   * @memberOf MongooseDocumentArray\n   */\n\n  pull() {\n    const ret = super.pull.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   */\n\n  shift() {\n    const ret = super.shift.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   */\n\n  splice() {\n    const ret = super.splice.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n\n  /**\n   * Helper for console.log\n   *\n   * @method inspect\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  inspect() {\n    return this.toObject();\n  }\n\n  /**\n   * Creates a subdocument casted to this schema.\n   *\n   * This is the same subdocument constructor used for casting.\n   *\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\n   * @method create\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  create(obj) {\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    if (obj &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, obj[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    return new Constructor(obj, this);\n  }\n\n  /*!\n   * ignore\n   */\n\n  notify(event) {\n    const _this = this;\n    return function notify(val, _arr) {\n      _arr = _arr || _this;\n      let i = _arr.length;\n      while (i--) {\n        if (_arr[i] == null) {\n          continue;\n        }\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n          default:\n            // NO-OP\n            break;\n        }\n\n        if (_arr[i].isMongooseArray) {\n          notify(val, _arr[i]);\n        } else if (_arr[i]) {\n          _arr[i].emit(event, val);\n        }\n      }\n    };\n  }\n\n  _markModified(elem, embeddedPath) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n\n      if (arguments.length) {\n        if (embeddedPath != null) {\n          // an embedded doc bubbled up the change\n          const index = elem.__index;\n          dirtyPath = dirtyPath + '.' + index + '.' + embeddedPath;\n        } else {\n          // directly set an index\n          dirtyPath = dirtyPath + '.' + elem;\n        }\n      }\n\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n\n      parent.markModified(dirtyPath, arguments.length > 0 ? elem : parent);\n    }\n\n    return this;\n  }\n}\n\nif (util.inspect.custom) {\n  CoreDocumentArray.prototype[util.inspect.custom] =\n    CoreDocumentArray.prototype.inspect;\n}\n\n/*!\n * If this is a document array, each element may contain single\n * populated paths, so we need to modify the top-level document's\n * populated cache. See gh-8247, gh-8265.\n */\n\nfunction _updateParentPopulated(arr) {\n  const parent = arr[arrayParentSymbol];\n  if (!parent || parent.$__.populated == null) return;\n\n  const populatedPaths = Object.keys(parent.$__.populated).\n    filter(p => p.startsWith(arr[arrayPathSymbol] + '.'));\n\n  for (const path of populatedPaths) {\n    const remnant = path.slice((arr[arrayPathSymbol] + '.').length);\n    if (!Array.isArray(parent.$__.populated[path].value)) {\n      continue;\n    }\n\n    parent.$__.populated[path].value = arr.map(val => val.populated(remnant));\n  }\n}\n\n/**\n * DocumentArray constructor\n *\n * @param {Array} values\n * @param {String} path the path to this array\n * @param {Document} doc parent document\n * @api private\n * @return {MongooseDocumentArray}\n * @inherits MongooseArray\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseDocumentArray(values, path, doc) {\n  // TODO: replace this with `new CoreDocumentArray().concat()` when we remove\n  // support for node 4.x and 5.x, see https://i.imgur.com/UAAHk4S.png\n  const arr = new CoreDocumentArray();\n\n  arr[arrayAtomicsSymbol] = {};\n  arr[arraySchemaSymbol] = void 0;\n  if (Array.isArray(values)) {\n    if (values[arrayPathSymbol] === path &&\n        values[arrayParentSymbol] === doc) {\n      arr[arrayAtomicsSymbol] = Object.assign({}, values[arrayAtomicsSymbol]);\n    }\n    values.forEach(v => {\n      _basePush.call(arr, v);\n    });\n  }\n  arr[arrayPathSymbol] = path;\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020 && #3034)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc && doc instanceof Document) {\n    arr[arrayParentSymbol] = doc;\n    arr[arraySchemaSymbol] = doc.schema.path(path);\n\n    // `schema.path()` doesn't drill into nested arrays properly yet, see\n    // gh-6398, gh-6602. This is a workaround because nested arrays are\n    // always plain non-document arrays, so once you get to a document array\n    // nesting is done. Matryoshka code.\n    while (arr != null &&\n        arr[arraySchemaSymbol] != null &&\n        arr[arraySchemaSymbol].$isMongooseArray &&\n        !arr[arraySchemaSymbol].$isMongooseDocumentArray) {\n      arr[arraySchemaSymbol] = arr[arraySchemaSymbol].casterConstructor;\n    }\n  }\n\n  return arr;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = MongooseDocumentArray;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}