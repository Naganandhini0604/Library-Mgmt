{"ast":null,"code":"'use strict';\n\nconst castFilterPath = require('../query/castFilterPath');\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\nconst getPath = require('../schema/getPath');\nconst updatedPathsByArrayFilter = require('./updatedPathsByArrayFilter');\nmodule.exports = function castArrayFilters(query) {\n  const arrayFilters = query.options.arrayFilters;\n  if (!Array.isArray(arrayFilters)) {\n    return;\n  }\n  const update = query.getUpdate();\n  const schema = query.schema;\n  const strictQuery = schema.options.strictQuery;\n  const updatedPathsByFilter = updatedPathsByArrayFilter(update);\n  for (const filter of arrayFilters) {\n    if (filter == null) {\n      throw new Error(`Got null array filter in ${arrayFilters}`);\n    }\n    for (const key of Object.keys(filter)) {\n      if (filter[key] == null) {\n        continue;\n      }\n      const dot = key.indexOf('.');\n      let filterPath = dot === -1 ? updatedPathsByFilter[key] + '.0' : updatedPathsByFilter[key.substr(0, dot)] + '.0' + key.substr(dot);\n      if (filterPath == null) {\n        throw new Error(`Filter path not found for ${key}`);\n      }\n\n      // If there are multiple array filters in the path being updated, make sure\n      // to replace them so we can get the schema path.\n      filterPath = cleanPositionalOperators(filterPath);\n      const schematype = getPath(schema, filterPath);\n      if (schematype == null) {\n        if (!strictQuery) {\n          return;\n        }\n        // For now, treat `strictQuery = true` and `strictQuery = 'throw'` as\n        // equivalent for casting array filters. `strictQuery = true` doesn't\n        // quite work in this context because we never want to silently strip out\n        // array filters, even if the path isn't in the schema.\n        throw new Error(`Could not find path \"${filterPath}\" in schema`);\n      }\n      if (typeof filter[key] === 'object') {\n        filter[key] = castFilterPath(query, schematype, filter[key]);\n      } else {\n        filter[key] = schematype.castForQuery(filter[key]);\n      }\n    }\n  }\n};","map":{"version":3,"names":["castFilterPath","require","cleanPositionalOperators","getPath","updatedPathsByArrayFilter","module","exports","castArrayFilters","query","arrayFilters","options","Array","isArray","update","getUpdate","schema","strictQuery","updatedPathsByFilter","filter","Error","key","Object","keys","dot","indexOf","filterPath","substr","schematype","castForQuery"],"sources":["/home/ctl/Documents/nodejs/node_modules/mongoose/lib/helpers/update/castArrayFilters.js"],"sourcesContent":["'use strict';\n\nconst castFilterPath = require('../query/castFilterPath');\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\nconst getPath = require('../schema/getPath');\nconst updatedPathsByArrayFilter = require('./updatedPathsByArrayFilter');\n\nmodule.exports = function castArrayFilters(query) {\n  const arrayFilters = query.options.arrayFilters;\n  if (!Array.isArray(arrayFilters)) {\n    return;\n  }\n\n  const update = query.getUpdate();\n  const schema = query.schema;\n  const strictQuery = schema.options.strictQuery;\n\n  const updatedPathsByFilter = updatedPathsByArrayFilter(update);\n\n  for (const filter of arrayFilters) {\n    if (filter == null) {\n      throw new Error(`Got null array filter in ${arrayFilters}`);\n    }\n    for (const key of Object.keys(filter)) {\n      if (filter[key] == null) {\n        continue;\n      }\n\n      const dot = key.indexOf('.');\n      let filterPath = dot === -1 ?\n        updatedPathsByFilter[key] + '.0' :\n        updatedPathsByFilter[key.substr(0, dot)] + '.0' + key.substr(dot);\n\n      if (filterPath == null) {\n        throw new Error(`Filter path not found for ${key}`);\n      }\n\n      // If there are multiple array filters in the path being updated, make sure\n      // to replace them so we can get the schema path.\n      filterPath = cleanPositionalOperators(filterPath);\n\n      const schematype = getPath(schema, filterPath);\n      if (schematype == null) {\n        if (!strictQuery) {\n          return;\n        }\n        // For now, treat `strictQuery = true` and `strictQuery = 'throw'` as\n        // equivalent for casting array filters. `strictQuery = true` doesn't\n        // quite work in this context because we never want to silently strip out\n        // array filters, even if the path isn't in the schema.\n        throw new Error(`Could not find path \"${filterPath}\" in schema`);\n      }\n      if (typeof filter[key] === 'object') {\n        filter[key] = castFilterPath(query, schematype, filter[key]);\n      } else {\n        filter[key] = schematype.castForQuery(filter[key]);\n      }\n    }\n  }\n};"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACzD,MAAMC,wBAAwB,GAAGD,OAAO,CAAC,oCAAoC,CAAC;AAC9E,MAAME,OAAO,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAC5C,MAAMG,yBAAyB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;AAExEI,MAAM,CAACC,OAAO,GAAG,SAASC,gBAAgB,CAACC,KAAK,EAAE;EAChD,MAAMC,YAAY,GAAGD,KAAK,CAACE,OAAO,CAACD,YAAY;EAC/C,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,YAAY,CAAC,EAAE;IAChC;EACF;EAEA,MAAMI,MAAM,GAAGL,KAAK,CAACM,SAAS,EAAE;EAChC,MAAMC,MAAM,GAAGP,KAAK,CAACO,MAAM;EAC3B,MAAMC,WAAW,GAAGD,MAAM,CAACL,OAAO,CAACM,WAAW;EAE9C,MAAMC,oBAAoB,GAAGb,yBAAyB,CAACS,MAAM,CAAC;EAE9D,KAAK,MAAMK,MAAM,IAAIT,YAAY,EAAE;IACjC,IAAIS,MAAM,IAAI,IAAI,EAAE;MAClB,MAAM,IAAIC,KAAK,CAAE,4BAA2BV,YAAa,EAAC,CAAC;IAC7D;IACA,KAAK,MAAMW,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC,EAAE;MACrC,IAAIA,MAAM,CAACE,GAAG,CAAC,IAAI,IAAI,EAAE;QACvB;MACF;MAEA,MAAMG,GAAG,GAAGH,GAAG,CAACI,OAAO,CAAC,GAAG,CAAC;MAC5B,IAAIC,UAAU,GAAGF,GAAG,KAAK,CAAC,CAAC,GACzBN,oBAAoB,CAACG,GAAG,CAAC,GAAG,IAAI,GAChCH,oBAAoB,CAACG,GAAG,CAACM,MAAM,CAAC,CAAC,EAAEH,GAAG,CAAC,CAAC,GAAG,IAAI,GAAGH,GAAG,CAACM,MAAM,CAACH,GAAG,CAAC;MAEnE,IAAIE,UAAU,IAAI,IAAI,EAAE;QACtB,MAAM,IAAIN,KAAK,CAAE,6BAA4BC,GAAI,EAAC,CAAC;MACrD;;MAEA;MACA;MACAK,UAAU,GAAGvB,wBAAwB,CAACuB,UAAU,CAAC;MAEjD,MAAME,UAAU,GAAGxB,OAAO,CAACY,MAAM,EAAEU,UAAU,CAAC;MAC9C,IAAIE,UAAU,IAAI,IAAI,EAAE;QACtB,IAAI,CAACX,WAAW,EAAE;UAChB;QACF;QACA;QACA;QACA;QACA;QACA,MAAM,IAAIG,KAAK,CAAE,wBAAuBM,UAAW,aAAY,CAAC;MAClE;MACA,IAAI,OAAOP,MAAM,CAACE,GAAG,CAAC,KAAK,QAAQ,EAAE;QACnCF,MAAM,CAACE,GAAG,CAAC,GAAGpB,cAAc,CAACQ,KAAK,EAAEmB,UAAU,EAAET,MAAM,CAACE,GAAG,CAAC,CAAC;MAC9D,CAAC,MAAM;QACLF,MAAM,CAACE,GAAG,CAAC,GAAGO,UAAU,CAACC,YAAY,CAACV,MAAM,CAACE,GAAG,CAAC,CAAC;MACpD;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}